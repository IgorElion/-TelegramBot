# -*- coding: utf-8 -*-
"""
Bot Telegram 2 para envio de sinais em canais separados por idioma.
Versão independente que não depende mais do Bot 1.
Os sinais serão enviados da seguinte forma:
- Canal Português: -1002424874613
- Canal Inglês: -1002453956387
- Canal Espanhol: -1002446547846
O bot enviará 1 sinal por hora no minuto 13.
"""

# Importaes necessrias
import traceback
import socket
import pytz
from datetime import datetime, timedelta, time as dt_time
import json
import random
import time
import schedule
import requests
import logging
import sys
import os
from functools import lru_cache
import telebot
import threading
from datetime import time as datetime_time

# Definição da variável global assets
assets = {}

# Definição de outras variáveis globais
ultimo_ativo = None
ultimo_signal = None

# Configuração do logger específico para o Bot 2
BOT2_LOGGER = logging.getLogger("bot2")
BOT2_LOGGER.setLevel(logging.INFO)
bot2_formatter = logging.Formatter(
    "%(asctime)s - BOT2 - %(levelname)s - %(message)s")

# Evitar duplicação de handlers
if not BOT2_LOGGER.handlers:
    bot2_file_handler = logging.FileHandler("bot_telegram_bot2_logs.log")
    bot2_file_handler.setFormatter(bot2_formatter)
    BOT2_LOGGER.addHandler(bot2_file_handler)

    bot2_console_handler = logging.StreamHandler()
    bot2_console_handler.setFormatter(bot2_formatter)
    BOT2_LOGGER.addHandler(bot2_console_handler)

# Credenciais Telegram
BOT2_TOKEN = "7997585882:AAFDyG-BYskj1gyAbh17X5jd6DDClXdluww"

# Inicialização do bot
bot2 = telebot.TeleBot(BOT2_TOKEN)

# Configuração dos canais para cada idioma
BOT2_CANAIS_CONFIG = {
    "pt": ["-1002424874613"],  # Canal para mensagens em português
    "en": ["-1002453956387"],  # Canal para mensagens em inglês
    "es": ["-1002446547846"]   # Canal para mensagens em espanhol
}

# Configurações adicionais por idioma
CONFIGS_IDIOMA = {
    "pt": {
        "link_corretora": "https://trade.xxbroker.com/register?aff=741613&aff_model=revenue&afftrack=",
        "fuso_horario": "America/Sao_Paulo",  # Brasil (UTC-3)
    },
    "en": {
        "link_corretora": "https://trade.xxbroker.com/register?aff=741727&aff_model=revenue&afftrack=",
        "fuso_horario": "America/New_York",  # EUA (UTC-5 ou UTC-4 no horário de verão)
    },
    "es": {
        "link_corretora": "https://trade.xxbroker.com/register?aff=741726&aff_model=revenue&afftrack=",
        "fuso_horario": "Europe/Madrid",  # Espanha (UTC+1 ou UTC+2 no horário de verão)
    }
}

# Lista de IDs dos canais para facilitar iterao
BOT2_CHAT_IDS = []
for idioma, chats in BOT2_CANAIS_CONFIG.items():
    BOT2_CHAT_IDS.extend(chats)

# Base URL do GitHub para os arquivos
GITHUB_BASE_URL = "https://raw.githubusercontent.com/IgorElion/-TelegramBot/main/"

# Dicionário de mapeamento de caminhos dos GIFs válidos
GIFS_VALIDOS = {
    "gif_especial_pt": "videos/gif_especial/pt/especial.gif",
    "pos_sinal_pt": "videos/pos_sinal/pt/padrao.gif",
    "pos_sinal_en": "videos/pos_sinal/en/padrao.gif",
    "pos_sinal_es": "videos/pos_sinal/es/padrao.gif",
    "promo_pt": "videos/promo/pt/promo.gif",
    "promo_en": "videos/promo/en/promo.gif",
    "promo_es": "videos/promo/es/promo.gif",
}

# URLs alternativas para GIFs (utilizadas apenas na verificação)
ALTERNATIVE_GIFS = {}

# URLs diretas para GIFs do Giphy
URLS_GIFS_DIRETAS = {
    "promo_pt": "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExZGhqMmNqOWFpbTQ2cjNxMzF1YncxcnAwdTFvN2o1NWRmc2dvYXZ6bCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/whPiIq21hxXuJn7WVX/giphy.gif",
    "promo_en": "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExZGhqMmNqOWFpbTQ2cjNxMzF1YncxcnAwdTFvN2o1NWRmc2dvYXZ6bCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/whPiIq21hxXuJn7WVX/giphy.gif",
    "promo_es": "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExZGhqMmNqOWFpbTQ2cjNxMzF1YncxcnAwdTFvN2o1NWRmc2dvYXZ6bCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/whPiIq21hxXuJn7WVX/giphy.gif",
    "pos_sinal_padrao": "https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExdjZjb3hyMDVqOHAyb2xvZTgxZzVpb2ZscWE3M2RzOHY5Z3VzZTc2YiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/eWbGux0IXOygZ7m2Of/giphy.gif",
    "gif_especial_pt": "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExN2tzdzB4bjNjaWo4bm9zdDR3d2g4bmQzeHRqcWx6MTQxYTA1cjRoeCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/E2EknXAKA5ac8gKVxu/giphy.gif"
}

# ID para compatibilidade com cdigo existente
BOT2_CHAT_ID_CORRETO = BOT2_CHAT_IDS[0]  # Usar o primeiro canal como padro

# Limite de sinais por hora
BOT2_LIMITE_SINAIS_POR_HORA = 1

# Categorias de ativos
ATIVOS_CATEGORIAS = {
    "Binary": [],
    "Blitz": [],
    "Digital": [
        "Gold/Silver (OTC)",
        "Worldcoin (OTC)",
        "USD/THB (OTC)",
        "ETH/USD (OTC)",
        "CHF/JPY (OTC)",
        "Pepe (OTC)",
        "GBP/AUD (OTC)",
        "GBP/CHF",
        "GBP/CAD (OTC)",
        "EUR/JPY (OTC)",
        "AUD/CHF",
        "GER 30 (OTC)",
        "AUD/CHF (OTC)",
        "EUR/AUD",
        "USD/CAD (OTC)",
        "BTC/USD",
        "Amazon/Ebay (OTC)",
        "Coca-Cola Company (OTC)",
        "AIG (OTC)",
        "Amazon/Alibaba (OTC)",
        "Bitcoin Cash (OTC)",
        "AUD/USD",
        "DASH (OTC)",
        "BTC/USD (OTC)",
        "SP 35 (OTC)",
        "TRUMP Coin (OTC)",
        "US 100 (OTC)",
        "EUR/CAD (OTC)",
        "HK 33 (OTC)",
        "Alphabet/Microsoft (OTC)",
        "1000Sats (OTC)",
        "USD/ZAR (OTC)",
        "Litecoin (OTC)",
        "Hamster Kombat (OTC)",
        "USD Currency Index (OTC)",
        "AUS 200 (OTC)",
        "USD/CAD",
        "USD/JPY",
        "MELANIA Coin (OTC)",
        "JP 225 (OTC)",
        "AUD/CAD (OTC)",
        "AUD/JPY (OTC)",
        "US 500 (OTC)",
    ],
}

# Configurações de horários específicos para cada ativo
HORARIOS_PADRAO = {
    "USD/BRL_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-00:45", "01:15-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "USOUSD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-06:00", "06:30-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "BTC/USD_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Google_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "EUR/JPY_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "ETH/USD_OTC": {
        "Monday": ["00:00-19:45", "20:15-23:59"],
        "Tuesday": ["00:00-19:45", "20:15-23:59"],
        "Wednesday": ["00:00-19:45", "20:15-23:59"],
        "Thursday": ["00:00-19:45", "20:15-23:59"],
        "Friday": ["00:00-19:45", "20:15-23:59"],
        "Saturday": ["00:00-19:45", "20:15-23:59"],
        "Sunday": ["00:00-19:45", "20:15-23:59"],
    },
    "MELANIA_COIN_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "EUR/GBP_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "Apple_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "Amazon_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "TRUM_Coin_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Nike_Inc_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "DOGECOIN_OTC": {
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
    },
    "Tesla_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "SOL/USD_OTC": {
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
    },
    "1000Sats_OTC": {
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "XAUUSD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-06:00", "06:30-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "McDonalds_Corporation_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Meta_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "Coca_Cola_Company_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "CARDANO_OTC": {
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
    },
    "EUR/USD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "PEN/USD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-00:45", "01:15-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "Bitcoin_Cash_OTC": {
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "AUD/CAD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "Tesla/Ford_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "US_100_OTC": {
        "Monday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Tuesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Wednesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Thursday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
    },
    "FR_40_OTC": {  # Novo horrio para FR 40 (OTC)
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "AUS_200_OTC": {  # Atualizado com horrios especficos
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
    },
    "US_500_OTC": {  # Atualizado com horrios especficos
        "Monday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Tuesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Wednesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Thursday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
    },
    "EU_50_OTC": {  # Novo ativo com horrios especficos
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Gold": {  # Novo ativo com horrios especficos
        "Monday": ["04:00-16:00"],
        "Tuesday": ["04:00-16:00"],
        "Wednesday": ["04:00-16:00"],
        "Thursday": ["04:00-16:00"],
        "Friday": ["04:00-16:00"],
        "Saturday": [],
        "Sunday": [],
    },
    "XAUUSD_OTC": {  # Atualizado com horrios especficos
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-06:00", "06:10-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "US2000_OTC": {  # Novo ativo com horrios especficos
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Gala_OTC": {  # Novo horrio especfico para Gala (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Floki_OTC": {  # Novo horrio especfico para Floki (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Graph_OTC": {  # Novo horrio especfico para Graph (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Intel_IBM_OTC": {  # Novo horrio para Intel/IBM (OTC)
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Pyth_OTC": {  # Atualizado para Pyth (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "IOTA_OTC": {  # Atualizado para IOTA (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "DOGECOIN_OTC": {  # Atualizado para DOGECOIN (OTC)
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
    },
    "Sei_OTC": {  # Atualizado para Sei (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Decentraland_OTC": {  # Atualizado para Decentraland (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "PEN_USD_OTC": {  # Atualizado para PEN/USD (OTC)
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-00:45", "01:15-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "Sandbox_OTC": {  # Atualizado para Sandbox (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "TRON_USD_OTC": {  # Atualizado para TRON/USD (OTC)
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
    },
    "Ripple_OTC": {  # Atualizado para Ripple (OTC)
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
    },
    "NEAR_OTC": {  # Atualizado para NEAR (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Arbitrum_OTC": {  # Atualizado para Arbitrum (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Polygon_OTC": {  # Atualizado para Polygon (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "EOS_OTC": {  # Atualizado para EOS (OTC)
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
    },
    "Alphabet_Microsoft_OTC": {  # Novo horrio para Alphabet/Microsoft (OTC)
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Jupiter_OTC": {  # Atualizado para Jupiter (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Dogwifhat_OTC": {  # Novo horrio para Dogwifhat (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Immutable_OTC": {  # Atualizado para Immutable (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Stacks_OTC": {  # Atualizado para Stacks (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Pepe_OTC": {  # Atualizado para Pepe (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Ronin_OTC": {  # Atualizado para Ronin (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Gold/Silver_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Worldcoin_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "USD/THB_OTC": {
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
    },
    "ETH/USD_OTC": {
        "Monday": ["00:00-19:45", "20:15-23:59"],
        "Tuesday": ["00:00-19:45", "20:15-23:59"],
        "Wednesday": ["00:00-19:45", "20:15-23:59"],
        "Thursday": ["00:00-19:45", "20:15-23:59"],
        "Friday": ["00:00-19:45", "20:15-23:59"],
        "Saturday": ["00:00-19:45", "20:15-23:59"],
        "Sunday": ["00:00-19:45", "20:15-23:59"],
    },
    "CHF/JPY_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Pepe_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "GBP/AUD_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "GBP/CHF": {
        "Monday": ["00:00-16:00"],
        "Tuesday": ["00:00-16:00"],
        "Wednesday": ["00:00-16:00"],
        "Thursday": ["00:00-16:00"],
        "Friday": ["00:00-14:00"],
                "Saturday": [],
        "Sunday": [],
    },
    "GBP/CAD_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "EUR/JPY_OTC": {
                "Monday": ["00:00-23:59"],
                "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
                "Thursday": ["00:00-23:59"],
                "Friday": ["00:00-23:59"],
                "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "AUD/CHF": {
        "Monday": ["00:00-16:00"],
        "Tuesday": ["00:00-16:00"],
        "Wednesday": ["00:00-16:00"],
        "Thursday": ["00:00-16:00"],
        "Friday": ["00:00-14:00"],
                "Saturday": [],
        "Sunday": [],
    },
    "GER_30_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "AUD/CHF_OTC": {
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
    },
    "EUR/AUD": {
        "Monday": ["00:00-16:00"],
        "Tuesday": ["00:00-16:00"],
        "Wednesday": ["00:00-16:00"],
        "Thursday": ["00:00-16:00"],
        "Friday": ["00:00-14:00"],
                "Saturday": [],
        "Sunday": [],
    },
    "USD/CAD_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "BTC/USD": {
        "Monday": ["03:00-15:00"],
        "Tuesday": ["03:00-15:00"],
        "Wednesday": ["03:00-15:00"],
        "Thursday": ["03:00-15:00"],
        "Friday": ["03:00-15:00"],
        "Saturday": [],
        "Sunday": [],
    },
    "Amazon/Ebay_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Coca-Cola_Company_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "AIG_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Amazon/Alibaba_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Bitcoin_Cash_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "USD Currency Index_OTC": {
        "Monday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-10:00", "10:30-18:00"],
        "Saturday": [],
        "Sunday": ["19:00-23:59"],
    },
    "AUS_200_OTC": {  # J existe, mas atualizando para os novos horrios
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
    },
    "USD/CAD": {
        "Monday": ["03:00-15:00"],
        "Tuesday": ["03:00-15:00", "21:00-23:59"],
        "Wednesday": ["00:00-15:00"],
        "Thursday": ["03:00-15:00"],
        "Friday": ["03:00-15:00"],
        "Saturday": [],
        "Sunday": [],
    },
    "USD/JPY": {
        "Monday": ["00:00-14:00", "23:00-23:59"],
        "Tuesday": ["00:00-14:00", "23:00-23:59"],
        "Wednesday": ["00:00-14:00", "23:00-23:59"],
        "Thursday": ["00:00-14:00", "23:00-23:59"],
        "Friday": ["00:00-14:00"],
        "Saturday": [],
        "Sunday": ["23:00-23:59"],
    },
    "MELANIA_Coin_OTC": {  # J existe, mantendo a mesma configurao
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "JP_225_OTC": {
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
    },
    "AUD/CAD_OTC": {  # J existe, atualizando a configurao
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
    },
    "AUD/JPY_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "US_500_OTC": {  # J existe, atualizando a configurao
        "Monday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Tuesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Wednesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Thursday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
                "Friday": ["00:00-23:59"],
                "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
    },
}

# URLs diretas para GIFs
URLS_GIFS_DIRETAS = {
    "promo_pt": "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExZGhqMmNqOWFpbTQ2cjNxMzF1YncxcnAwdTFvN2o1NWRmc2dvYXZ6bCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/whPiIq21hxXuJn7WVX/giphy.gif",
    "promo_en": "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExZGhqMmNqOWFpbTQ2cjNxMzF1YncxcnAwdTFvN2o1NWRmc2dvYXZ6bCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/whPiIq21hxXuJn7WVX/giphy.gif",
    "promo_es": "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExZGhqMmNqOWFpbTQ2cjNxMzF1YncxcnAwdTFvN2o1NWRmc2dvYXZ6bCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/whPiIq21hxXuJn7WVX/giphy.gif",
    "pos_sinal_padrao": "https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExdjZjb3hyMDVqOHAyb2xvZTgxZzVpb2ZscWE3M2RzOHY5Z3VzZTc2YiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/eWbGux0IXOygZ7m2Of/giphy.gif",
    "gif_especial_pt": "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExN2tzdzB4bjNjaWo4bm9zdDR3d2g4bmQzeHRqcWx6MTQxYTA1cjRoeCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/E2EknXAKA5ac8gKVxu/giphy.gif"
}

# Adicionar variável global para controlar mensagem de perda enviada por dia
mensagem_perda_enviada_hoje = False

# Variáveis para controle de sinais
ultimo_sinal_enviado = None

def adicionar_blitz(lista_ativos):
    for ativo in lista_ativos:
        if ativo in HORARIOS_PADRAO:
            assets[ativo] = HORARIOS_PADRAO[ativo]
        else:
            assets[ativo] = {
                "Monday": ["00:00-23:59"],
                "Tuesday": ["00:00-23:59"],
                "Wednesday": ["00:00-23:59"],
                "Thursday": ["00:00-23:59"],
                "Friday": ["00:00-23:59"],
                "Saturday": ["00:00-23:59"],
                "Sunday": ["00:00-23:59"],
            }
        ATIVOS_CATEGORIAS[ativo] = "Blitz"


# Exemplos de como adicionar ativos (comentado para referncia)
# adicionar_forex(["EUR/USD", "GBP/USD"])
# adicionar_crypto(["BTC/USD", "ETH/USD"])
# adicionar_stocks(["AAPL", "MSFT"])

# Funo para parsear os horrios


@lru_cache(maxsize=128)
def parse_time_range(time_str):
    """
    Converte uma string de intervalo de tempo (e.g. "09:30-16:00") para um par de time objects.
    """
    start_str, end_str = time_str.split("-")
    start_time = datetime.strptime(start_str, "%H:%M").time()
    end_time = datetime.strptime(end_str, "%H:%M").time()
    return start_time, end_time


# Funo para verificar disponibilidade de ativos


def is_asset_available(asset, current_time=None, current_day=None):
    """
    Verifica se um ativo está disponível para negociação em um determinado horário.

    Args:
        asset (str): O nome do ativo a ser verificado.
        current_time (datetime, optional): O horário atual. Se None, usará o horário atual do sistema.
        current_day (str, optional): O dia atual. Se None, será determinado a partir do horário atual.

    Returns:
        bool: True se o ativo estiver disponível, False caso contrário.
    """
    # Se o horário atual não foi fornecido, usar o horário de Brasília
    if current_time is None:
        current_time = bot2_obter_hora_brasilia()

    # Determinar o dia da semana atual
    if current_day is None:
        # segunda-feira, terça-feira, etc.
        current_day = current_time.strftime("%A")

    # Transformar o horário atual em um formato de string para comparação
    current_time_str = current_time.strftime("%H:%M")

    # Se o ativo tiver um horário personalizado, verificar nesse horário
    asset_key = asset.replace(" ", "_").replace("/", "_")
    if asset_key in HORARIOS_PADRAO:
        day_ranges = HORARIOS_PADRAO[asset_key].get(current_day, [])
        if not day_ranges:
            return False  # Se não há horários definidos para este dia, o ativo não está disponível

        # Verificar se o horário atual está dentro de algum dos intervalos
        # definidos
        for time_range in day_ranges:
            start_time, end_time = time_range.split("-")
            if start_time <= current_time_str <= end_time:
                return True

        return False  # Se não está em nenhum intervalo, não está disponível

    # Se o ativo não tem um horário específico definido, ele está sempre
    # disponível
    return True


def bot2_verificar_horario_ativo(ativo, categoria):
    """
    Verifica se um ativo está disponível no horário atual.

    Args:
        ativo (str): O nome do ativo a verificar
        categoria (str): A categoria do ativo (Binary, Blitz, Digital)

    Returns:
        bool: True se o ativo estiver disponível, False caso contrário
    """
    # Obter o horário atual em Brasília
    agora = bot2_obter_hora_brasilia()
    dia_semana = agora.strftime("%A")

    # Verificar disponibilidade usando a função is_asset_available
    return is_asset_available(ativo, agora, dia_semana)


# Funo para obter hora no fuso horário de Brasília (específica para Bot 2)


def bot2_obter_hora_brasilia():
    """
    Retorna a hora atual no fuso horário de Brasília.
    """
    fuso_horario_brasilia = pytz.timezone("America/Sao_Paulo")
    return datetime.now(fuso_horario_brasilia)


def bot2_verificar_disponibilidade():
    """
    Verifica quais ativos estão disponíveis no momento da verificação.
    Retorna uma lista de ativos da categoria Digital disponíveis.
    """
    ativos_disponiveis = []

    # Obter hora atual no fuso horário de Brasília
    agora = bot2_obter_hora_brasilia()
    dia_atual = agora.strftime("%A")
    hora_atual = agora.strftime("%H:%M")

    BOT2_LOGGER.info(
        f"Verificando disponibilidade para o dia {dia_atual} às {hora_atual}"
    )

    # Filtrar apenas ativos da categoria Digital
    ativos_digital = [ativo for ativo in ATIVOS_CATEGORIAS["Digital"]]

    if not ativos_digital:
        BOT2_LOGGER.warning("Nenhum ativo na categoria Digital encontrado!")
        return []

    BOT2_LOGGER.info(
        f"Total de ativos na categoria Digital: {len(ativos_digital)}"
    )

    # Verificar disponibilidade de cada ativo
    for ativo in ativos_digital:
        if is_asset_available(ativo, hora_atual, dia_atual):
            ativos_disponiveis.append(ativo)

    BOT2_LOGGER.info(
        f"Ativos disponíveis no momento ({len(ativos_disponiveis)}): {ativos_disponiveis}"
    )

    return ativos_disponiveis


def bot2_gerar_sinal_aleatorio():
    """Gera um sinal de trading aleatório com base nas categorias disponíveis."""
    global assets

    try:
        # Obter a hora atual em Brasília
        agora = bot2_obter_hora_brasilia()

        # Selecionar apenas uma categoria para todos os sinais (Digital)
        categoria = "Digital"

        # Verificar se há ativos disponíveis na categoria selecionada
        ativos_na_categoria = ATIVOS_CATEGORIAS[categoria]

        if not ativos_na_categoria:
            BOT2_LOGGER.warning(
                f"Nenhum ativo disponível na categoria {categoria}")
            return None

        # Escolher aleatoriamente um ativo da categoria
        ativo = random.choice(ativos_na_categoria)

        # Escolher aleatoriamente a direção (CALL ou PUT)
        direcao = random.choice(["CALL", "PUT"])

        # Definir o tempo de expiração fixo em 5 minutos para todos os sinais
        tempo_expiracao_minutos = 5
        expiracao_time = bot2_obter_hora_brasilia() + timedelta(
            minutes=tempo_expiracao_minutos
        )
        expiracao_texto = f"🕒 Expiração: {tempo_expiracao_minutos} minutos ({expiracao_time.strftime('%H:%M')})"

        # Registrar nos logs que um sinal foi gerado
        BOT2_LOGGER.info(
            f"Sinal gerado: Ativo={ativo}, Direção={direcao}, Expiração={tempo_expiracao_minutos}min, Categoria={categoria}"
        )

        # Retornar o sinal como um dicionário
        return {
            "ativo": ativo,
            "direcao": direcao,
            "tempo_expiracao_minutos": tempo_expiracao_minutos,
            "expiracao_texto": expiracao_texto,
            "categoria": categoria,
        }

    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao gerar sinal aleatório: {str(e)}")
        import traceback

        BOT2_LOGGER.error(traceback.format_exc())
        return None


# Funo para obter hora no fuso horário específico (a partir da hora de
# Brasília)


def bot2_converter_fuso_horario(hora_brasilia, fuso_destino):
    """
    Converte uma hora do fuso horário de Brasília para o fuso horário de destino.
    
    Args:
        hora_brasilia (datetime): Hora no fuso horário de Brasília
        fuso_destino (str): Nome do fuso horário de destino (ex: 'America/New_York')
        
    Returns:
        datetime: Hora convertida para o fuso horário de destino
    """
    # Garantir que hora_brasilia tenha informações de fuso horário
    fuso_horario_brasilia = pytz.timezone("America/Sao_Paulo")
    
    # Se a hora não tiver informação de fuso, adicionar
    if hora_brasilia.tzinfo is None:
        hora_brasilia = fuso_horario_brasilia.localize(hora_brasilia)
    
    # Converter para o fuso horário de destino
    fuso_destino_tz = pytz.timezone(fuso_destino)
    hora_destino = hora_brasilia.astimezone(fuso_destino_tz)
    
    return hora_destino


def bot2_formatar_mensagem(sinal, hora_formatada, idioma):
    """
    Formata a mensagem de sinal para envio, conforme o idioma especificado.
    """
    global BOT2_LOGGER, CONFIGS_IDIOMA
    
    try:
        BOT2_LOGGER.info(
            f"Formatando mensagem com: ativo={sinal['ativo']}, direção={sinal['direcao']}, "
            + f"categoria={sinal['categoria']}, tempo={sinal['tempo_expiracao_minutos']}, idioma={idioma}"
        )
        
        # Obter configuração para o idioma
        config_idioma = CONFIGS_IDIOMA.get(idioma, CONFIGS_IDIOMA["pt"])
        
        # Obter informações do sinal
        ativo = sinal["ativo"]
        direcao = sinal["direcao"]
        categoria = sinal["categoria"]
        tempo_expiracao_minutos = sinal["tempo_expiracao_minutos"]
        
        # Definir o fuso horário de acordo com o idioma
        fuso_horario = config_idioma.get("fuso_horario", "America/Sao_Paulo")
        
        # Obter link da corretora específico para o idioma
        link_corretora = config_idioma.get("link_corretora", "")
        
        # Tratar nome do ativo para exibição
        nome_ativo_exibicao = ativo.replace("_", " ").replace("OTC", "(OTC)")
        
        # Determinar emoji baseado na direção
        emoji = "🟩" if direcao.upper() == "CALL" else "🟥"
        
        # Definir texto da direção para cada idioma
        if direcao.upper() == "CALL":
            action_pt = "COMPRA"
            action_en = "BUY"
            action_es = "COMPRA"
        else:
            action_pt = "VENDA"
            action_en = "SELL"
            action_es = "VENTA"
        
        # Ajustar o formato da hora dependendo do que foi recebido
        if len(hora_formatada) <= 5:  # Formato HH:MM
            hora_formatada = hora_formatada + ":00"  # Adicionar segundos como 00
            
        # Converter a hora de entrada para o formato correto
        try:
            hora_entrada = datetime.strptime(hora_formatada, "%H:%M:%S")
        except ValueError:
            try:
                # Tentar formato alternativo se o primeiro falhar
                hora_entrada = datetime.strptime(hora_formatada, "%H:%M")
            except ValueError:
                BOT2_LOGGER.error(f"Formato de hora inválido: {hora_formatada}. Usando hora atual.")
                # Usar a hora atual como fallback
                hora_entrada = datetime.now().replace(microsecond=0)

        # Ajustar para o horário atual se hora_entrada for apenas um time, não um datetime
        if isinstance(hora_entrada, datetime_time):
            agora = datetime.now()
            hora_entrada = datetime(
                agora.year, agora.month, agora.day, 
                hora_entrada.hour, hora_entrada.minute, hora_entrada.second
            )
        
        # Calcular as horas de expiração e gales
        hora_expiracao = hora_entrada + timedelta(minutes=tempo_expiracao_minutos)
        hora_gale1 = hora_expiracao + timedelta(minutes=5)
        hora_gale2 = hora_gale1 + timedelta(minutes=5)
        hora_gale3 = hora_gale2 + timedelta(minutes=5)
        
        # Formatar as horas para exibição sem os segundos
        hora_entrada_formatada = hora_entrada.strftime("%H:%M")
        hora_expiracao_formatada = hora_expiracao.strftime("%H:%M")
        hora_gale1_formatada = hora_gale1.strftime("%H:%M")
        hora_gale2_formatada = hora_gale2.strftime("%H:%M")
        hora_gale3_formatada = hora_gale3.strftime("%H:%M")
        
        # Converter as horas para o fuso horário específico do idioma
        if fuso_horario != "America/Sao_Paulo":
            # Converter para o fuso horário do idioma
            hora_entrada_formatada = bot2_converter_fuso_horario(
                hora_entrada, fuso_horario
            ).strftime("%H:%M")
            hora_expiracao_formatada = bot2_converter_fuso_horario(
                hora_expiracao, fuso_horario
            ).strftime("%H:%M")
            hora_gale1_formatada = bot2_converter_fuso_horario(
                hora_gale1, fuso_horario
            ).strftime("%H:%M")
            hora_gale2_formatada = bot2_converter_fuso_horario(
                hora_gale2, fuso_horario
            ).strftime("%H:%M")
            hora_gale3_formatada = bot2_converter_fuso_horario(
                hora_gale3, fuso_horario
            ).strftime("%H:%M")
        
        # Registrar os horários convertidos para o log
        BOT2_LOGGER.info(
            f"Horários convertidos para fuso {fuso_horario}: Entrada={hora_entrada_formatada}, "
            + f"Expiração={hora_expiracao_formatada}, Gale1={hora_gale1_formatada}, "
            + f"Gale2={hora_gale2_formatada}, Gale3={hora_gale3_formatada}"
        )

        # Formatação para singular ou plural de "minuto" baseado no tempo de
        # expiração
        texto_minutos_pt = "minuto" if tempo_expiracao_minutos == 1 else "minutos"
        texto_minutos_en = "minute" if tempo_expiracao_minutos == 1 else "minutes"
        texto_minutos_es = "minuto" if tempo_expiracao_minutos == 1 else "minutos"

        # Configurar links baseados no idioma
        if idioma == "pt":
            # Não sobrescrever link_corretora se já estiver definido
            if not link_corretora:
                link_corretora = (
                    "https://trade.xxbroker.com/register?aff=741613&aff_model=revenue&afftrack="
                )
            link_video = "https://t.me/trendingbrazil/215"
            texto_corretora = "Clique para abrir a corretora"
            texto_video = "Clique aqui"
            texto_tempo = "TEMPO PARA"
            texto_gale1 = "1º GALE — TEMPO PARA"
            texto_gale2 = "2º GALE TEMPO PARA"
            texto_gale3 = "3º GALE TEMPO PARA"
        elif idioma == "en":
            # Não sobrescrever link_corretora se já estiver definido
            if not link_corretora:
                link_corretora = (
                    "https://trade.xxbroker.com/register?aff=741727&aff_model=revenue&afftrack="
                )
            link_video = "https://t.me/trendingenglish/226"
            texto_corretora = "Click to open broker"
            texto_video = "Click here"
            texto_tempo = "TIME UNTIL"
            texto_gale1 = "1st GALE — TIME UNTIL"
            texto_gale2 = "2nd GALE TIME UNTIL"
            texto_gale3 = "3rd GALE TIME UNTIL"
        else:  # espanhol
            # Não sobrescrever link_corretora se já estiver definido
            if not link_corretora:
                link_corretora = (
                    "https://trade.xxbroker.com/register?aff=741726&aff_model=revenue&afftrack="
                )
            link_video = "https://t.me/trendingespanish/212"
            texto_corretora = "Haga clic para abrir el corredor"
            texto_video = "Haga clic aquí"
            texto_tempo = "TIEMPO HASTA"
            texto_gale1 = "1º GALE — TIEMPO HASTA"
            texto_gale2 = "2º GALE TIEMPO HASTA"
            texto_gale3 = "3º GALE TIEMPO HASTA"
        
        # Determinar a categoria de exibição (Binary, Digital)
        categoria_exibicao = "Binary"
        if isinstance(categoria, list) and len(categoria) > 0:
            # Escolher apenas um item da lista para exibir (o primeiro)
            categoria_exibicao = categoria[0]
        else:
            categoria_exibicao = categoria  # Usar o valor de categoria diretamente

        # Mensagem em PT
        mensagem_pt = (
            f"💰{tempo_expiracao_minutos} {texto_minutos_pt} de expiração\n"
            f"{nome_ativo_exibicao};{hora_entrada_formatada};{action_pt} {emoji} {categoria_exibicao}\n\n"
                f"🕐{texto_tempo} {hora_expiracao_formatada}\n\n"
                f"{texto_gale1} {hora_gale1_formatada}\n"
                f"{texto_gale2} {hora_gale2_formatada}\n"
                f"{texto_gale3} {hora_gale3_formatada}\n\n"
            f'📲 <a href="{link_corretora}" title="">Clique para abrir a corretora</a>\n'
            f'🙋‍♂️ Não sabe operar ainda? <a href="{link_video}" title="">Clique aqui</a>'
        )
                
        # Mensagem em EN
        mensagem_en = (
            f"💰{tempo_expiracao_minutos} {texto_minutos_en} expiration\n"
            f"{nome_ativo_exibicao};{hora_entrada_formatada};{action_en} {emoji} {categoria_exibicao}\n\n"
                f"🕐{texto_tempo} {hora_expiracao_formatada}\n\n"
                f"{texto_gale1} {hora_gale1_formatada}\n"
                f"{texto_gale2} {hora_gale2_formatada}\n"
                f"{texto_gale3} {hora_gale3_formatada}\n\n"
            f'📲 <a href="{link_corretora}" title="">Click to open broker</a>\n'
            f'🙋‍♂️ Don\'t know how to trade yet? <a href="{link_video}" title="">Click here</a>'
        )
                
        # Mensagem em ES
        mensagem_es = (
            f"💰{tempo_expiracao_minutos} {texto_minutos_es} de expiración\n"
            f"{nome_ativo_exibicao};{hora_entrada_formatada};{action_es} {emoji} {categoria_exibicao}\n\n"
                f"🕐{texto_tempo} {hora_expiracao_formatada}\n\n"
                f"{texto_gale1} {hora_gale1_formatada}\n"
                f"{texto_gale2} {hora_gale2_formatada}\n"
                f"{texto_gale3} {hora_gale3_formatada}\n\n"
            f'📲 <a href="{link_corretora}" title="">Haga clic para abrir el corredor</a>\n'
            f'🙋‍♂️ ¿No sabe operar todavía? <a href="{link_video}" title="">Haga clic aquí</a>'
        )
                
        # Verificar se há algum texto não esperado antes de retornar a mensagem
        if idioma == "pt":
            mensagem_final = mensagem_pt
        elif idioma == "en":
            mensagem_final = mensagem_en
        elif idioma == "es":
            mensagem_final = mensagem_es
        else:  # Padrão para qualquer outro idioma (português)
            mensagem_final = mensagem_pt
            
        BOT2_LOGGER.info(
            f"Mensagem formatada final para idioma {idioma}: {mensagem_final}")
        return mensagem_final

    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao formatar mensagem: {str(e)}")
        traceback.print_exc()
        return None


def bot2_registrar_envio(ativo, direcao, categoria):
    """
    Registra o envio de um sinal no banco de dados.
    Implementao futura: Aqui voc adicionaria o cdigo para registrar o envio no banco de dados.
    """
    pass


# Inicializao do Bot 2 quando este arquivo for executado
bot2_sinais_agendados = False
bot2_contador_sinais = 0  # Contador para rastrear quantos sinais foram enviados
BOT2_ATIVOS_CATEGORIAS = {}  # Inicialização de categorias de ativos

# URLs promocionais
XXBROKER_URL = (
    "https://trade.xxbroker.com/register?aff=741613&aff_model=revenue&afftrack="
)
VIDEO_TELEGRAM_URL = "https://t.me/trendingbrazil/215"
VIDEO_TELEGRAM_ES_URL = "https://t.me/trendingespanish/212"
VIDEO_TELEGRAM_EN_URL = "https://t.me/trendingenglish/226"

# Base directory para os arquivos do projeto
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# Definindo diretrios para os vdeos
VIDEOS_DIR = os.path.join(BASE_DIR, "videos")
os.makedirs(VIDEOS_DIR, exist_ok=True)

# Subdiretrios para organizar os vdeos
VIDEOS_POS_SINAL_DIR = os.path.join(VIDEOS_DIR, "pos_sinal")
VIDEOS_PROMO_DIR = os.path.join(VIDEOS_DIR, "promo")
# Alterado de "especial" para "gif_especial"
VIDEOS_ESPECIAL_DIR = os.path.join(VIDEOS_DIR, "gif_especial")

# Criar os subdiretrios se no existirem
os.makedirs(VIDEOS_POS_SINAL_DIR, exist_ok=True)
os.makedirs(VIDEOS_PROMO_DIR, exist_ok=True)
os.makedirs(VIDEOS_ESPECIAL_DIR, exist_ok=True)

# Diretrios para vdeos ps-sinal em cada idioma
VIDEOS_POS_SINAL_PT_DIR = os.path.join(VIDEOS_POS_SINAL_DIR, "pt")
VIDEOS_POS_SINAL_EN_DIR = os.path.join(VIDEOS_POS_SINAL_DIR, "en")
VIDEOS_POS_SINAL_ES_DIR = os.path.join(VIDEOS_POS_SINAL_DIR, "es")

# Diretrios para vdeos especiais em cada idioma
VIDEOS_ESPECIAL_PT_DIR = os.path.join(VIDEOS_ESPECIAL_DIR, "pt")
VIDEOS_ESPECIAL_EN_DIR = os.path.join(VIDEOS_ESPECIAL_DIR, "en")
VIDEOS_ESPECIAL_ES_DIR = os.path.join(VIDEOS_ESPECIAL_DIR, "es")

# Criar os subdiretrios para cada idioma se no existirem
os.makedirs(VIDEOS_POS_SINAL_PT_DIR, exist_ok=True)
os.makedirs(VIDEOS_POS_SINAL_EN_DIR, exist_ok=True)
os.makedirs(VIDEOS_POS_SINAL_ES_DIR, exist_ok=True)
os.makedirs(VIDEOS_ESPECIAL_PT_DIR, exist_ok=True)
os.makedirs(VIDEOS_ESPECIAL_EN_DIR, exist_ok=True)
os.makedirs(VIDEOS_ESPECIAL_ES_DIR, exist_ok=True)

# URLs dos GIFs diretamente do GitHub (seguindo a estrutura de seu repositório)
VIDEOS_POS_SINAL_GITHUB = {
    "pt": [
        # Vdeo padro em portugus (9/10)
        f"{GITHUB_BASE_URL}videos/pos_sinal/pt/padrão.gif",
        # Vdeo especial em portugus (1/10)
        f"{GITHUB_BASE_URL}videos/pos_sinal/pt/especial.gif",
    ],
    "en": [
        # Vdeo padro em ingls (9/10)
        f"{GITHUB_BASE_URL}videos/pos_sinal/en/padrao.gif",
        # Vdeo especial em ingls (1/10)
        f"{GITHUB_BASE_URL}videos/pos_sinal/en/especial.gif",
    ],
    "es": [
        # Vdeo padro em espanhol (9/10)
        f"{GITHUB_BASE_URL}videos/pos_sinal/es/padrao.gif",
        # Vdeo especial em espanhol (1/10)
        f"{GITHUB_BASE_URL}videos/pos_sinal/es/especial.gif",
    ],
}

# Configurar vdeos ps-sinal especficos para cada idioma (local paths)
VIDEOS_POS_SINAL = {
    "pt": [
        os.path.join(VIDEOS_POS_SINAL_PT_DIR, "padrão.gif"),
        # Vdeo padro em portugus (9/10)
        # Vdeo especial em portugus (1/10)
        os.path.join(VIDEOS_POS_SINAL_PT_DIR, "especial.gif"),
    ],
    "en": [
        os.path.join(VIDEOS_POS_SINAL_EN_DIR, "padrao.gif"),
        # Vdeo padro em ingls (9/10)
        # Vdeo especial em ingls (1/10)
        os.path.join(VIDEOS_POS_SINAL_EN_DIR, "especial.gif"),
    ],
    "es": [
        os.path.join(VIDEOS_POS_SINAL_ES_DIR, "padrao.gif"),
        # Vdeo padro em espanhol (9/10)
        # Vdeo especial em espanhol (1/10)
        os.path.join(VIDEOS_POS_SINAL_ES_DIR, "especial.gif"),
    ],
}

# Vdeo especial a cada 3 sinais (por idioma) - URLs do GitHub
VIDEOS_ESPECIAIS_GITHUB = {
    "pt": f"{GITHUB_BASE_URL}videos/gif_especial/pt/especial.gif",
    "en": f"{GITHUB_BASE_URL}videos/gif_especial/en/especial.gif",
    "es": f"{GITHUB_BASE_URL}videos/gif_especial/es/especial.gif",
}

# Vdeo especial a cada 3 sinais (por idioma) - local paths
VIDEOS_ESPECIAIS = {
    "pt": os.path.join(VIDEOS_ESPECIAL_PT_DIR, "especial.gif"),
    "en": os.path.join(VIDEOS_ESPECIAL_EN_DIR, "especial.gif"),
    "es": os.path.join(VIDEOS_ESPECIAL_ES_DIR, "especial.gif"),
}

# Vdeos promocionais por idioma - URLs do GitHub
VIDEOS_PROMO_GITHUB = {
    "pt": f"{GITHUB_BASE_URL}videos/promo/pt/promo.gif",
    "en": f"{GITHUB_BASE_URL}videos/promo/en/promo.gif",
    "es": f"{GITHUB_BASE_URL}videos/promo/es/promo.gif",
}

# Vdeos promocionais por idioma - local paths
VIDEOS_PROMO = {
    "pt": os.path.join(VIDEOS_PROMO_DIR, "pt", "promo.gif"),
    "en": os.path.join(VIDEOS_PROMO_DIR, "en", "promo.gif"),
    "es": os.path.join(VIDEOS_PROMO_DIR, "es", "promo.gif"),
}

# Logs para diagnstico
print(f"VIDEOS_DIR: {VIDEOS_DIR}")
print(f"VIDEOS_ESPECIAL_DIR: {VIDEOS_ESPECIAL_DIR}")
print(f"VIDEOS_ESPECIAL_PT_DIR: {VIDEOS_ESPECIAL_PT_DIR}")

# Caminho para o vdeo do GIF especial PT
VIDEO_GIF_ESPECIAL_PT = os.path.join(VIDEOS_ESPECIAL_PT_DIR, "especial.gif")
print(f"VIDEO_GIF_ESPECIAL_PT: {VIDEO_GIF_ESPECIAL_PT}")

# Contador para controle dos GIFs ps-sinal
contador_pos_sinal = 0
contador_desde_ultimo_especial = 0

# Adicionar variveis para controle da imagem especial diria
horario_especial_diario = None
imagem_especial_ja_enviada_hoje = False

# Funo para definir o horrio especial dirio


def definir_horario_especial_diario():
    global horario_especial_diario, imagem_especial_ja_enviada_hoje, mensagem_perda_enviada_hoje
    
    # Reseta o status de envio da imagem especial e mensagem de perda
    imagem_especial_ja_enviada_hoje = False
    mensagem_perda_enviada_hoje = False
    
    # Define um horrio aleatrio entre 0 e 23 horas
    horas_disponiveis = list(range(0, 24))
    hora_aleatoria = random.choice(horas_disponiveis)
    
    # Definir o mesmo minuto usado para o envio de sinais
    minuto_envio = 13
    
    # Define o horrio especial para hoje
    horario_atual = bot2_obter_hora_brasilia()
    horario_especial_diario = horario_atual.replace(
        hour=hora_aleatoria, 
        minute=minuto_envio,  # Mesmo minuto usado para envio de sinais
        second=0, 
        microsecond=0,
    )
    
    BOT2_LOGGER.info(
        f"Horário especial diário definido para: {horario_especial_diario.strftime('%H:%M')}"
    )
    
    # Se o horrio j passou hoje, reagenda para amanh
    if horario_especial_diario < horario_atual:
        horario_especial_diario = horario_especial_diario + timedelta(days=1)
        BOT2_LOGGER.info(
            f"Horário já passou hoje, reagendado para amanhã: {horario_especial_diario.strftime('%H:%M')}"
        )


# Agendar a redefinio do horrio especial dirio  meia-noite


def agendar_redefinicao_horario_especial():
    schedule.every().day.at("00:01").do(definir_horario_especial_diario)
    BOT2_LOGGER.info(
        "Agendada redefinição do horário especial diário para meia-noite e um minuto"
    )


# Chamar a funo no incio para definir o horrio especial para hoje
definir_horario_especial_diario()
agendar_redefinicao_horario_especial()


def verificar_url_gif(url):
    """
    Verifica se a URL do GIF está acessível.
    
    Args:
        url (str): A URL do GIF a ser verificada
        
    Returns:
        tuple: (url_a_usar, is_valid) onde url_a_usar é a URL verificada ou alternativa,
               e is_valid é um booleano indicando se a URL está acessível
    """
    try:
        BOT2_LOGGER.info(f"Verificando URL de GIF: {url}")
        response = requests.head(url, timeout=5)
        
        if response.status_code == 200:
            BOT2_LOGGER.info(f"URL de GIF válida: {url}")
            return url, True
        else:
            BOT2_LOGGER.warning(f"URL de GIF inválida (código {response.status_code}): {url}")
            return url, False
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao verificar URL {url}: {str(e)}")
        return url, False


def bot2_enviar_gif_pos_sinal(signal=None):
    """Envia um GIF após o resultado do sinal."""
    global BOT2_LOGGER, BOT2_CANAIS_CONFIG, BOT2_TOKEN, CONFIGS_IDIOMA, ultimo_sinal_enviado, bot2, URLS_GIFS_DIRETAS
    
    try:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        
        BOT2_LOGGER.info(f"[GIF-POS-SINAL][{horario_atual}] 🔄 Iniciando envio do GIF pós-sinal")
        
        # Verificar se o sinal existe
        if not signal:
            signal = ultimo_sinal_enviado
        
        if not signal:
            BOT2_LOGGER.error(f"[GIF-POS-SINAL][{horario_atual}] ❌ Não foi possível encontrar o sinal para enviar o GIF")
            return False
        
        # Verifica se o ativo está dentro do horário de operação
        ativo = signal.get('ativo', None)
        categoria = signal.get('categoria', 'Digital')

        BOT2_LOGGER.info(f"[GIF-POS-SINAL][{horario_atual}] 🔍 Verificando disponibilidade do ativo {ativo} (categoria: {categoria})")
        if ativo and not bot2_verificar_horario_ativo(ativo, categoria):
            BOT2_LOGGER.warning(
                f"[GIF-POS-SINAL][{horario_atual}] ⚠️ Ativo {ativo} não está dentro do horário de operação. Não enviando GIF pós-sinal")
            return False
        
        # Contar quantas mensagens/GIFs foram enviados
        envios_com_sucesso = 0
        
        # URL base do GIF pós-sinal (usada como fallback)
        url_base_gif = "https://raw.githubusercontent.com/IgorElion/-TelegramBot/main/videos/pos_sinal"
        
        # Para cada idioma configurado, envia o GIF
        for idioma, chats in BOT2_CANAIS_CONFIG.items():
            if not chats:  # Se não houver chats configurados para este idioma, pula
                BOT2_LOGGER.info(f"[GIF-POS-SINAL][{horario_atual}] ℹ️ Nenhum chat configurado para o idioma {idioma}, pulando")
                continue
            
            BOT2_LOGGER.info(f"[GIF-POS-SINAL][{horario_atual}] 📤 Preparando envio para {len(chats)} chat(s) no idioma {idioma}")
            
            # Definir a URL do GIF com base no idioma
            gif_url = ""
            if idioma == "pt":
                gif_url = f"{url_base_gif}/pt/180398513446716419%20(7).webp"
            elif idioma == "en":
                gif_url = f"{url_base_gif}/en/180398513446716419%20(7).webp"
            elif idioma == "es":
                gif_url = f"{url_base_gif}/es/180398513446716419%20(7).webp"
            else:
                # Caso não encontre o idioma, usa o PT como padrão
                gif_url = f"{url_base_gif}/pt/180398513446716419%20(7).webp"
                BOT2_LOGGER.warning(f"[GIF-POS-SINAL][{horario_atual}] ⚠️ Idioma {idioma} não reconhecido, usando PT como padrão")
            
            for chat_id in chats:
                try:
                    BOT2_LOGGER.info(f"[GIF-POS-SINAL][{horario_atual}] 🔗 Usando GIF: {gif_url} para idioma {idioma}")
                    BOT2_LOGGER.info(f"[GIF-POS-SINAL][{horario_atual}] 📦 Preparando envio para chat_id: {chat_id}")
                    
                    try:
                        # Baixar o arquivo para enviar como arquivo em vez de URL
                        BOT2_LOGGER.info(f"[GIF-POS-SINAL][{horario_atual}] ⬇️ Baixando arquivo")
                        arquivo_resposta = requests.get(gif_url, stream=True, timeout=15)
                        
                        if arquivo_resposta.status_code == 200:
                            # Criar um arquivo temporário no formato correto
                            extensao = ".webp"  # Sempre usar .webp para o arquivo do GitHub
                            
                            nome_arquivo_temp = f"temp_gif_{idioma}_{random.randint(1000, 9999)}{extensao}"
                            
                            # Salvar o arquivo temporariamente
                            with open(nome_arquivo_temp, 'wb') as f:
                                f.write(arquivo_resposta.content)
                            
                            BOT2_LOGGER.info(f"[GIF-POS-SINAL][{horario_atual}] 💾 Arquivo baixado como {nome_arquivo_temp}")
                            
                            # Abrir o arquivo e enviar como animação
                            with open(nome_arquivo_temp, 'rb') as f_gif:
                                # Enviar o GIF como animação diretamente do arquivo nas dimensões especificadas
                                BOT2_LOGGER.info(f"[GIF-POS-SINAL][{horario_atual}] 🚀 Enviando arquivo como animação")
                                bot2.send_animation(
                                    chat_id=chat_id,
                                    animation=f_gif,
                                    caption="",
                                    parse_mode="HTML",
                                    width=208,
                                    height=84
                                )
                            
                            # Remover o arquivo temporário
                            try:
                                os.remove(nome_arquivo_temp)
                                BOT2_LOGGER.info(f"[GIF-POS-SINAL][{horario_atual}] 🗑️ Arquivo temporário removido")
                            except:
                                BOT2_LOGGER.warning(f"[GIF-POS-SINAL][{horario_atual}] ⚠️ Não foi possível remover o arquivo temporário")
                            
                            BOT2_LOGGER.info(f"[GIF-POS-SINAL][{horario_atual}] ✅ GIF enviado com sucesso para {chat_id}")
                            envios_com_sucesso += 1
                        else:
                            BOT2_LOGGER.error(f"[GIF-POS-SINAL][{horario_atual}] ❌ Erro ao baixar o arquivo. Status: {arquivo_resposta.status_code}")
                            # Se falhar com o idioma específico, tenta com o PT como fallback
                            fallback_url = f"{url_base_gif}/pt/180398513446716419%20(7).webp"
                            BOT2_LOGGER.info(f"[GIF-POS-SINAL][{horario_atual}] 🔄 Tentando fallback com URL direta: {fallback_url}")
                            bot2.send_animation(
                                chat_id=chat_id,
                                animation=fallback_url,
                                caption="",
                                parse_mode="HTML",
                                width=208,
                                height=84
                            )
                            BOT2_LOGGER.info(f"[GIF-POS-SINAL][{horario_atual}] ✅ GIF enviado com sucesso (fallback)")
                            envios_com_sucesso += 1
                    except Exception as download_error:
                        BOT2_LOGGER.error(f"[GIF-POS-SINAL][{horario_atual}] ❌ Erro ao baixar/enviar: {str(download_error)}")
                        # Tentar enviar diretamente com a URL como fallback
                        fallback_url = f"{url_base_gif}/pt/180398513446716419%20(7).webp"
                        BOT2_LOGGER.info(f"[GIF-POS-SINAL][{horario_atual}] 🔄 Tentando segundo fallback com URL direta: {fallback_url}")
                        try:
                            bot2.send_animation(
                                chat_id=chat_id,
                                animation=fallback_url,
                                caption="",
                                parse_mode="HTML",
                                width=208,
                                height=84
                            )
                            BOT2_LOGGER.info(f"[GIF-POS-SINAL][{horario_atual}] ✅ GIF enviado com sucesso (segundo fallback)")
                            envios_com_sucesso += 1
                        except Exception as final_error:
                            BOT2_LOGGER.error(f"[GIF-POS-SINAL][{horario_atual}] ❌ Falha total no envio: {str(final_error)}")
                            BOT2_LOGGER.error(f"[GIF-POS-SINAL][{horario_atual}] 🔍 Detalhes do erro: {traceback.format_exc()}")
                    
                except Exception as e:
                    BOT2_LOGGER.error(f"[GIF-POS-SINAL][{horario_atual}] ❌ Erro no chat {chat_id}: {str(e)}")
                    BOT2_LOGGER.error(f"[GIF-POS-SINAL][{horario_atual}] 🔍 Detalhes do erro: {traceback.format_exc()}")

                    if "rights to send" in str(e).lower():
                        BOT2_LOGGER.error(f"[GIF-POS-SINAL][{horario_atual}] 🚫 Bot sem permissões no canal {chat_id}")

        if envios_com_sucesso > 0:
            BOT2_LOGGER.info(f"[GIF-POS-SINAL][{horario_atual}] ✅ Total de {envios_com_sucesso} GIFs enviados com sucesso")
            return True
        else:
            BOT2_LOGGER.warning(f"[GIF-POS-SINAL][{horario_atual}] ⚠️ Nenhum GIF foi enviado")
            return False
    
    except Exception as e:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.error(f"[GIF-POS-SINAL][{horario_atual}] ❌ Erro geral: {str(e)}")
        BOT2_LOGGER.error(f"[GIF-POS-SINAL][{horario_atual}] 🔍 Detalhes do erro: {traceback.format_exc()}")
        traceback.print_exc()
        return False


def bot2_send_message(ignorar_anti_duplicacao=False, enviar_gif_imediatamente=False):
    """Gera e envia um sinal de trading para os canais configurados."""
    global BOT2_LOGGER, BOT2_CANAIS_CONFIG, BOT2_TOKEN, CONFIGS_IDIOMA, ultimo_sinal_enviado, bot2_contador_sinais

    try:
        # Obtendo a hora atual de Brasília para logs
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        data_atual = agora.strftime("%Y-%m-%d")
        
        BOT2_LOGGER.info(f"[SINAL][{horario_atual}] 🔄 Iniciando geração e envio de sinal (data: {data_atual})")
        
        # Gerar um sinal aleatório
        sinal = bot2_gerar_sinal_aleatorio()
        if not sinal:
            BOT2_LOGGER.error(f"[SINAL][{horario_atual}] ❌ Falha ao gerar sinal aleatório")
            return False

        # Log do sinal gerado
        BOT2_LOGGER.info(f"[SINAL][{horario_atual}] 📊 Sinal gerado: Ativo={sinal['ativo']}, Direção={sinal['direcao']}, Categoria={sinal['categoria']}, Tempo={sinal['tempo_expiracao_minutos']}min")

        # Incrementar o contador de sinais (apenas se não estiver ignorando a anti-duplicação)
        if not ignorar_anti_duplicacao:
            bot2_contador_sinais += 1
            BOT2_LOGGER.info(f"[SINAL][{horario_atual}] 🔢 Contador incrementado: {bot2_contador_sinais}")
        else:
            BOT2_LOGGER.info(f"[SINAL][{horario_atual}] ℹ️ Ignorando anti-duplicação, contador mantido: {bot2_contador_sinais}")

        ultimo_sinal_enviado = sinal

        # Para cada idioma configurado, envia a mensagem formatada
        for idioma, chats in BOT2_CANAIS_CONFIG.items():
            if not chats:  # Se não houver chats configurados para este idioma, pula
                BOT2_LOGGER.info(f"[SINAL][{horario_atual}] ℹ️ Nenhum chat configurado para o idioma {idioma}, pulando")
                continue

            # Obter a configuração para o idioma
            config_idioma = CONFIGS_IDIOMA.get(idioma, CONFIGS_IDIOMA["pt"])
            fuso_horario = config_idioma.get("fuso_horario")

            # Formatar a mensagem conforme o idioma
            BOT2_LOGGER.info(f"[SINAL][{horario_atual}] 📝 Formatando mensagem para idioma {idioma}")

            # Usar apenas hora e minuto para evitar problemas de formato
            mensagem = bot2_formatar_mensagem(sinal, agora.strftime("%H:%M"), idioma)
            if not mensagem:
                BOT2_LOGGER.error(f"[SINAL][{horario_atual}] ❌ Erro ao formatar mensagem para idioma {idioma}")
                continue

            BOT2_LOGGER.info(f"[SINAL][{horario_atual}] 📤 Enviando para {len(chats)} chat(s) no idioma {idioma}")
            
            for chat_id in chats:
                try:
                    # URL base para a API do Telegram
                    url_base = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendMessage"
                    
                    BOT2_LOGGER.info(f"[SINAL][{horario_atual}] 🚀 Enviando para chat_id: {chat_id}")
                    
                    resposta = requests.post(
                        url_base,
                        json={
                            "chat_id": chat_id,
                            "text": mensagem,
                            "parse_mode": "HTML",
                            "disable_web_page_preview": True,
                        },
                        timeout=10,
                    )

                    if resposta.status_code == 200:
                        BOT2_LOGGER.info(f"[SINAL][{horario_atual}] ✅ Sinal enviado com sucesso para {chat_id}")
                    else:
                        BOT2_LOGGER.error(f"[SINAL][{horario_atual}] ❌ Erro ao enviar para {chat_id}: {resposta.text}")

                except Exception as e:
                    BOT2_LOGGER.error(f"[SINAL][{horario_atual}] ❌ Erro ao enviar para {chat_id}: {str(e)}")

        # Agendar o envio do GIF pós-sinal 7 minutos após o sinal
        if enviar_gif_imediatamente:
            # Se solicitado, enviar o GIF imediatamente (para testes)
            BOT2_LOGGER.info(f"[SINAL][{horario_atual}] 🔄 Modo de teste: enviando GIF pós-sinal imediatamente")
            bot2_enviar_gif_pos_sinal(sinal)
        else:
            # Agendar o envio do GIF pós-sinal para 7 minutos após o envio do sinal
            BOT2_LOGGER.info(f"[SINAL][{horario_atual}] ⏱️ Agendando GIF pós-sinal para 7 minutos (T+7)")
            
            def enviar_gif_pos_sinal_apos_delay():
                try:
                    # Aguardar 7 minutos
                    inicio_espera = bot2_obter_hora_brasilia().strftime("%H:%M:%S")
                    BOT2_LOGGER.info(f"[GIF-DELAY][{inicio_espera}] ⏲️ Iniciando contagem de 7 minutos para o GIF pós-sinal")
                    time.sleep(420)  # 7 minutos = 420 segundos
                    
                    # Enviar o GIF pós-sinal
                    agora = bot2_obter_hora_brasilia()
                    horario_atual = agora.strftime("%H:%M:%S")
                    BOT2_LOGGER.info(f"[GIF-DELAY][{horario_atual}] ⏰ Tempo de espera concluído, enviando GIF pós-sinal (T+7)")
                    bot2_enviar_gif_pos_sinal(sinal)
                except Exception as e:
                    agora = bot2_obter_hora_brasilia()
                    horario_atual = agora.strftime("%H:%M:%S")
                    BOT2_LOGGER.error(f"[GIF-DELAY][{horario_atual}] ❌ Erro no agendamento do GIF pós-sinal: {str(e)}")
                    traceback.print_exc()
            
            # Iniciar thread para envio do GIF pós-sinal
            gif_pos_sinal_thread = threading.Thread(target=enviar_gif_pos_sinal_apos_delay)
            gif_pos_sinal_thread.daemon = True
            gif_pos_sinal_thread.start()
            BOT2_LOGGER.info(f"[SINAL][{horario_atual}] 🧵 Thread para GIF pós-sinal iniciada com sucesso")

        # Verificar se é múltiplo de 3 para enviar a sequência especial
        e_multiplo_3 = bot2_contador_sinais % 3 == 0
        BOT2_LOGGER.info(f"[SINAL][{horario_atual}] 🔢 Verificando se sinal #{bot2_contador_sinais} é múltiplo de 3: {e_multiplo_3}")
        
        if e_multiplo_3:
            BOT2_LOGGER.info(f"[SINAL][{horario_atual}] 🔄 Sinal múltiplo de 3 detectado (#{bot2_contador_sinais})")
            BOT2_LOGGER.info(f"[SINAL][{horario_atual}] 📋 Iniciando sequência especial para múltiplos de 3")

            def enviar_sequencia_multiplo_tres():
                try:
                    # Limpar quaisquer agendamentos pendentes (por segurança)
                    schedule.clear("abertura_corretora")
                    
                    # Identificador único para este sinal (baseado no timestamp)
                    sinal_id = f"sinal_{bot2_contador_sinais}_{int(time.time())}"
                    
                    # Controle para garantir que cada etapa seja executada apenas uma vez
                    etapas_concluidas = {
                        "gif_pos_sinal": False,  # Será marcado como True quando verificarmos que foi enviado
                        "mensagem_participacao": False,
                        "gif_promocional": False,
                        "mensagem_abertura": False
                    }
                    
                    # Registrar o tempo de início da sequência
                    inicio_sequencia = bot2_obter_hora_brasilia()
                    tempo_inicio = inicio_sequencia.strftime("%H:%M:%S")
                    BOT2_LOGGER.info(f"[SEQ-M3][{tempo_inicio}] 🚀 INICIANDO SEQUÊNCIA MÚLTIPLA DE 3 (ID: {sinal_id})")
                    BOT2_LOGGER.info(f"[SEQ-M3][{tempo_inicio}] 📋 Sequência programada: Sinal (T+0) → GIF pós-sinal (T+7) → Mensagem participação (T+32) → GIF promocional (T+41) → Mensagem abertura (T+42)")
                    
                    # Verificar se o GIF pós-sinal já foi enviado
                    BOT2_LOGGER.info(f"[SEQ-M3][{tempo_inicio}] ✓ GIF pós-sinal (T+7): Já enviado pelo fluxo normal")
                    etapas_concluidas["gif_pos_sinal"] = True
                    
                    # O GIF pós-sinal já foi enviado aos 7 minutos, como parte do fluxo normal
                    # Agora esperamos 25 minutos desde o GIF pós-sinal para enviar a mensagem de participação
                    BOT2_LOGGER.info(f"[SEQ-M3][{tempo_inicio}] ⏲️ Aguardando 25 minutos após o GIF pós-sinal")
                    BOT2_LOGGER.info(f"[SEQ-M3][{tempo_inicio}] ℹ️ Próximo passo: Mensagem participação em T+32min")
                    
                    # Calcular quanto tempo já passou desde o sinal original
                    agora = bot2_obter_hora_brasilia()
                    tempo_decorrido = (agora - inicio_sequencia).total_seconds()
                    
                    # Ajustar o tempo de espera se já tiver passado algum tempo
                    tempo_espera_participacao = max(0, (25 * 60) - tempo_decorrido)
                    BOT2_LOGGER.info(f"[SEQ-M3][{tempo_inicio}] ⏱️ Tempo de espera ajustado: {tempo_espera_participacao:.1f} segundos")
                    
                    if tempo_espera_participacao > 0:
                        time.sleep(tempo_espera_participacao)
                    
                    # Verificar novamente o tempo para garantir precisão
                    if not etapas_concluidas["mensagem_participacao"]:
                        # Enviar mensagem de participação em T+32
                        agora = bot2_obter_hora_brasilia()
                        tempo_atual = agora.strftime("%H:%M:%S")
                        BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] ⏰ Tempo de espera concluído (T+32)")
                        BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] 📝 Enviando mensagem de participação da sessão")
                        
                        try:
                            resultado = enviar_mensagem_participacao()
                            if resultado:
                                BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] ✅ Mensagem de participação enviada com sucesso")
                                etapas_concluidas["mensagem_participacao"] = True
                            else:
                                BOT2_LOGGER.error(f"[SEQ-M3][{tempo_atual}] ❌ Falha ao enviar mensagem de participação")
                        except Exception as e:
                            agora = bot2_obter_hora_brasilia()
                            tempo_atual = agora.strftime("%H:%M:%S")
                            BOT2_LOGGER.error(f"[SEQ-M3][{tempo_atual}] ❌ Erro ao enviar mensagem de participação: {str(e)}")
                            BOT2_LOGGER.error(f"[SEQ-M3][{tempo_atual}] 🔍 Detalhes do erro: {traceback.format_exc()}")
                    else:
                        BOT2_LOGGER.warning(f"[SEQ-M3][{tempo_atual}] ⚠️ Mensagem de participação já foi enviada, pulando esta etapa")
                    
                    # Aguardar 9 minutos após mensagem de participação
                    # Total: 41 minutos após o sinal original
                    agora = bot2_obter_hora_brasilia()
                    tempo_atual = agora.strftime("%H:%M:%S")
                    
                    # Calcular quanto tempo já passou desde o início da sequência
                    tempo_decorrido = (agora - inicio_sequencia).total_seconds()
                    tempo_espera_gif_promo = max(0, (34 * 60) - tempo_decorrido)  # T+41 - T+7 = 34 minutos
                    
                    BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] ⏲️ Aguardando até T+41 para enviar GIF promocional")
                    BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] ⏱️ Tempo de espera ajustado: {tempo_espera_gif_promo:.1f} segundos")
                    
                    if tempo_espera_gif_promo > 0:
                        time.sleep(tempo_espera_gif_promo)

                    if not etapas_concluidas["gif_promocional"]:
                        # Enviar GIF promo para cada idioma
                        # Total: 41 minutos após o sinal original
                        agora = bot2_obter_hora_brasilia()
                        tempo_atual = agora.strftime("%H:%M:%S")
                        BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] ⏰ Tempo de espera concluído (T+41)")
                        BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] 🎬 Enviando GIF promocional em todos os idiomas")
                        
                        try:
                            gifs_enviados = []
                            
                            BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] 🇧🇷 Enviando GIF promocional em Português")
                            promo_pt = bot2_enviar_gif_promo(idioma="pt")
                            gifs_enviados.append(promo_pt)
                            BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] ✅ GIF PT enviado: {promo_pt}")
                            
                            time.sleep(3)  # Pequeno delay entre mensagens para diferentes idiomas
                            
                            BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] 🇬🇧 Enviando GIF promocional em Inglês")
                            promo_en = bot2_enviar_gif_promo(idioma="en")
                            gifs_enviados.append(promo_en)
                            BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] ✅ GIF EN enviado: {promo_en}")
                            
                            time.sleep(3)
                            
                            BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] 🇪🇸 Enviando GIF promocional em Espanhol")
                            promo_es = bot2_enviar_gif_promo(idioma="es")
                            gifs_enviados.append(promo_es)
                            BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] ✅ GIF ES enviado: {promo_es}")
                            
                            if any(gifs_enviados):
                                BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] ✅ Pelo menos um GIF promocional foi enviado com sucesso")
                                etapas_concluidas["gif_promocional"] = True
                            else:
                                BOT2_LOGGER.error(f"[SEQ-M3][{tempo_atual}] ❌ Nenhum GIF promocional foi enviado com sucesso")
                        except Exception as e:
                            agora = bot2_obter_hora_brasilia()
                            tempo_atual = agora.strftime("%H:%M:%S")
                            BOT2_LOGGER.error(f"[SEQ-M3][{tempo_atual}] ❌ Erro ao enviar GIFs promocionais: {str(e)}")
                            BOT2_LOGGER.error(f"[SEQ-M3][{tempo_atual}] 🔍 Detalhes do erro: {traceback.format_exc()}")
                    else:
                        BOT2_LOGGER.warning(f"[SEQ-M3][{tempo_atual}] ⚠️ GIF promocional já foi enviado, pulando esta etapa")

                    # Aguardar 1 minuto após o GIF promo
                    # Total: 42 minutos após o sinal original
                    agora = bot2_obter_hora_brasilia()
                    tempo_atual = agora.strftime("%H:%M:%S")
                    
                    # Calcular quanto tempo já passou desde o início da sequência
                    tempo_decorrido = (agora - inicio_sequencia).total_seconds()
                    tempo_espera_mensagem_abertura = max(0, (35 * 60) - tempo_decorrido)  # T+42 - T+7 = 35 minutos
                    
                    BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] ⏲️ Aguardando até T+42 para enviar mensagem de abertura")
                    BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] ⏱️ Tempo de espera ajustado: {tempo_espera_mensagem_abertura:.1f} segundos")
                    
                    if tempo_espera_mensagem_abertura > 0:
                        time.sleep(tempo_espera_mensagem_abertura)

                    if not etapas_concluidas["mensagem_abertura"]:
                        # Enviar mensagem final de abertura da corretora
                        # Total: 42 minutos após o sinal original
                        agora = bot2_obter_hora_brasilia()
                        tempo_atual = agora.strftime("%H:%M:%S")
                        BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] ⏰ Tempo de espera concluído (T+42)")
                        BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] 📝 Enviando mensagem final de abertura da corretora")
                        
                        try:
                            resultado = bot2_enviar_mensagem_abertura_corretora()
                            if resultado:
                                BOT2_LOGGER.info(f"[SEQ-M3][{tempo_atual}] ✅ Mensagem de abertura enviada com sucesso")
                                etapas_concluidas["mensagem_abertura"] = True
                            else:
                                BOT2_LOGGER.error(f"[SEQ-M3][{tempo_atual}] ❌ Falha ao enviar mensagem de abertura")
                        except Exception as e:
                            agora = bot2_obter_hora_brasilia()
                            tempo_atual = agora.strftime("%H:%M:%S")
                            BOT2_LOGGER.error(f"[SEQ-M3][{tempo_atual}] ❌ Erro ao enviar mensagem de abertura: {str(e)}")
                            BOT2_LOGGER.error(f"[SEQ-M3][{tempo_atual}] 🔍 Detalhes do erro: {traceback.format_exc()}")
                    else:
                        BOT2_LOGGER.warning(f"[SEQ-M3][{tempo_atual}] ⚠️ Mensagem de abertura já foi enviada, pulando esta etapa")
                    
                    # Limpar novamente quaisquer agendamentos pendentes (por segurança)
                    schedule.clear("abertura_corretora")
                    
                    # Calcular o tempo total da sequência
                    fim_sequencia = bot2_obter_hora_brasilia()
                    tempo_fim = fim_sequencia.strftime("%H:%M:%S")
                    duracao_total = (fim_sequencia - inicio_sequencia).total_seconds() / 60.0
                    
                    # Verificar status de todas as etapas
                    etapas_status = []
                    for etapa, status in etapas_concluidas.items():
                        etapas_status.append(f"{etapa}: {'✅' if status else '❌'}")
                    
                    BOT2_LOGGER.info(f"[SEQ-M3][{tempo_fim}] ✅ Sequência completa para múltiplo de 3 concluída")
                    BOT2_LOGGER.info(f"[SEQ-M3][{tempo_fim}] ⏱️ Duração total da sequência: {duracao_total:.1f} minutos")
                    BOT2_LOGGER.info(f"[SEQ-M3][{tempo_fim}] 📊 Status final das etapas: {', '.join(etapas_status)}")
                    BOT2_LOGGER.info(f"[SEQ-M3][{tempo_fim}] 📊 Resumo: Sinal (T+0) → GIF pós-sinal (T+7) → Mensagem participação (T+32) → GIF promocional (T+41) → Mensagem abertura (T+42)")
                    
                    # Verificar se todas as etapas foram concluídas com sucesso
                    todas_etapas_concluidas = all(etapas_concluidas.values())
                    if todas_etapas_concluidas:
                        BOT2_LOGGER.info(f"[SEQ-M3][{tempo_fim}] 🏆 TODAS AS ETAPAS FORAM EXECUTADAS COM SUCESSO!")
                    else:
                        BOT2_LOGGER.warning(f"[SEQ-M3][{tempo_fim}] ⚠️ ALERTA: Nem todas as etapas foram concluídas com sucesso. Verifique os logs para detalhes.")
                    
                    return todas_etapas_concluidas
                    
                except Exception as e:
                    agora = bot2_obter_hora_brasilia()
                    tempo_atual = agora.strftime("%H:%M:%S")
                    BOT2_LOGGER.error(f"[SEQ-M3][{tempo_atual}] ❌ Erro durante sequência de múltiplo de 3: {str(e)}")
                    BOT2_LOGGER.error(f"[SEQ-M3][{tempo_atual}] 🔍 Detalhes do erro: {traceback.format_exc()}")
                    traceback.print_exc()
                    return False

            # Iniciar thread para sequência especial de múltiplo de 3
            sequencia_thread = threading.Thread(target=enviar_sequencia_multiplo_tres)
            sequencia_thread.daemon = True
            sequencia_thread.start()
            BOT2_LOGGER.info(f"[SINAL][{horario_atual}] 🧵 Thread para sequência de múltiplo de 3 iniciada com sucesso")

        BOT2_LOGGER.info(f"[SINAL][{horario_atual}] ✅ Processamento do sinal concluído com sucesso")
        return True

    except Exception as e:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.error(f"[SINAL][{horario_atual}] ❌ Erro geral ao enviar sinal: {str(e)}")
        traceback.print_exc()
        return False


def bot2_iniciar_ciclo_sinais():
    """
    Agenda o envio de sinais do Bot 2 a cada hora no minuto 13.
    """
    global bot2_sinais_agendados, BOT2_LOGGER
    
    try:
        # Limpar agendamentos anteriores de sinais
        schedule.clear("bot2_sinais")
        
        # Configurar para enviar sempre no minuto 13 de cada hora
        minuto_envio = 13
        
        # Agendar a cada hora no minuto 13
        schedule.every().hour.at(f":{minuto_envio:02d}").do(bot2_send_message).tag("bot2_sinais")
        
        BOT2_LOGGER.info(f"Sinal do Bot 2 agendado para o minuto {minuto_envio} de cada hora")
        BOT2_LOGGER.info("Configuração atual: 1 sinal por hora, apenas ativos Digital, expiração de 5 minutos")
        BOT2_LOGGER.info(f"Total de ativos da categoria Digital disponíveis: {len(ATIVOS_CATEGORIAS['Digital'])}")
        
        # Verificar próximo horário de envio
        agora = bot2_obter_hora_brasilia()
        hora_atual = agora.hour
        minuto_atual = agora.minute
        
        if minuto_atual >= minuto_envio:
            # Se já passou do minuto 13 dessa hora, o próximo será na próxima hora
            proximo_envio = f"{(hora_atual + 1) % 24:02d}:{minuto_envio:02d}"
        else:
            # Se ainda não chegou no minuto 13 dessa hora, será nessa hora mesmo
            proximo_envio = f"{hora_atual:02d}:{minuto_envio:02d}"
            
        BOT2_LOGGER.info(f"Próximo sinal agendado para: {proximo_envio}")
        
        # Verificar se estamos próximos do horário de envio (dentro de 1 minuto)
        if (minuto_atual == minuto_envio) or (minuto_atual == minuto_envio - 1):
            BOT2_LOGGER.info(f"Estamos próximos do horário de envio! Enviando sinal imediatamente...")
            bot2_send_message()
        
        bot2_sinais_agendados = True
        return True
        
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao iniciar ciclo de sinais do Bot 2: {str(e)}")
        traceback.print_exc()
        bot2_sinais_agendados = False
        return False


def iniciar_ambos_bots():
    """
    Inicializa o Bot 2 e mantém o programa em execução,
    tratando as tarefas agendadas periodicamente.
    """
    global bot2_sinais_agendados, BOT2_LOGGER
    
    try:
        # Verificar configurações antes de iniciar
        if not verificar_configuracoes_bot():
            BOT2_LOGGER.error("Falha na verificação de configurações. Corriga os erros antes de iniciar o bot.")
            return False
            
        # Iniciar o Bot 2
        if not bot2_sinais_agendados:
            bot2_iniciar_ciclo_sinais()  # Agendar sinais para o Bot 2
            
        BOT2_LOGGER.info("=== BOT 2 INICIADO COM SUCESSO! ===")
        BOT2_LOGGER.info("Aguardando envio de sinais nos horários programados...")
        
        # Teste inicial (descomentar para testes)
        # bot2_send_message(enviar_gif_imediatamente=True)
        
        # Loop principal para manter o programa em execução
        while True:
            try:
                # Executar tarefas agendadas
                schedule.run_pending()
                
                # Pausa para não sobrecarregar a CPU
                time.sleep(1)
            except KeyboardInterrupt:
                print("\nPrograma encerrado manualmente.")
                sys.exit(0)
            except Exception as e:
                BOT2_LOGGER.error(f"Erro no loop principal: {str(e)}")
                traceback.print_exc()
        
        return True
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao iniciar bots: {str(e)}")
        traceback.print_exc()
        return False

# Função para enviar sinal manualmente (para testes)
def enviar_sinal_manual():
    """Função para enviar um sinal manualmente para testes."""
    try:
        BOT2_LOGGER.info("Enviando sinal manualmente para teste...")
        resultado = bot2_send_message()
        
        if resultado:
            BOT2_LOGGER.info("Sinal manual enviado com sucesso!")
            return True
        else:
            BOT2_LOGGER.error("Falha ao enviar sinal manual.")
            return False
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao enviar sinal manual: {str(e)}")
        traceback.print_exc()
        return False


def bot2_enviar_gif_especial():
    """
    Envia um GIF especial para todos os canais após sinais múltiplos de 3.
    """
    global BOT2_LOGGER, BOT2_CANAIS_CONFIG, BOT2_TOKEN, URLS_GIFS_DIRETAS, bot2
    
    try:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.info(f"[{horario_atual}] Iniciando envio de GIF especial para múltiplos de 3")

        gif_enviado_com_sucesso = False
        
        # Limpar quaisquer agendamentos anteriores para envio de mensagem de cadastro
        schedule.clear("cadastro_especial")

        for idioma, chats in BOT2_CANAIS_CONFIG.items():
            if not chats:  # Se não houver chats configurados para este idioma, pula
                continue
            
            for chat_id in chats:
                try:
                    # Usar o GIF especial 
                    if idioma == "pt":
                        gif_url = URLS_GIFS_DIRETAS["gif_especial_pt"]
                    else:
                        # Para os outros idiomas usar o mesmo gif
                        gif_url = URLS_GIFS_DIRETAS["gif_especial_pt"]

                    BOT2_LOGGER.info(
                        f"[{horario_atual}] Tentando enviar GIF especial como animação do URL: {gif_url} para o canal {chat_id}"
                    )
                    
                    try:
                        # Baixar o arquivo para enviar como arquivo em vez de URL
                        BOT2_LOGGER.info(f"[{horario_atual}] Baixando arquivo de {gif_url}")
                        arquivo_resposta = requests.get(gif_url, stream=True, timeout=10)
                        
                        if arquivo_resposta.status_code == 200:
                            # Criar um arquivo temporário no formato correto
                            extensao = ".gif"
                            if ".webp" in gif_url.lower():
                                extensao = ".webp"
                            
                            nome_arquivo_temp = f"temp_gif_{random.randint(1000, 9999)}{extensao}"
                            
                            # Salvar o arquivo temporariamente
                            with open(nome_arquivo_temp, 'wb') as f:
                                f.write(arquivo_resposta.content)
                            
                            BOT2_LOGGER.info(f"[{horario_atual}] Arquivo baixado com sucesso como {nome_arquivo_temp}")
                            
                            # Abrir o arquivo e enviar como animação
                            with open(nome_arquivo_temp, 'rb') as f_gif:
                                # Enviar o GIF como animação diretamente do arquivo nas dimensões especificadas
                                BOT2_LOGGER.info(f"[{horario_atual}] Enviando arquivo como animação")
                                bot2.send_animation(
                                    chat_id=chat_id,
                                    animation=f_gif,
                                    caption="",
                                    parse_mode="HTML",
                                    width=208,
                                    height=84  # Arredondando para 84 pixels já que não é possível usar valores decimais
                                )
                            
                            # Remover o arquivo temporário
                            try:
                                os.remove(nome_arquivo_temp)
                                BOT2_LOGGER.info(f"[{horario_atual}] Arquivo temporário {nome_arquivo_temp} removido")
                            except:
                                BOT2_LOGGER.warning(f"[{horario_atual}] Não foi possível remover o arquivo temporário {nome_arquivo_temp}")
                            
                            BOT2_LOGGER.info(f"[{horario_atual}] GIF especial enviado com sucesso como animação para o canal {chat_id}")
                            gif_enviado_com_sucesso = True
                        else:
                            BOT2_LOGGER.error(f"[{horario_atual}] Erro ao baixar o arquivo. Status code: {arquivo_resposta.status_code}")
                            # Tentar enviar diretamente com a URL como fallback
                            bot2.send_animation(
                                chat_id=chat_id,
                                animation=gif_url,
                                caption="",
                                parse_mode="HTML",
                                width=208,
                                height=84
                            )
                            BOT2_LOGGER.info(f"[{horario_atual}] GIF enviado com sucesso como URL para o canal {chat_id} (fallback)")
                            gif_enviado_com_sucesso = True
                    except Exception as download_error:
                        BOT2_LOGGER.error(f"[{horario_atual}] Erro ao baixar/enviar o arquivo: {str(download_error)}")
                        # Tentar enviar diretamente com a URL como fallback
                        bot2.send_animation(
                            chat_id=chat_id,
                            animation=gif_url,
                            caption="",
                            parse_mode="HTML",
                            width=208,
                            height=84
                        )
                        BOT2_LOGGER.info(f"[{horario_atual}] GIF enviado com sucesso como URL para o canal {chat_id} (fallback após erro)")
                        gif_enviado_com_sucesso = True

                except Exception as e:
                    BOT2_LOGGER.error(
                        f"[{horario_atual}] Erro ao enviar GIF especial para o canal {chat_id}: {str(e)}"
                    )

                    if "rights to send" in str(e).lower():
                        BOT2_LOGGER.error(
                            f"[{horario_atual}] Bot não tem permissões de administrador no canal {chat_id}"
                        )

        if gif_enviado_com_sucesso:
            BOT2_LOGGER.info(f"[{horario_atual}] GIF especial enviado com sucesso para sinais múltiplos de 3")
            
            # Remover o agendamento da mensagem de cadastro para evitar spam
            # schedule.every(1).minutes.do(bot2_enviar_mensagem_cadastro).tag("cadastro_especial")
            # BOT2_LOGGER.info(f"[{horario_atual}] Agendado envio da mensagem de cadastro em 1 minuto")
            
            return True
        else:
            BOT2_LOGGER.warning(
                f"[{horario_atual}] Não foi possível enviar o GIF especial para sinais múltiplos de 3"
            )
            return False
    
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao enviar GIF especial: {str(e)}")
        traceback.print_exc()
        return False


def bot2_enviar_gif_promo(idioma="pt"):
    """
    Envia um GIF promocional antes do sinal.

    Args:
        idioma (str): O idioma do GIF a ser enviado (pt, en, es)
    """
    global BOT2_LOGGER, BOT2_CANAIS_CONFIG, BOT2_TOKEN, URLS_GIFS_DIRETAS, bot2
    
    try:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.info(f"[{horario_atual}] Iniciando função bot2_enviar_gif_promo para idioma {idioma}")

        gif_enviado_com_sucesso = False
        
        # Limpar quaisquer agendamentos anteriores para envio de mensagem de abertura
        schedule.clear("abertura_corretora")

        # Verificar se o idioma existe em BOT2_CANAIS_CONFIG
        chats = BOT2_CANAIS_CONFIG.get(idioma, [])
        
        if not chats:
            BOT2_LOGGER.warning(f"[{horario_atual}] Não há canais configurados para o idioma {idioma}")
            return False

        # Definir a URL do GIF do Giphy com base no idioma
        gif_key = f"promo_{idioma}"
        if gif_key in URLS_GIFS_DIRETAS:
            gif_url = URLS_GIFS_DIRETAS[gif_key]
        else:
            # Usar o gif promocional em inglês como padrão
            gif_url = URLS_GIFS_DIRETAS["promo_en"]

        for chat_id in chats:
            try:
                BOT2_LOGGER.info(
                    f"[{horario_atual}] Tentando enviar GIF promo como animação do URL: {gif_url} para o canal {chat_id}"
                )
                
                try:
                    # Baixar o arquivo para enviar como arquivo em vez de URL
                    BOT2_LOGGER.info(f"[{horario_atual}] Baixando arquivo de {gif_url}")
                    arquivo_resposta = requests.get(gif_url, stream=True, timeout=10)
                    
                    if arquivo_resposta.status_code == 200:
                        # Criar um arquivo temporário no formato correto
                        extensao = ".gif"
                        if ".webp" in gif_url.lower():
                            extensao = ".webp"
                        
                        nome_arquivo_temp = f"temp_gif_{random.randint(1000, 9999)}{extensao}"
                        
                        # Salvar o arquivo temporariamente
                        with open(nome_arquivo_temp, 'wb') as f:
                            f.write(arquivo_resposta.content)
                        
                        BOT2_LOGGER.info(f"[{horario_atual}] Arquivo baixado com sucesso como {nome_arquivo_temp}")
                        
                        # Abrir o arquivo e enviar como animação
                        with open(nome_arquivo_temp, 'rb') as f_gif:
                            # Enviar o GIF como animação diretamente do arquivo nas dimensões especificadas
                            BOT2_LOGGER.info(f"[{horario_atual}] Enviando arquivo como animação")
                            bot2.send_animation(
                                chat_id=chat_id,
                                animation=f_gif,
                                caption="",
                                parse_mode="HTML",
                                width=208,
                                height=84  # Arredondando para 84 pixels já que não é possível usar valores decimais
                            )
                        
                        # Remover o arquivo temporário
                        try:
                            os.remove(nome_arquivo_temp)
                            BOT2_LOGGER.info(f"[{horario_atual}] Arquivo temporário {nome_arquivo_temp} removido")
                        except:
                            BOT2_LOGGER.warning(f"[{horario_atual}] Não foi possível remover o arquivo temporário {nome_arquivo_temp}")
                        
                        BOT2_LOGGER.info(f"[{horario_atual}] GIF promocional enviado com sucesso como animação para o canal {chat_id}")
                        gif_enviado_com_sucesso = True
                    else:
                        BOT2_LOGGER.error(f"[{horario_atual}] Erro ao baixar o arquivo. Status code: {arquivo_resposta.status_code}")
                        # Tentar enviar diretamente com a URL como fallback
                        bot2.send_animation(
                            chat_id=chat_id,
                            animation=gif_url,
                            caption="",
                            parse_mode="HTML",
                            width=208,
                            height=84
                        )
                        BOT2_LOGGER.info(f"[{horario_atual}] GIF enviado com sucesso como URL para o canal {chat_id} (fallback)")
                        gif_enviado_com_sucesso = True
                except Exception as download_error:
                    BOT2_LOGGER.error(f"[{horario_atual}] Erro ao baixar/enviar o arquivo: {str(download_error)}")
                    # Tentar enviar diretamente com a URL como fallback
                    bot2.send_animation(
                        chat_id=chat_id,
                        animation=gif_url,
                        caption="",
                        parse_mode="HTML",
                        width=208,
                        height=84
                    )
                    BOT2_LOGGER.info(f"[{horario_atual}] GIF enviado com sucesso como URL para o canal {chat_id} (fallback após erro)")
                    gif_enviado_com_sucesso = True

            except Exception as e:
                BOT2_LOGGER.error(
                    f"[{horario_atual}] Erro ao enviar GIF promocional para o canal {chat_id}: {str(e)}"
                )

                if "rights to send" in str(e).lower():
                    BOT2_LOGGER.error(
                        f"[{horario_atual}] Bot não tem permissões de administrador no canal {chat_id}"
                    )

        if gif_enviado_com_sucesso:
            BOT2_LOGGER.info(f"[{horario_atual}] GIF promocional enviado com sucesso para idioma {idioma}")
            
            # Em vez de agendar, vamos criar uma thread que espera 1 minuto e envia a mensagem
            def enviar_mensagem_abertura_apos_delay():
                try:
                    BOT2_LOGGER.info(f"[{horario_atual}] Aguardando 1 minuto para enviar mensagem de abertura da corretora...")
                    time.sleep(60)  # Esperar 1 minuto
                    
                    BOT2_LOGGER.info(f"[{horario_atual}] Enviando mensagem de abertura da corretora após espera...")
                    bot2_enviar_mensagem_abertura_corretora()
                except Exception as e:
                    BOT2_LOGGER.error(f"[{horario_atual}] Erro ao enviar mensagem de abertura: {str(e)}")
                    traceback.print_exc()
            
            # Iniciar thread para envio da mensagem de abertura após 1 minuto
            abertura_thread = threading.Thread(target=enviar_mensagem_abertura_apos_delay)
            abertura_thread.daemon = True
            abertura_thread.start()
            BOT2_LOGGER.info(f"[{horario_atual}] Thread para envio da mensagem de abertura iniciada (1 minuto de espera)")
            
            return True
        else:
            BOT2_LOGGER.warning(
                f"[{horario_atual}] Não foi possível enviar o GIF promocional para idioma {idioma}"
            )
            return False
    
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao enviar GIF promocional: {str(e)}")
        traceback.print_exc()
        return False


def bot2_enviar_mensagem_cadastro():
    """Envia uma mensagem de cadastro para todos os canais configurados."""
    global BOT2_LOGGER, BOT2_CANAIS_CONFIG, BOT2_TOKEN, CONFIGS_IDIOMA
    
    try:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.info(f"[{horario_atual}] Iniciando envio de mensagem de cadastro")
        
        # Contar quantas mensagens foram enviadas com sucesso
        mensagens_enviadas = 0
        
        # Para cada idioma configurado, envia a mensagem formatada
        for idioma, chats in BOT2_CANAIS_CONFIG.items():
            if not chats:  # Se não houver chats configurados para este idioma, pula
                continue
            
            config_idioma = CONFIGS_IDIOMA.get(idioma, CONFIGS_IDIOMA["pt"])
            link_corretora = config_idioma.get("link_corretora", "")
            
            if idioma == "pt":
                texto_cadastro = f"🔴 ATENÇÃO 🔴\n\nATUALIZAÇÃO DE CADASTRO NECESSÁRIA!\n\nPara continuar recebendo os sinais, clique no link abaixo e atualize seus dados de cadastro.\n\n<a href=\"{link_corretora}\" title=\"\"><b>ATUALIZAR CADASTRO</b></a> 🔹"
            elif idioma == "en":
                texto_cadastro = f"🔴 ATTENTION 🔴\n\nREGISTRATION UPDATE REQUIRED!\n\nTo continue receiving signals, click the link below and update your registration data.\n\n<a href=\"{link_corretora}\" title=\"\"><b>UPDATE REGISTRATION</b></a> 🔹"
            else:  # es
                texto_cadastro = f"🔴 ATENCIÓN 🔴\n\n¡ACTUALIZACIÓN DE REGISTRO NECESARIA!\n\nPara seguir recibiendo las señales, haga clic en el enlace a continuación y actualice sus datos de registro.\n\n<a href=\"{link_corretora}\" title=\"\"><b>ACTUALIZAR REGISTRO</b></a> 🔹"
            
            for chat_id in chats:
                try:
                    # URL base para a API do Telegram
                    url_base = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendMessage"
                    
                    resposta = requests.post(
                        url_base,
                        json={
                            "chat_id": chat_id,
                            "text": texto_cadastro,
                            "parse_mode": "HTML",
                            "disable_web_page_preview": True,
                        },
                        timeout=10,
                    )
                    
                    if resposta.status_code == 200:
                        BOT2_LOGGER.info(
                            f"[{horario_atual}] Mensagem de cadastro enviada com sucesso para {chat_id} (idioma: {idioma})"
                        )
                        mensagens_enviadas += 1
                    else:
                        BOT2_LOGGER.error(
                            f"[{horario_atual}] Erro ao enviar mensagem de cadastro para {chat_id}: {resposta.text}"
                        )
                except Exception as e:
                    BOT2_LOGGER.error(
                        f"[{horario_atual}] Exceção ao enviar mensagem de cadastro para {chat_id}: {str(e)}"
                    )
        
        if mensagens_enviadas > 0:
            BOT2_LOGGER.info(f"[{horario_atual}] Total de {mensagens_enviadas} mensagens de cadastro enviadas com sucesso")
            
            # Agendar envio da mensagem de abertura da corretora em 9 minutos
            # Desativar o agendamento automático de GIFs promocionais para evitar conflitos
            # schedule.every(9).minutes.do(bot2_enviar_gif_promo, idioma="pt").tag("gif_promo")
            BOT2_LOGGER.info("Agendamento automático de GIFs promocionais desativado para evitar conflitos com GIFs pós-sinal")
            
            return True
        else:
            BOT2_LOGGER.warning(f"[{horario_atual}] Nenhuma mensagem de cadastro foi enviada")
            return False
    
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao enviar mensagem de cadastro: {str(e)}")
        traceback.print_exc()
        return False


def bot2_enviar_mensagem_abertura_corretora():
    """Envia uma mensagem informando sobre a abertura da corretora para todos os canais configurados."""

    global BOT2_LOGGER, BOT2_CANAIS_CONFIG, BOT2_TOKEN, CONFIGS_IDIOMA

    try:
        # Verificar se a mensagem já foi enviada recentemente (dentro de 10 minutos)
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        
        # Criar uma variável estática para controlar o último envio
        if not hasattr(bot2_enviar_mensagem_abertura_corretora, "ultimo_envio"):
            bot2_enviar_mensagem_abertura_corretora.ultimo_envio = datetime(2000, 1, 1, tzinfo=pytz.timezone("America/Sao_Paulo"))
            
        # Verificar se faz menos de 10 minutos desde o último envio
        intervalo_minimo = timedelta(minutes=10)
        tempo_decorrido = agora - bot2_enviar_mensagem_abertura_corretora.ultimo_envio
        
        if tempo_decorrido < intervalo_minimo:
            BOT2_LOGGER.warning(f"[{horario_atual}] Mensagem de abertura da corretora já foi enviada há {tempo_decorrido.total_seconds()/60:.1f} minutos. Ignorando novo envio.")
            return True  # Retorna True para não interromper a sequência
        
        # Limpar quaisquer agendamentos pendentes para evitar repetições
        schedule.clear("abertura_corretora")
        
        BOT2_LOGGER.info(f"[{horario_atual}] Iniciando envio da mensagem de abertura da corretora")

        # Contar quantas mensagens foram enviadas
        envios_com_sucesso = 0

        # Para cada idioma configurado, envia a mensagem formatada
        for idioma, chats in BOT2_CANAIS_CONFIG.items():
            if not chats:  # Se não houver chats configurados para este idioma, pula
                continue

            # Obter configuração para o idioma
            config_idioma = CONFIGS_IDIOMA.get(idioma, CONFIGS_IDIOMA["pt"])
            link_corretora = config_idioma.get("link_corretora", "")

            if idioma == "pt":
                texto_abertura = (
                    "👉🏼Abram a corretora Pessoal\n\n"
                    "⚠️FIQUEM ATENTOS⚠️\n\n"
                    "🔥Cadastre-se na XXBROKER agora mesmo🔥\n\n"
                    f"➡️ <a href=\"{link_corretora}\" title=\"\"><b>CLICANDO AQUI</b></a>"
                )
            elif idioma == "en":
                texto_abertura = (
                    "👉🏼Open the broker everyone\n\n"
                    "⚠️STAY ALERT⚠️\n\n"
                    "🔥Register on XXBROKER right now🔥\n\n"
                    f"➡️ <a href=\"{link_corretora}\" title=\"\"><b>CLICK HERE</b></a>"
                )
            else:  # es
                texto_abertura = (
                    "👉🏼Abran el corredor todos\n\n"
                    "⚠️ESTÉN ATENTOS⚠️\n\n"
                    "🔥Regístrese en XXBROKER ahora mismo🔥\n\n"
                    f"➡️ <a href=\"{link_corretora}\" title=\"\"><b>HAGA CLIC AQUÍ</b></a>"
                )

            for chat_id in chats:
                try:
                    # URL base para a API do Telegram
                    url_base = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendMessage"
                    
                    resposta = requests.post(
                        url_base,
                        json={
                            "chat_id": chat_id,
                            "text": texto_abertura,
                            "parse_mode": "HTML",
                            "disable_web_page_preview": True,
                        },
                        timeout=10,
                    )

                    if resposta.status_code == 200:
                        BOT2_LOGGER.info(
                            f"[{horario_atual}] Mensagem de abertura enviada com sucesso para {chat_id} (idioma: {idioma})"
                        )
                        envios_com_sucesso += 1
                    else:
                        BOT2_LOGGER.error(
                            f"[{horario_atual}] Erro ao enviar mensagem de abertura para {chat_id}: {resposta.text}"
                        )
                except Exception as e:
                    BOT2_LOGGER.error(f"[{horario_atual}] Erro ao enviar mensagem de abertura: {str(e)}")
                    traceback.print_exc()

        BOT2_LOGGER.info(
            f"[{horario_atual}] Total de mensagens de abertura enviadas com sucesso: {envios_com_sucesso}"
        )
        
        # Atualizar o timestamp do último envio
        bot2_enviar_mensagem_abertura_corretora.ultimo_envio = agora
        
        # Limpar novamente quaisquer agendamentos pendentes (por segurança)
        schedule.clear("abertura_corretora")
        
        return envios_com_sucesso > 0
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao enviar mensagem de abertura: {str(e)}")
        traceback.print_exc()
        return False

def verificar_configuracoes_bot():
    """
    Verifica se as configurações do bot estão corretas antes de iniciar.
    
    Returns:
        bool: True se as configurações estão corretas, False caso contrário
    """
    global BOT2_LOGGER, BOT2_CANAIS_CONFIG, BOT2_TOKEN, ATIVOS_CATEGORIAS
    
    try:
        BOT2_LOGGER.info("Verificando configurações do bot...")
        
        # Verificar se o token está configurado
        if not BOT2_TOKEN or len(BOT2_TOKEN) < 10:
            BOT2_LOGGER.error("Token do bot não configurado ou inválido")
            return False
        
        # Verificar canais configurados
        if not BOT2_CANAIS_CONFIG:
            BOT2_LOGGER.error("Nenhum canal configurado para envio de sinais")
            return False
        
        # Contar o número total de canais
        total_canais = sum(len(chats) for chats in BOT2_CANAIS_CONFIG.values())
        if total_canais == 0:
            BOT2_LOGGER.error("Nenhum canal configurado para envio de sinais")
            return False
        
        # Verificar se existem ativos configurados
        if not ATIVOS_CATEGORIAS or "Digital" not in ATIVOS_CATEGORIAS:
            BOT2_LOGGER.error("Categoria 'Digital' não configurada ou sem ativos")
            return False
        
        if not ATIVOS_CATEGORIAS["Digital"]:
            BOT2_LOGGER.error("Nenhum ativo configurado na categoria 'Digital'")
            return False
        
        # Exibir resumo das configurações
        BOT2_LOGGER.info(f"Token do bot configurado: {BOT2_TOKEN[:5]}...{BOT2_TOKEN[-5:]}")
        BOT2_LOGGER.info(f"Total de canais configurados: {total_canais}")
        
        for idioma, chats in BOT2_CANAIS_CONFIG.items():
            BOT2_LOGGER.info(f"Canais para idioma '{idioma}': {len(chats)}")
        
        BOT2_LOGGER.info(f"Total de ativos na categoria 'Digital': {len(ATIVOS_CATEGORIAS['Digital'])}")
        BOT2_LOGGER.info("Todas as configurações estão corretas!")
        
        return True
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao verificar configurações: {str(e)}")
        traceback.print_exc()
        return False

# Executar se este arquivo for o script principal
if __name__ == "__main__":
    if len(sys.argv) > 1:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        
        if sys.argv[1] == "testar_contador":
            BOT2_LOGGER.info(f"[MAIN][{horario_atual}] 🚀 Iniciando teste de contador de sinais")
            testar_contador_sinais()
        elif sys.argv[1] == "testar_multiplo":
            BOT2_LOGGER.info(f"[MAIN][{horario_atual}] 🚀 Iniciando teste de sequência múltiplo de três")
            testar_sequencia_multiplo_tres()
        elif sys.argv[1] == "testar_gif":
            BOT2_LOGGER.info(f"[MAIN][{horario_atual}] 🚀 Iniciando teste de GIF pós-sinal")
            testar_gif_pos_sinal()
        elif sys.argv[1] == "forcar_multiplo":
            BOT2_LOGGER.info(f"[MAIN][{horario_atual}] 🚀 Iniciando teste forçado de múltiplo de três")
            forcar_teste_multiplo_tres()
        else:
            BOT2_LOGGER.warning(f"[MAIN][{horario_atual}] ⚠️ Parâmetro desconhecido: {sys.argv[1]}")
    else:
        # Inicialização normal do bot
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        data_atual = agora.strftime("%Y-%m-%d")
        
        BOT2_LOGGER.info(f"[MAIN][{horario_atual}] 🚀 Iniciando ambos os bots em {data_atual}")
        BOT2_LOGGER.info(f"[MAIN][{horario_atual}] 📋 Configurações carregadas")
        BOT2_LOGGER.info(f"[MAIN][{horario_atual}] 🤖 Inicializando sistema de trading...")
        
        iniciar_ambos_bots()
        
        BOT2_LOGGER.info(f"[MAIN][{horario_atual}] ✅ Bots iniciados com sucesso")

def enviar_mensagem_participacao():
    """
    Envia a mensagem de participação da sessão para todos os canais configurados.
    Esta mensagem é enviada 27 minutos após o sinal original para sinais múltiplos de 3.
    """
    global BOT2_LOGGER, BOT2_CANAIS_CONFIG, BOT2_TOKEN, CONFIGS_IDIOMA, VIDEO_TELEGRAM_URL, VIDEO_TELEGRAM_EN_URL, VIDEO_TELEGRAM_ES_URL

    try:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.info(f"[PARTICIPACAO][{horario_atual}] 🔄 Iniciando envio da mensagem de participação da sessão")
        BOT2_LOGGER.info(f"[PARTICIPACAO][{horario_atual}] 🔍 Verificando canais configurados: {BOT2_CANAIS_CONFIG}")

        # Contar quantas mensagens foram enviadas
        envios_com_sucesso = 0

        # Verificar se as constantes de vídeo estão definidas
        if not VIDEO_TELEGRAM_URL:
            BOT2_LOGGER.error(f"[PARTICIPACAO][{horario_atual}] ❌ URL do vídeo em português não está definida!")
            VIDEO_TELEGRAM_URL = "https://telegra.ph/file/1c2b838e67f99f2abcc5d.mp4"
            BOT2_LOGGER.info(f"[PARTICIPACAO][{horario_atual}] ℹ️ Usando URL padrão para vídeo PT: {VIDEO_TELEGRAM_URL}")
        
        if not VIDEO_TELEGRAM_EN_URL:
            BOT2_LOGGER.error(f"[PARTICIPACAO][{horario_atual}] ❌ URL do vídeo em inglês não está definida!")
            VIDEO_TELEGRAM_EN_URL = "https://telegra.ph/file/1c2b838e67f99f2abcc5d.mp4"
            BOT2_LOGGER.info(f"[PARTICIPACAO][{horario_atual}] ℹ️ Usando URL padrão para vídeo EN: {VIDEO_TELEGRAM_EN_URL}")
            
        if not VIDEO_TELEGRAM_ES_URL:
            BOT2_LOGGER.error(f"[PARTICIPACAO][{horario_atual}] ❌ URL do vídeo em espanhol não está definida!")
            VIDEO_TELEGRAM_ES_URL = "https://telegra.ph/file/1c2b838e67f99f2abcc5d.mp4"
            BOT2_LOGGER.info(f"[PARTICIPACAO][{horario_atual}] ℹ️ Usando URL padrão para vídeo ES: {VIDEO_TELEGRAM_ES_URL}")

        # Para cada idioma configurado, envia a mensagem formatada
        for idioma, chats in BOT2_CANAIS_CONFIG.items():
            if not chats:  # Se não houver chats configurados para este idioma, pula
                BOT2_LOGGER.info(f"[PARTICIPACAO][{horario_atual}] ℹ️ Nenhum chat configurado para idioma {idioma}, pulando")
                continue

            # Obter configuração para o idioma
            config_idioma = CONFIGS_IDIOMA.get(idioma, CONFIGS_IDIOMA["pt"])
            BOT2_LOGGER.info(f"[PARTICIPACAO][{horario_atual}] 🔍 Configuração para idioma {idioma}: {config_idioma}")
            
            link_corretora = config_idioma.get("link_corretora", "")
            if not link_corretora:
                BOT2_LOGGER.warning(f"[PARTICIPACAO][{horario_atual}] ⚠️ Link da corretora não encontrado para idioma {idioma}, usando link padrão")
                link_corretora = "https://corretora.example.com"
            
            link_video = ""

            BOT2_LOGGER.info(f"[PARTICIPACAO][{horario_atual}] 📝 Preparando mensagem para idioma {idioma}")

            # Configurar links com base no idioma
            if idioma == "pt":
                link_video = VIDEO_TELEGRAM_URL
                texto_participacao = (
                    "⚠️⚠️PARA PARTICIPAR DESTA SESSÃO, SIGA O PASSO A PASSO ABAIXO⚠️⚠️\n\n"
                    "1º ✅ —>  Crie sua conta na corretora no link abaixo e GANHE $10.000 DE GRAÇA pra começar a operar com a gente sem ter que arriscar seu dinheiro.\n\n"
                    "Você vai poder testar todos nossas\n"
                    "operações com risco ZERO!\n\n"
                    "👇🏻👇🏻👇🏻👇🏻\n\n"
                    f"<a href=\"{link_corretora}\" title=\"\"><b>CRIE SUA CONTA AQUI E GANHE R$10.000</b></a>\n\n"
                    "—————————————————————\n\n"
                    "2º ✅ —>  Assista o vídeo abaixo e aprenda como depositar e como entrar com a gente nas nossas operações!\n\n"
                    "👇🏻👇🏻👇🏻👇🏻\n\n"
                    f"<a href=\"{link_video}\" title=\"\"><b>CLIQUE AQUI E ASSISTA O VÍDEO</b></a>"
                )
            elif idioma == "en":
                link_video = VIDEO_TELEGRAM_EN_URL
                texto_participacao = (
                    "⚠️⚠️TO PARTICIPATE IN THIS SESSION, FOLLOW THE STEPS BELOW⚠️⚠️\n\n"
                    "1st ✅ —> Create your broker account at the link below and GET $10,000 FOR FREE to start operating with us without having to risk your money.\n\n"
                    "You will be able to test all our\n"
                    "operations with ZERO risk!\n\n"
                    "👇🏻👇🏻👇🏻👇🏻\n\n"
                    f"<a href=\"{link_corretora}\" title=\"\"><b>CREATE YOUR ACCOUNT HERE AND GET $10,000</b></a>\n\n"
                    "—————————————————————\n\n"
                    "2nd ✅ —> Watch the video below and learn how to deposit and how to join us in our operations!\n\n"
                    "👇🏻👇🏻👇🏻👇🏻\n\n"
                    f"<a href=\"{link_video}\" title=\"\"><b>CLICK HERE AND WATCH THE VIDEO</b></a>"
                )
            else:  # es
                link_video = VIDEO_TELEGRAM_ES_URL
                texto_participacao = (
                    "⚠️⚠️PARA PARTICIPAR EN ESTA SESIÓN, SIGA LOS PASOS A CONTINUACIÓN⚠️⚠️\n\n"
                    "1º ✅ —> Cree su cuenta de corredor en el enlace a continuación y OBTENGA $10,000 GRATIS para comenzar a operar con nosotros sin tener que arriesgar su dinero.\n\n"
                    "Podrás probar todas nuestras\n"
                    "operaciones con riesgo CERO!\n\n"
                    "👇🏻👇🏻👇🏻👇🏻\n\n"
                    f"<a href=\"{link_corretora}\" title=\"\"><b>CREE SU CUENTA AQUÍ Y OBTENGA $10,000</b></a>\n\n"
                    "—————————————————————\n\n"
                    "2º ✅ —> ¡Mire el video a continuación y aprenda cómo depositar y cómo unirse a nosotros en nuestras operaciones!\n\n"
                    "👇🏻👇🏻👇🏻👇🏻\n\n"
                    f"<a href=\"{link_video}\" title=\"\"><b>HAGA CLIC AQUÍ Y VEA EL VIDEO</b></a>"
                )

            BOT2_LOGGER.info(f"[PARTICIPACAO][{horario_atual}] 🔗 Links configurados: Corretora={link_corretora}, Vídeo={link_video}")
            BOT2_LOGGER.info(f"[PARTICIPACAO][{horario_atual}] 📤 Enviando para {len(chats)} chat(s) no idioma {idioma}")

            for chat_id in chats:
                try:
                    # URL base para a API do Telegram
                    url_base = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendMessage"
                    
                    BOT2_LOGGER.info(f"[PARTICIPACAO][{horario_atual}] 🚀 Enviando para chat_id: {chat_id}")
                    BOT2_LOGGER.info(f"[PARTICIPACAO][{horario_atual}] 📋 Conteúdo da mensagem: {texto_participacao[:100]}...")
                    
                    # Aqui está o envio real
                    resposta = requests.post(
                        url_base,
                        json={
                            "chat_id": chat_id,
                            "text": texto_participacao,
                            "parse_mode": "HTML",
                            "disable_web_page_preview": True,
                        },
                        timeout=15,  # Aumentando o timeout para garantir que tenha tempo suficiente
                    )

                    BOT2_LOGGER.info(f"[PARTICIPACAO][{horario_atual}] 📡 Status da resposta: {resposta.status_code}")
                    
                    if resposta.status_code == 200:
                        BOT2_LOGGER.info(
                            f"[PARTICIPACAO][{horario_atual}] ✅ Mensagem enviada com sucesso para {chat_id} (idioma: {idioma})"
                        )
                        envios_com_sucesso += 1
                    else:
                        BOT2_LOGGER.error(
                            f"[PARTICIPACAO][{horario_atual}] ❌ Erro ao enviar: {resposta.status_code} - {resposta.text}"
                        )
                        BOT2_LOGGER.error(f"[PARTICIPACAO][{horario_atual}] 🔍 Resposta detalhada: {resposta.content}")
                except Exception as e:
                    BOT2_LOGGER.error(f"[PARTICIPACAO][{horario_atual}] ❌ Erro ao enviar para {chat_id}: {str(e)}")
                    BOT2_LOGGER.error(f"[PARTICIPACAO][{horario_atual}] 🔍 Detalhes do erro: {traceback.format_exc()}")
                    if "rights to send" in str(e).lower():
                        BOT2_LOGGER.error(f"[PARTICIPACAO][{horario_atual}] 🚫 Bot sem permissões no canal {chat_id}")
                    traceback.print_exc()

        # Resumo final
        total_chats = sum(len(chats) for chats in BOT2_CANAIS_CONFIG.values() if chats)
        BOT2_LOGGER.info(
            f"[PARTICIPACAO][{horario_atual}] 📊 Total de mensagens enviadas com sucesso: {envios_com_sucesso}/{total_chats}"
        )
        if envios_com_sucesso == 0 and total_chats > 0:
            BOT2_LOGGER.error(f"[PARTICIPACAO][{horario_atual}] ❌❌❌ ALERTA: Nenhuma mensagem de participação foi enviada com sucesso!")
        
        return envios_com_sucesso > 0
    except Exception as e:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.error(f"[PARTICIPACAO][{horario_atual}] ❌ Erro geral: {str(e)}")
        BOT2_LOGGER.error(f"[PARTICIPACAO][{horario_atual}] 🔍 Detalhes do erro: {traceback.format_exc()}")
        traceback.print_exc()
        return False


def bot2_enviar_gif_promo(idioma="pt"):
    """
    Envia o GIF promocional para todos os canais do idioma especificado.
    Esta mensagem é enviada 41 minutos após o sinal original para sinais múltiplos de 3.
    """
    global BOT2_LOGGER, BOT2_CANAIS_CONFIG, BOT2_TOKEN, CONFIGS_IDIOMA, bot2, URLS_GIFS_DIRETAS
    
    try:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        
        BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] 🔄 Iniciando envio do GIF promocional para idioma {idioma}")
        
        # Verificar se há canais configurados para este idioma
        chats = BOT2_CANAIS_CONFIG.get(idioma, [])
        if not chats:
            BOT2_LOGGER.warning(f"[GIF-PROMO][{horario_atual}] ⚠️ Nenhum chat configurado para idioma {idioma}")
            return False
        
        # Definir a URL do GIF promocional conforme o idioma
        if idioma == "pt":
            gif_key = "promo_pt"
        elif idioma == "en":
            gif_key = "promo_en"
        else:  # es
            gif_key = "promo_es"
        
        gif_url = URLS_GIFS_DIRETAS.get(gif_key, "")
        
        if not gif_url:
            BOT2_LOGGER.error(f"[GIF-PROMO][{horario_atual}] ❌ URL de GIF não configurada para {gif_key}")
            return False
        
        BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] 🔗 Usando URL: {gif_url}")
        BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] 📤 Enviando para {len(chats)} chat(s)")
        
        # Contar quantos GIFs foram enviados com sucesso
        envios_com_sucesso = 0
        
        for chat_id in chats:
            try:
                BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] 📦 Preparando envio para chat_id: {chat_id}")
                
                try:
                    # Baixar o arquivo para enviar como arquivo em vez de URL
                    BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] ⬇️ Baixando arquivo de {gif_url}")
                    arquivo_resposta = requests.get(gif_url, stream=True, timeout=10)
                    
                    if arquivo_resposta.status_code == 200:
                        # Determinar extensão baseada na URL
                        if gif_url.lower().endswith(('.mp4', '.mov')):
                            extensao = '.mp4'
                        elif gif_url.lower().endswith(('.gif')):
                            extensao = '.gif'
                        else:
                            extensao = '.webp'
                        
                        nome_arquivo_temp = f"temp_promo_{idioma}_{random.randint(1000, 9999)}{extensao}"
                        
                        # Salvar o arquivo temporariamente
                        with open(nome_arquivo_temp, 'wb') as f:
                            f.write(arquivo_resposta.content)
                        
                        BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] 💾 Arquivo baixado como {nome_arquivo_temp}")
                        
                        # Abrir o arquivo e enviar como animação
                        with open(nome_arquivo_temp, 'rb') as f_gif:
                            # Enviar o GIF como animação diretamente do arquivo
                            BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] 🚀 Enviando arquivo como animação")
                            bot2.send_animation(
                                chat_id=chat_id,
                                animation=f_gif,
                                caption="",
                                parse_mode="HTML"
                            )
                        
                        # Remover o arquivo temporário
                        try:
                            os.remove(nome_arquivo_temp)
                            BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] 🗑️ Arquivo temporário removido")
                        except:
                            BOT2_LOGGER.warning(f"[GIF-PROMO][{horario_atual}] ⚠️ Não foi possível remover o arquivo temporário")
                        
                        BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] ✅ GIF enviado com sucesso para {chat_id}")
                        envios_com_sucesso += 1
                    else:
                        BOT2_LOGGER.error(f"[GIF-PROMO][{horario_atual}] ❌ Erro ao baixar o arquivo. Status: {arquivo_resposta.status_code}")
                        # Tentar enviar diretamente com a URL como fallback
                        BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] 🔄 Tentando fallback com URL direta")
                        bot2.send_animation(
                            chat_id=chat_id,
                            animation=gif_url,
                            caption="",
                            parse_mode="HTML"
                        )
                        BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] ✅ GIF enviado com sucesso (fallback)")
                        envios_com_sucesso += 1
                except Exception as download_error:
                    BOT2_LOGGER.error(f"[GIF-PROMO][{horario_atual}] ❌ Erro ao baixar/enviar: {str(download_error)}")
                    # Tentar enviar diretamente com a URL como fallback
                    BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] 🔄 Tentando segundo fallback com URL direta")
                    try:
                        bot2.send_animation(
                            chat_id=chat_id,
                            animation=gif_url,
                            caption="",
                            parse_mode="HTML"
                        )
                        BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] ✅ GIF enviado com sucesso (segundo fallback)")
                        envios_com_sucesso += 1
                    except Exception as final_error:
                        BOT2_LOGGER.error(f"[GIF-PROMO][{horario_atual}] ❌ Falha total no envio: {str(final_error)}")
                
            except Exception as e:
                BOT2_LOGGER.error(f"[GIF-PROMO][{horario_atual}] ❌ Erro no envio para {chat_id}: {str(e)}")
                if "rights to send" in str(e).lower():
                    BOT2_LOGGER.error(f"[GIF-PROMO][{horario_atual}] 🚫 Bot sem permissões no canal {chat_id}")
        
        # Registrar resultado final
        BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] 📊 Total de GIFs enviados com sucesso: {envios_com_sucesso}/{len(chats)}")
        return envios_com_sucesso > 0
    
    except Exception as e:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.error(f"[GIF-PROMO][{horario_atual}] ❌ Erro geral: {str(e)}")
        traceback.print_exc()
        return False
