# -*- coding: utf-8 -*-
"""
Bot Telegram 2 para envio de sinais em canais separados por idioma.
Versão independente que não depende mais do Bot 1.
Os sinais serão enviados da seguinte forma:
- Canal Português: -1002424874613
- Canal Inglês: -1002453956387
- Canal Espanhol: -1002446547846
O bot enviará 1 sinal por hora no minuto 13.
"""

# Importaes necessrias
import traceback
import socket
import pytz
from datetime import datetime, timedelta, time as dt_time
import json
import random
import time
import schedule
import requests
import logging
import sys
import os
from functools import lru_cache

# Definição da variável global assets
assets = {}

# Configuração do logger específico para o Bot 2
BOT2_LOGGER = logging.getLogger('bot2')
BOT2_LOGGER.setLevel(logging.INFO)
bot2_formatter = logging.Formatter('%(asctime)s - BOT2 - %(levelname)s - %(message)s')

# Evitar duplicação de handlers
if not BOT2_LOGGER.handlers:
    bot2_file_handler = logging.FileHandler("bot_telegram_bot2_logs.log")
    bot2_file_handler.setFormatter(bot2_formatter)
    BOT2_LOGGER.addHandler(bot2_file_handler)

    bot2_console_handler = logging.StreamHandler()
    bot2_console_handler.setFormatter(bot2_formatter)
    BOT2_LOGGER.addHandler(bot2_console_handler)

# Credenciais Telegram
BOT2_TOKEN = '7997585882:AAFDyG-BYskj1gyAbh17X5jd6DDClXdluww'

# Configuração dos canais para cada idioma
BOT2_CANAIS_CONFIG = {
    "-1002424874613": {  # Canal para mensagens em português
        "idioma": "pt",
        "link_corretora": "https://trade.xxbroker.com/register?aff=741613&aff_model=revenue&afftrack=",
        "fuso_horario": "America/Sao_Paulo"  # Brasil (UTC-3)
    },
    "-1002453956387": {  # Canal para mensagens em inglês
        "idioma": "en",
        "link_corretora": "https://trade.xxbroker.com/register?aff=741727&aff_model=revenue&afftrack=",
        "fuso_horario": "America/New_York"  # EUA (UTC-5 ou UTC-4 no horário de verão)
    },
    "-1002446547846": {  # Canal para mensagens em espanhol
        "idioma": "es",
        "link_corretora": "https://trade.xxbroker.com/register?aff=741726&aff_model=revenue&afftrack=",
        "fuso_horario": "Europe/Madrid"  # Espanha (UTC+1 ou UTC+2 no horário de verão)
    }
}

# Lista de IDs dos canais para facilitar iterao
BOT2_CHAT_IDS = list(BOT2_CANAIS_CONFIG.keys())

# ID para compatibilidade com cdigo existente
BOT2_CHAT_ID_CORRETO = BOT2_CHAT_IDS[0]  # Usar o primeiro canal como padro

# Limite de sinais por hora
BOT2_LIMITE_SINAIS_POR_HORA = 1

# Categorias de ativos
ATIVOS_CATEGORIAS = {
    "Binary": [],
    "Blitz": [],
    "Digital": [
        "Gold/Silver (OTC)",
        "Worldcoin (OTC)",
        "USD/THB (OTC)",
        "ETH/USD (OTC)",
        "CHF/JPY (OTC)",
        "Pepe (OTC)",
        "GBP/AUD (OTC)",
        "GBP/CHF",
        "GBP/CAD (OTC)",
        "EUR/JPY (OTC)",
        "AUD/CHF",
        "GER 30 (OTC)",
        "AUD/CHF (OTC)",
        "EUR/AUD",
        "USD/CAD (OTC)",
        "BTC/USD",
        "Amazon/Ebay (OTC)",
        "Coca-Cola Company (OTC)",
        "AIG (OTC)",
        "Amazon/Alibaba (OTC)",
        "Bitcoin Cash (OTC)",
        "AUD/USD",
        "DASH (OTC)",
        "BTC/USD (OTC)",
        "SP 35 (OTC)",
        "TRUMP Coin (OTC)",
        "US 100 (OTC)",
        "EUR/CAD (OTC)",
        "HK 33 (OTC)",
        "Alphabet/Microsoft (OTC)",
        "1000Sats (OTC)",
        "USD/ZAR (OTC)",
        "Litecoin (OTC)",
        "Hamster Kombat (OTC)",
        "USD Currency Index (OTC)",
        "AUS 200 (OTC)",
        "USD/CAD",
        "USD/JPY",
        "MELANIA Coin (OTC)",
        "JP 225 (OTC)",
        "AUD/CAD (OTC)",
        "AUD/JPY (OTC)",
        "US 500 (OTC)"
    ]
}

# Configurações de horários específicos para cada ativo
HORARIOS_PADRAO = {
    "USD/BRL_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-00:45", "01:15-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "USOUSD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-06:00", "06:30-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "BTC/USD_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Google_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "EUR/JPY_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "ETH/USD_OTC": {
        "Monday": ["00:00-19:45", "20:15-23:59"],
        "Tuesday": ["00:00-19:45", "20:15-23:59"],
        "Wednesday": ["00:00-19:45", "20:15-23:59"],
        "Thursday": ["00:00-19:45", "20:15-23:59"],
        "Friday": ["00:00-19:45", "20:15-23:59"],
        "Saturday": ["00:00-19:45", "20:15-23:59"],
        "Sunday": ["00:00-19:45", "20:15-23:59"]
    },
    "MELANIA_COIN_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "EUR/GBP_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "Apple_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "Amazon_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "TRUM_Coin_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Nike_Inc_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "DOGECOIN_OTC": {
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"]
    },
    "Tesla_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "SOL/USD_OTC": {
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"]
    },
    "1000Sats_OTC": {
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "XAUUSD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-06:00", "06:30-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "McDonalds_Corporation_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Meta_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "Coca_Cola_Company_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "CARDANO_OTC": {
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"]
    },
    "EUR/USD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "PEN/USD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-00:45", "01:15-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "Bitcoin_Cash_OTC": {
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "AUD/CAD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "Tesla/Ford_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "US_100_OTC": {
        "Monday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Tuesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Wednesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Thursday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"]
    },
    "FR_40_OTC": {  # Novo horrio para FR 40 (OTC)
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "AUS_200_OTC": {  # Atualizado com horrios especficos
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
    },
    "US_500_OTC": {  # Atualizado com horrios especficos
        "Monday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Tuesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Wednesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Thursday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"]
    },
    "EU_50_OTC": {  # Novo ativo com horrios especficos
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Gold": {  # Novo ativo com horrios especficos
        "Monday": ["04:00-16:00"],
        "Tuesday": ["04:00-16:00"],
        "Wednesday": ["04:00-16:00"],
        "Thursday": ["04:00-16:00"],
        "Friday": ["04:00-16:00"],
        "Saturday": [],
        "Sunday": []
    },
    "XAUUSD_OTC": {  # Atualizado com horrios especficos
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-06:00", "06:10-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "US2000_OTC": {  # Novo ativo com horrios especficos
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Gala_OTC": {  # Novo horrio especfico para Gala (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Floki_OTC": {  # Novo horrio especfico para Floki (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Graph_OTC": {  # Novo horrio especfico para Graph (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Intel_IBM_OTC": {  # Novo horrio para Intel/IBM (OTC)
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Pyth_OTC": {  # Atualizado para Pyth (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "IOTA_OTC": {  # Atualizado para IOTA (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "DOGECOIN_OTC": {  # Atualizado para DOGECOIN (OTC)
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"]
    },
    "Sei_OTC": {  # Atualizado para Sei (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Decentraland_OTC": {  # Atualizado para Decentraland (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "PEN_USD_OTC": {  # Atualizado para PEN/USD (OTC)
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-00:45", "01:15-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "Sandbox_OTC": {  # Atualizado para Sandbox (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "TRON_USD_OTC": {  # Atualizado para TRON/USD (OTC)
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"]
    },
    "Ripple_OTC": {  # Atualizado para Ripple (OTC)
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
    },
    "NEAR_OTC": {  # Atualizado para NEAR (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Arbitrum_OTC": {  # Atualizado para Arbitrum (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Polygon_OTC": {  # Atualizado para Polygon (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "EOS_OTC": {  # Atualizado para EOS (OTC)
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
    },
    "Alphabet_Microsoft_OTC": {  # Novo horrio para Alphabet/Microsoft (OTC)
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Jupiter_OTC": {  # Atualizado para Jupiter (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Dogwifhat_OTC": {  # Novo horrio para Dogwifhat (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Immutable_OTC": {  # Atualizado para Immutable (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Stacks_OTC": {  # Atualizado para Stacks (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Pepe_OTC": {  # Atualizado para Pepe (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Ronin_OTC": {  # Atualizado para Ronin (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Gold/Silver_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Worldcoin_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "USD/THB_OTC": {
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
    },
    "ETH/USD_OTC": {
        "Monday": ["00:00-19:45", "20:15-23:59"],
        "Tuesday": ["00:00-19:45", "20:15-23:59"],
        "Wednesday": ["00:00-19:45", "20:15-23:59"],
        "Thursday": ["00:00-19:45", "20:15-23:59"],
        "Friday": ["00:00-19:45", "20:15-23:59"],
        "Saturday": ["00:00-19:45", "20:15-23:59"],
        "Sunday": ["00:00-19:45", "20:15-23:59"]
    },
    "CHF/JPY_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Pepe_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "GBP/AUD_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "GBP/CHF": {
        "Monday": ["00:00-16:00"],
        "Tuesday": ["00:00-16:00"],
        "Wednesday": ["00:00-16:00"],
        "Thursday": ["00:00-16:00"],
        "Friday": ["00:00-14:00"],
                "Saturday": [],
                "Sunday": []
    },
    "GBP/CAD_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "EUR/JPY_OTC": {
                "Monday": ["00:00-23:59"],
                "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
                "Thursday": ["00:00-23:59"],
                "Friday": ["00:00-23:59"],
                "Saturday": ["00:00-23:59"],
                "Sunday": ["00:00-23:59"]
    },
    "AUD/CHF": {
        "Monday": ["00:00-16:00"],
        "Tuesday": ["00:00-16:00"],
        "Wednesday": ["00:00-16:00"],
        "Thursday": ["00:00-16:00"],
        "Friday": ["00:00-14:00"],
                "Saturday": [],
                "Sunday": []
    },
    "GER_30_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "AUD/CHF_OTC": {
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
    },
    "EUR/AUD": {
        "Monday": ["00:00-16:00"],
        "Tuesday": ["00:00-16:00"],
        "Wednesday": ["00:00-16:00"],
        "Thursday": ["00:00-16:00"],
        "Friday": ["00:00-14:00"],
                "Saturday": [],
                "Sunday": []
    },
    "USD/CAD_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "BTC/USD": {
        "Monday": ["03:00-15:00"],
        "Tuesday": ["03:00-15:00"],
        "Wednesday": ["03:00-15:00"],
        "Thursday": ["03:00-15:00"],
        "Friday": ["03:00-15:00"],
                "Saturday": [],
                "Sunday": []
    },
    "Amazon/Ebay_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Coca-Cola_Company_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "AIG_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Amazon/Alibaba_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Bitcoin_Cash_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "USD Currency Index_OTC": {
        "Monday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-10:00", "10:30-18:00"],
        "Saturday": [],
        "Sunday": ["19:00-23:59"]
    },
    "AUS_200_OTC": {  # J existe, mas atualizando para os novos horrios
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
    },
    "USD/CAD": {
        "Monday": ["03:00-15:00"],
        "Tuesday": ["03:00-15:00", "21:00-23:59"],
        "Wednesday": ["00:00-15:00"],
        "Thursday": ["03:00-15:00"],
        "Friday": ["03:00-15:00"],
        "Saturday": [],
        "Sunday": []
    },
    "USD/JPY": {
        "Monday": ["00:00-14:00", "23:00-23:59"],
        "Tuesday": ["00:00-14:00", "23:00-23:59"],
        "Wednesday": ["00:00-14:00", "23:00-23:59"],
        "Thursday": ["00:00-14:00", "23:00-23:59"],
        "Friday": ["00:00-14:00"],
        "Saturday": [],
        "Sunday": ["23:00-23:59"]
    },
    "MELANIA_Coin_OTC": {  # J existe, mantendo a mesma configurao
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "JP_225_OTC": {
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
    },
    "AUD/CAD_OTC": {  # J existe, atualizando a configurao
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
    },
    "AUD/JPY_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "US_500_OTC": {  # J existe, atualizando a configurao
        "Monday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Tuesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Wednesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Thursday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
                "Friday": ["00:00-23:59"],
                "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"]
    },
}

def adicionar_blitz(lista_ativos):
    for ativo in lista_ativos:
        if ativo in HORARIOS_PADRAO:
            assets[ativo] = HORARIOS_PADRAO[ativo]
        else:
            assets[ativo] = {
                "Monday": ["00:00-23:59"],
                "Tuesday": ["00:00-23:59"],
                "Wednesday": ["00:00-23:59"],
                "Thursday": ["00:00-23:59"],
                "Friday": ["00:00-23:59"],
                "Saturday": ["00:00-23:59"],
                "Sunday": ["00:00-23:59"]
            }
        ATIVOS_CATEGORIAS[ativo] = "Blitz"

# Exemplos de como adicionar ativos (comentado para referncia)
# adicionar_forex(["EUR/USD", "GBP/USD"])
# adicionar_crypto(["BTC/USD", "ETH/USD"])
# adicionar_stocks(["AAPL", "MSFT"])

# Funo para parsear os horrios
@lru_cache(maxsize=128)
def parse_time_range(time_str):
    """
    Converte uma string de intervalo de tempo (e.g. "09:30-16:00") para um par de time objects.
    """
    start_str, end_str = time_str.split('-')
    start_time = datetime.strptime(start_str, "%H:%M").time()
    end_time = datetime.strptime(end_str, "%H:%M").time()
    return start_time, end_time

# Funo para verificar disponibilidade de ativos
def is_asset_available(asset, current_time=None, current_day=None):
    """
    Verifica se um ativo está disponível no horário atual.
    """
    # Log para debug
    agora = bot2_obter_hora_brasilia()
    
    if not current_day:
        current_day = agora.strftime("%A")
    
    if not current_time:
        current_time = agora.strftime("%H:%M")
        
    BOT2_LOGGER.info(f"Verificando disponibilidade do ativo {asset} no dia {current_day}, horário {current_time}")
    
    # Verificar se o ativo existe no dicionário assets
    if asset not in assets:
        BOT2_LOGGER.warning(f"Ativo {asset} não encontrado no dicionário assets")
        # Tentar usar horário padrão para qualquer dia da semana
        default_hours = {
            "Monday": ["00:00-23:59"],
            "Tuesday": ["00:00-23:59"],
            "Wednesday": ["00:00-23:59"],
            "Thursday": ["00:00-23:59"],
            "Friday": ["00:00-23:59"],
            "Saturday": ["00:00-23:59"],
            "Sunday": ["00:00-23:59"]
        }
        assets[asset] = default_hours
        BOT2_LOGGER.info(f"Criando horário padrão 24/7 para o ativo {asset}")

    # Verificar se o dia atual existe no dicionário do ativo
    if current_day not in assets[asset]:
        BOT2_LOGGER.warning(f"Dia {current_day} não configurado para o ativo {asset}")
        return False

    current_time_obj = datetime.strptime(current_time, "%H:%M").time()

    # Verificar cada intervalo de horário configurado para o ativo no dia atual
    for time_range in assets[asset][current_day]:
        start_time, end_time = parse_time_range(time_range)
        if start_time <= current_time_obj <= end_time:
            BOT2_LOGGER.info(f"Ativo {asset} está disponível no horário {current_time} (dentro do intervalo {time_range})")
            return True
        else:
            BOT2_LOGGER.debug(f"Ativo {asset} não está disponível no intervalo {time_range}")

    BOT2_LOGGER.warning(f"Ativo {asset} não está disponível em nenhum intervalo de horário do dia {current_day}")
    return False

# Funo para obter hora no fuso horário de Brasília (específica para Bot 2)
def bot2_obter_hora_brasilia():
    """
    Retorna a hora atual no fuso horário de Brasília.
    """
    fuso_horario_brasilia = pytz.timezone('America/Sao_Paulo')
    return datetime.now(fuso_horario_brasilia)

def bot2_verificar_disponibilidade():
    """
    Verifica quais ativos estão disponíveis no momento da verificação.
    Retorna uma lista de ativos da categoria Digital disponíveis.
    """
    ativos_disponiveis = []
    
    # Obter hora atual no fuso horário de Brasília
    agora = bot2_obter_hora_brasilia()
    dia_atual = agora.strftime("%A")
    hora_atual = agora.strftime("%H:%M")
    
    BOT2_LOGGER.info(f"Verificando disponibilidade para o dia {dia_atual} às {hora_atual}")
    
    # Filtrar apenas ativos da categoria Digital
    ativos_digital = [ativo for ativo in ATIVOS_CATEGORIAS["Digital"]]
    
    if not ativos_digital:
        BOT2_LOGGER.warning("Nenhum ativo na categoria Digital encontrado!")
        return []
    
    BOT2_LOGGER.info(f"Total de ativos na categoria Digital: {len(ativos_digital)}")
    
    # Verificar disponibilidade de cada ativo
    for ativo in ativos_digital:
        if is_asset_available(ativo, hora_atual, dia_atual):
            ativos_disponiveis.append(ativo)
    
    BOT2_LOGGER.info(f"Ativos disponíveis no momento ({len(ativos_disponiveis)}): {ativos_disponiveis}")
    
    return ativos_disponiveis

def bot2_gerar_sinal_aleatorio():
    """
    Gera um sinal aleatrio para enviar.
    Retorna um dicionrio com os dados do sinal ou None se no houver sinal.
    """
    global BOT2_ATIVOS_CATEGORIAS
    
    # Verificar apenas ativos da categoria Digital
    ativos_disponiveis = []
    
    # Obter a hora atual e o dia da semana
    agora = bot2_obter_hora_brasilia()
    current_time = agora.strftime("%H:%M")
    current_day = agora.strftime("%A")
    
    # Buscar apenas ativos da categoria Digital que estão disponíveis no momento
    for ativo in ATIVOS_CATEGORIAS["Digital"]:
        if is_asset_available(ativo, current_time, current_day):
            ativos_disponiveis.append(ativo)
    
    # Se não houver ativos disponíveis, retornar None
    if not ativos_disponiveis:
        BOT2_LOGGER.warning(f"Nenhum ativo da categoria Digital disponível no momento.")
        return None

    ativo = random.choice(ativos_disponiveis)
    direcao = random.choice(['buy', 'sell'])
    categoria = "Digital"  # Sempre usar a categoria Digital

    # Definir o tempo de expiração fixo em 5 minutos para todos os sinais
    tempo_expiracao_minutos = 5
    expiracao_time = bot2_obter_hora_brasilia() + timedelta(minutes=tempo_expiracao_minutos)
    expiracao_texto = f"🕒 Expiração: {tempo_expiracao_minutos} minutos ({expiracao_time.strftime('%H:%M')})"

    return {
        'ativo': ativo,
        'direcao': direcao,
        'categoria': categoria,
        'expiracao_texto': expiracao_texto,
        'tempo_expiracao_minutos': int(tempo_expiracao_minutos)  # Garante que seja inteiro
    }

# Funo para obter hora no fuso horário específico (a partir da hora de Brasília)
def bot2_converter_fuso_horario(hora_brasilia, fuso_destino):
    """
    Converte uma hora do fuso horário de Brasília para o fuso horário de destino.
    
    Args:
        hora_brasilia (datetime): Hora no fuso horário de Brasília
        fuso_destino (str): Nome do fuso horário de destino (ex: 'America/New_York')
        
    Returns:
        datetime: Hora convertida para o fuso horário de destino
    """
    # Garantir que hora_brasilia tenha informações de fuso horário
    fuso_horario_brasilia = pytz.timezone('America/Sao_Paulo')
    
    # Se a hora não tiver informação de fuso, adicionar
    if hora_brasilia.tzinfo is None:
        hora_brasilia = fuso_horario_brasilia.localize(hora_brasilia)
    
    # Converter para o fuso horário de destino
    fuso_destino_tz = pytz.timezone(fuso_destino)
    hora_destino = hora_brasilia.astimezone(fuso_destino_tz)
    
    return hora_destino

def bot2_formatar_mensagem(sinal, hora_formatada, idioma):
    """
    Formata a mensagem do sinal para o idioma especificado.
    Retorna a mensagem formatada no idioma correto (pt, en ou es).
    """
    ativo = sinal['ativo']
    direcao = sinal['direcao']
    categoria = sinal['categoria']
    tempo_expiracao_minutos = sinal['tempo_expiracao_minutos']

    # Debug: registrar os dados sendo usados para formatar a mensagem
    BOT2_LOGGER.info(f"Formatando mensagem com: ativo={ativo}, direção={direcao}, categoria={categoria}, tempo={tempo_expiracao_minutos}, idioma={idioma}")

    # Formatação do nome do ativo para exibição
    nome_ativo_exibicao = ativo.replace("Digital_", "") if ativo.startswith("Digital_") else ativo
    if "(OTC)" in nome_ativo_exibicao and not " (OTC)" in nome_ativo_exibicao:
        nome_ativo_exibicao = nome_ativo_exibicao.replace("(OTC)", " (OTC)")

    # Configura ações e emojis conforme a direção
    action_pt = "PUT" if direcao == 'sell' else "CALL"
    action_en = "PUT" if direcao == 'sell' else "CALL"
    action_es = "PUT" if direcao == 'sell' else "CALL"
    emoji = "🟥" if direcao == 'sell' else "🟩"

    # Encontrar o fuso horário adequado para o idioma
    fuso_horario = "America/Sao_Paulo"  # Padrão (Brasil)
    
    # Buscar o fuso horário na configuração dos canais
    for chat_id, config in BOT2_CANAIS_CONFIG.items():
        if config["idioma"] == idioma:
            fuso_horario = config.get("fuso_horario", "America/Sao_Paulo")
            break
    
    # Hora de entrada convertida para datetime no fuso horário de Brasília
    hora_entrada = datetime.strptime(hora_formatada, "%H:%M")
    hora_entrada_br = bot2_obter_hora_brasilia().replace(hour=hora_entrada.hour, minute=hora_entrada.minute, second=0, microsecond=0)
    
    # Converter para o fuso horário do canal
    hora_entrada_local = bot2_converter_fuso_horario(hora_entrada_br, fuso_horario)
    
    # Calcular horário de expiração no fuso horário de Brasília
    hora_expiracao_br = hora_entrada_br + timedelta(minutes=tempo_expiracao_minutos)
    
    # Converter expiração para o fuso horário do canal
    hora_expiracao_local = bot2_converter_fuso_horario(hora_expiracao_br, fuso_horario)
    
    # Calcular horários de gale (reentrada) no fuso horário de Brasília
    # 1° GALE é o horário de expiração + 5 minutos
    hora_gale1_br = hora_expiracao_br + timedelta(minutes=5)
    # 2° GALE é o 1° GALE + 5 minutos
    hora_gale2_br = hora_gale1_br + timedelta(minutes=5)
    # 3° GALE é o 2° GALE + 5 minutos
    hora_gale3_br = hora_gale2_br + timedelta(minutes=5)
    
    # Converter gales para o fuso horário do canal
    hora_gale1_local = bot2_converter_fuso_horario(hora_gale1_br, fuso_horario)
    hora_gale2_local = bot2_converter_fuso_horario(hora_gale2_br, fuso_horario)
    hora_gale3_local = bot2_converter_fuso_horario(hora_gale3_br, fuso_horario)
    
    # Formatar os horários para exibição (no fuso horário local)
    hora_entrada_formatada = hora_entrada_local.strftime("%H:%M")
    hora_expiracao_formatada = hora_expiracao_local.strftime("%H:%M")
    hora_gale1_formatada = hora_gale1_local.strftime("%H:%M")
    hora_gale2_formatada = hora_gale2_local.strftime("%H:%M")
    hora_gale3_formatada = hora_gale3_local.strftime("%H:%M")
    
    # Registrar a conversão de fuso horário
    BOT2_LOGGER.info(f"Horários convertidos para fuso {fuso_horario}: Entrada={hora_entrada_formatada}, " +
                     f"Expiração={hora_expiracao_formatada}, Gale1={hora_gale1_formatada}, " +
                     f"Gale2={hora_gale2_formatada}, Gale3={hora_gale3_formatada}")

    # Formatação para singular ou plural de "minuto" baseado no tempo de expiração
    texto_minutos_pt = "minuto" if tempo_expiracao_minutos == 1 else "minutos"
    texto_minutos_en = "minute" if tempo_expiracao_minutos == 1 else "minutes"
    texto_minutos_es = "minuto" if tempo_expiracao_minutos == 1 else "minutos"

    # Configurar links baseados no idioma
    if idioma == "pt":
        link_corretora = "https://trade.xxbroker.com/register?aff=741613&aff_model=revenue&afftrack="
        link_video = "https://t.me/trendingbrazil/215"
        texto_corretora = "Clique para abrir a corretora"
        texto_video = "Clique aqui"
        texto_tempo = "TEMPO PARA"
        texto_gale1 = "1º GALE — TEMPO PARA"
        texto_gale2 = "2º GALE TEMPO PARA"
        texto_gale3 = "3º GALE TEMPO PARA"
    elif idioma == "en":
        link_corretora = "https://trade.xxbroker.com/register?aff=741727&aff_model=revenue&afftrack="
        link_video = "https://t.me/trendingenglish/226"
        texto_corretora = "Click to open broker"
        texto_video = "Click here"
        texto_tempo = "TIME UNTIL"
        texto_gale1 = "1st GALE — TIME UNTIL"
        texto_gale2 = "2nd GALE TIME UNTIL"
        texto_gale3 = "3rd GALE TIME UNTIL"
    else:  # espanhol
        link_corretora = "https://trade.xxbroker.com/register?aff=741726&aff_model=revenue&afftrack="
        link_video = "https://t.me/trendingespanish/212"
        texto_corretora = "Haga clic para abrir el corredor"
        texto_video = "Haga clic aquí"
        texto_tempo = "TIEMPO HASTA"
        texto_gale1 = "1º GALE — TIEMPO HASTA"
        texto_gale2 = "2º GALE TIEMPO HASTA"
        texto_gale3 = "3º GALE TIEMPO HASTA"
    
    # Determinar a categoria de exibição (Binary, Digital)
    categoria_exibicao = "Binary"
    if isinstance(categoria, list) and len(categoria) > 0:
        # Escolher apenas um item da lista para exibir (o primeiro)
        categoria_exibicao = categoria[0]
    else:
        categoria_exibicao = categoria  # Usar o valor de categoria diretamente
    
    # Mensagem em PT
    mensagem_pt = (f"💰{tempo_expiracao_minutos} {texto_minutos_pt} de expiração\n"
            f"{nome_ativo_exibicao};{hora_entrada_formatada};{action_pt} {emoji} {categoria_exibicao}\n\n"
            f"🕐{texto_tempo} {hora_expiracao_formatada}\n\n"
            f"{texto_gale1} {hora_gale1_formatada}\n"
            f"{texto_gale2} {hora_gale2_formatada}\n"
            f"{texto_gale3} {hora_gale3_formatada}\n\n"
            f"📲 <a href=\"{link_corretora}\">{texto_corretora}</a>\n"
            f"🙋‍♂️ Não sabe operar ainda? <a href=\"{link_video}\">{texto_video}</a>")
            
    # Mensagem em EN
    mensagem_en = (f"💰{tempo_expiracao_minutos} {texto_minutos_en} expiration\n"
            f"{nome_ativo_exibicao};{hora_entrada_formatada};{action_en} {emoji} {categoria_exibicao}\n\n"
            f"🕐{texto_tempo} {hora_expiracao_formatada}\n\n"
            f"{texto_gale1} {hora_gale1_formatada}\n"
            f"{texto_gale2} {hora_gale2_formatada}\n"
            f"{texto_gale3} {hora_gale3_formatada}\n\n"
            f"📲 <a href=\"{link_corretora}\">{texto_corretora}</a>\n"
            f"🙋‍♂️ Don't know how to trade yet? <a href=\"{link_video}\">{texto_video}</a>")
            
    # Mensagem em ES
    mensagem_es = (f"💰{tempo_expiracao_minutos} {texto_minutos_es} de expiración\n"
            f"{nome_ativo_exibicao};{hora_entrada_formatada};{action_es} {emoji} {categoria_exibicao}\n\n"
            f"🕐{texto_tempo} {hora_expiracao_formatada}\n\n"
            f"{texto_gale1} {hora_gale1_formatada}\n"
            f"{texto_gale2} {hora_gale2_formatada}\n"
            f"{texto_gale3} {hora_gale3_formatada}\n\n"
            f"📲 <a href=\"{link_corretora}\">{texto_corretora}</a>\n"
            f"🙋‍♂️ ¿No sabe operar todavía? <a href=\"{link_video}\">{texto_video}</a>")
            
    # Verificar se há algum texto não esperado antes de retornar a mensagem
    if idioma == "pt":
        mensagem_final = mensagem_pt
    elif idioma == "en":
        mensagem_final = mensagem_en
    elif idioma == "es":
        mensagem_final = mensagem_es
    else:  # Padrão para qualquer outro idioma (português)
        mensagem_final = mensagem_pt
        
    BOT2_LOGGER.info(f"Mensagem formatada final para idioma {idioma}: {mensagem_final}")
    return mensagem_final

def bot2_registrar_envio(ativo, direcao, categoria):
    """
    Registra o envio de um sinal no banco de dados.
    Implementao futura: Aqui voc adicionaria o cdigo para registrar o envio no banco de dados.
    """
    pass

# Inicializao do Bot 2 quando este arquivo for executado
bot2_sinais_agendados = False
bot2_contador_sinais = 0  # Contador para rastrear quantos sinais foram enviados
BOT2_ATIVOS_CATEGORIAS = {}  # Inicialização de categorias de ativos

# URLs promocionais
XXBROKER_URL = "https://trade.xxbroker.com/register?aff=741613&aff_model=revenue&afftrack="
VIDEO_TELEGRAM_URL = "https://t.me/trendingbrazil/215"
VIDEO_TELEGRAM_ES_URL = "https://t.me/trendingespanish/212"
VIDEO_TELEGRAM_EN_URL = "https://t.me/trendingenglish/226"

# Configuração da URL base do GitHub
GITHUB_BASE_URL = "https://raw.githubusercontent.com/igoredson/signalbotrender/main/"

# Alternativa para testes locais (descomentar se necessário)
# GITHUB_BASE_URL = "https://github.com/igoredson/signalbotrender/raw/main/"

# Base directory para os arquivos do projeto
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# Definindo diretrios para os vdeos
VIDEOS_DIR = os.path.join(BASE_DIR, "videos")
os.makedirs(VIDEOS_DIR, exist_ok=True)

# Subdiretrios para organizar os vdeos
VIDEOS_POS_SINAL_DIR = os.path.join(VIDEOS_DIR, "pos_sinal")
VIDEOS_PROMO_DIR = os.path.join(VIDEOS_DIR, "promo")
VIDEOS_ESPECIAL_DIR = os.path.join(VIDEOS_DIR, "gif_especial")  # Alterado de "especial" para "gif_especial"

# Criar os subdiretrios se no existirem
os.makedirs(VIDEOS_POS_SINAL_DIR, exist_ok=True)
os.makedirs(VIDEOS_PROMO_DIR, exist_ok=True)
os.makedirs(VIDEOS_ESPECIAL_DIR, exist_ok=True)

# Diretrios para vdeos ps-sinal em cada idioma
VIDEOS_POS_SINAL_PT_DIR = os.path.join(VIDEOS_POS_SINAL_DIR, "pt")
VIDEOS_POS_SINAL_EN_DIR = os.path.join(VIDEOS_POS_SINAL_DIR, "en")
VIDEOS_POS_SINAL_ES_DIR = os.path.join(VIDEOS_POS_SINAL_DIR, "es")

# Diretrios para vdeos especiais em cada idioma
VIDEOS_ESPECIAL_PT_DIR = os.path.join(VIDEOS_ESPECIAL_DIR, "pt")
VIDEOS_ESPECIAL_EN_DIR = os.path.join(VIDEOS_ESPECIAL_DIR, "en")
VIDEOS_ESPECIAL_ES_DIR = os.path.join(VIDEOS_ESPECIAL_DIR, "es")

# Criar os subdiretrios para cada idioma se no existirem
os.makedirs(VIDEOS_POS_SINAL_PT_DIR, exist_ok=True)
os.makedirs(VIDEOS_POS_SINAL_EN_DIR, exist_ok=True)
os.makedirs(VIDEOS_POS_SINAL_ES_DIR, exist_ok=True)
os.makedirs(VIDEOS_ESPECIAL_PT_DIR, exist_ok=True)
os.makedirs(VIDEOS_ESPECIAL_EN_DIR, exist_ok=True)
os.makedirs(VIDEOS_ESPECIAL_ES_DIR, exist_ok=True)

# URLs dos GIFs diretamente do GitHub (seguindo a estrutura de seu repositório)
VIDEOS_POS_SINAL_GITHUB = {
    "pt": [
        f"{GITHUB_BASE_URL}videos/pos_sinal/pt/padrão.gif",  # Vdeo padro em portugus (9/10)
        f"{GITHUB_BASE_URL}videos/pos_sinal/pt/especial.gif"  # Vdeo especial em portugus (1/10)
    ],
    "en": [
        f"{GITHUB_BASE_URL}videos/pos_sinal/en/padrao.gif",  # Vdeo padro em ingls (9/10)
        f"{GITHUB_BASE_URL}videos/pos_sinal/en/especial.gif"  # Vdeo especial em ingls (1/10)
    ],
    "es": [
        f"{GITHUB_BASE_URL}videos/pos_sinal/es/padrao.gif",  # Vdeo padro em espanhol (9/10)
        f"{GITHUB_BASE_URL}videos/pos_sinal/es/especial.gif"  # Vdeo especial em espanhol (1/10)
    ]
}

# Configurar vdeos ps-sinal especficos para cada idioma (local paths)
VIDEOS_POS_SINAL = {
    "pt": [
        os.path.join(VIDEOS_POS_SINAL_PT_DIR, "padrão.gif"),  # Vdeo padro em portugus (9/10)
        os.path.join(VIDEOS_POS_SINAL_PT_DIR, "especial.gif")  # Vdeo especial em portugus (1/10)
    ],
    "en": [
        os.path.join(VIDEOS_POS_SINAL_EN_DIR, "padrao.gif"),  # Vdeo padro em ingls (9/10)
        os.path.join(VIDEOS_POS_SINAL_EN_DIR, "especial.gif")  # Vdeo especial em ingls (1/10)
    ],
    "es": [
        os.path.join(VIDEOS_POS_SINAL_ES_DIR, "padrao.gif"),  # Vdeo padro em espanhol (9/10)
        os.path.join(VIDEOS_POS_SINAL_ES_DIR, "especial.gif")  # Vdeo especial em espanhol (1/10)
    ]
}

# Vdeo especial a cada 3 sinais (por idioma) - URLs do GitHub
VIDEOS_ESPECIAIS_GITHUB = {
    "pt": f"{GITHUB_BASE_URL}videos/gif_especial/pt/especial.gif",
    "en": f"{GITHUB_BASE_URL}videos/gif_especial/en/especial.gif",
    "es": f"{GITHUB_BASE_URL}videos/gif_especial/es/especial.gif"
}

# Vdeo especial a cada 3 sinais (por idioma) - local paths
VIDEOS_ESPECIAIS = {
    "pt": os.path.join(VIDEOS_ESPECIAL_PT_DIR, "especial.gif"),
    "en": os.path.join(VIDEOS_ESPECIAL_EN_DIR, "especial.gif"),
    "es": os.path.join(VIDEOS_ESPECIAL_ES_DIR, "especial.gif")
}

# Vdeos promocionais por idioma - URLs do GitHub
VIDEOS_PROMO_GITHUB = {
    "pt": f"{GITHUB_BASE_URL}videos/promo/pt/promo.gif",
    "en": f"{GITHUB_BASE_URL}videos/promo/en/promo.gif",
    "es": f"{GITHUB_BASE_URL}videos/promo/es/promo.gif"
}

# Vdeos promocionais por idioma - local paths
VIDEOS_PROMO = {
    "pt": os.path.join(VIDEOS_PROMO_DIR, "pt", "promo.gif"),
    "en": os.path.join(VIDEOS_PROMO_DIR, "en", "promo.gif"),
    "es": os.path.join(VIDEOS_PROMO_DIR, "es", "promo.gif")
}

# Logs para diagnstico
print(f"VIDEOS_DIR: {VIDEOS_DIR}")
print(f"VIDEOS_ESPECIAL_DIR: {VIDEOS_ESPECIAL_DIR}")
print(f"VIDEOS_ESPECIAL_PT_DIR: {VIDEOS_ESPECIAL_PT_DIR}")

# Caminho para o vdeo do GIF especial PT
VIDEO_GIF_ESPECIAL_PT = os.path.join(VIDEOS_ESPECIAL_PT_DIR, "especial.gif")
print(f"VIDEO_GIF_ESPECIAL_PT: {VIDEO_GIF_ESPECIAL_PT}")

# Contador para controle dos GIFs ps-sinal
contador_pos_sinal = 0
contador_desde_ultimo_especial = 0

# Adicionar variveis para controle da imagem especial diria
import random
horario_especial_diario = None
imagem_especial_ja_enviada_hoje = False

# Funo para definir o horrio especial dirio
def definir_horario_especial_diario():
    global horario_especial_diario, imagem_especial_ja_enviada_hoje
    
    # Reseta o status de envio da imagem especial
    imagem_especial_ja_enviada_hoje = False
    
    # Define um horrio aleatrio entre 0 e 23 horas
    horas_disponiveis = list(range(0, 24))
    hora_aleatoria = random.choice(horas_disponiveis)
    
    # Definir o mesmo minuto usado para o envio de sinais
    minuto_envio = 13
    
    # Define o horrio especial para hoje
    horario_atual = bot2_obter_hora_brasilia()
    horario_especial_diario = horario_atual.replace(
        hour=hora_aleatoria, 
        minute=minuto_envio,  # Mesmo minuto usado para envio de sinais
        second=0, 
        microsecond=0
    )
    
    BOT2_LOGGER.info(f"Horário especial diário definido para: {horario_especial_diario.strftime('%H:%M')}")
    
    # Se o horrio j passou hoje, reagenda para amanh
    if horario_especial_diario < horario_atual:
        horario_especial_diario = horario_especial_diario + timedelta(days=1)
        BOT2_LOGGER.info(f"Horário já passou hoje, reagendado para amanhã: {horario_especial_diario.strftime('%H:%M')}")

# Agendar a redefinio do horrio especial dirio  meia-noite
def agendar_redefinicao_horario_especial():
    schedule.every().day.at("00:01").do(definir_horario_especial_diario)
    BOT2_LOGGER.info("Agendada redefinição do horário especial diário para meia-noite e um minuto")

# Chamar a funo no incio para definir o horrio especial para hoje
definir_horario_especial_diario()
agendar_redefinicao_horario_especial()

def bot2_enviar_gif_pos_sinal():
    """Envia um GIF ou imagem pós-sinal para todos os canais, buscando diretamente do GitHub."""
    try:
        global contador_pos_sinal
        global contador_desde_ultimo_especial
        global imagem_especial_ja_enviada_hoje
        global horario_especial_diario
        
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.info(f"[{horario_atual}] INICIANDO ENVIO DA IMAGEM PÓS-SINAL...")
        BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: Preparando para enviar GIFs pós-sinal")
        
        # Limpar o próprio agendamento para garantir que este seja executado apenas uma vez por sinal
        schedule.clear('bot2_pos_sinal')
        
        # Incrementar o contador de envios pós-sinal
        contador_pos_sinal += 1
        contador_desde_ultimo_especial += 1
        
        BOT2_LOGGER.info(f"[{horario_atual}] Contador pós-sinal: {contador_pos_sinal}")
        
        # Determinar se devemos enviar a imagem especial
        horario_especial_agora = False
        if horario_especial_diario and not imagem_especial_ja_enviada_hoje:
            if (agora.hour == horario_especial_diario.hour and agora.minute == horario_especial_diario.minute):
                horario_especial_agora = True
                imagem_especial_ja_enviada_hoje = True
                BOT2_LOGGER.info(f"[{horario_atual}] HORÁRIO ESPECIAL DETECTADO! Enviando mensagem especial")
        
        # Verifica se deve enviar mensagem especial
        if horario_especial_agora:
            BOT2_LOGGER.info(f"[{horario_atual}] ENVIANDO A MENSAGEM ESPECIAL DE PERDA")
            
            for chat_id in BOT2_CHAT_IDS:
                try:
                    config_canal = BOT2_CANAIS_CONFIG[chat_id]
                    idioma = config_canal["idioma"]
                    
                    # Definir mensagem específica para cada idioma
                    if idioma == "pt":
                        mensagem = (
                            "⚠️ ATENÇÃO - RESULTADO NEGATIVO ⚠️\n\n"
                            "O mercado se moveu contra nossa análise.\n\n"
                            "🔄 Vamos seguir com nossa estratégia e entrar no próximo sinal com GERENCIAMENTO DE BANCA.\n\n"
                            "🧠 Lembre-se: gerenciamento é a chave para o sucesso no longo prazo.\n\n"
                            "💪 Mantenha o foco e a disciplina. Estamos juntos nessa jornada!\n\n"
                            "📊 Nossa taxa de acerto continua superior a 85% no mês."
                        )
                    elif idioma == "en":
                        mensagem = (
                            "⚠️ ATTENTION - NEGATIVE RESULT ⚠️\n\n"
                            "The market moved against our analysis.\n\n"
                            "🔄 Let's continue with our strategy and enter the next signal with proper BANKROLL MANAGEMENT.\n\n"
                            "🧠 Remember: management is the key to long-term success.\n\n"
                            "💪 Stay focused and disciplined. We're in this journey together!\n\n"
                            "📊 Our monthly success rate remains above 85%."
                        )
                    else:  # espanhol por padrão
                        mensagem = (
                            "⚠️ ATENCIÓN - RESULTADO NEGATIVO ⚠️\n\n"
                            "El mercado se movió contra nuestro análisis.\n\n"
                            "🔄 Continuemos con nuestra estrategia y entremos en la próxima señal con GESTIÓN DE BANCA.\n\n"
                            "🧠 Recuerda: la gestión es la clave para el éxito a largo plazo.\n\n"
                            "💪 Mantén el enfoque y la disciplina. ¡Estamos juntos en este camino!\n\n"
                            "📊 Nuestra tasa de éxito mensual sigue siendo superior al 85%."
                        )
                    
                    # Enviar a mensagem de texto
                    url_base = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendMessage"
                    payload = {
                        'chat_id': chat_id,
                        'text': mensagem,
                        'parse_mode': 'HTML',
                        'disable_web_page_preview': True
                    }
                    
                    resposta = requests.post(url_base, json=payload)
                    
                    if resposta.status_code == 200:
                        BOT2_LOGGER.info(f"[{horario_atual}] ✓ MENSAGEM ESPECIAL ENVIADA COM SUCESSO para o canal {chat_id}")
                    else:
                        BOT2_LOGGER.error(f"[{horario_atual}] ✗ Erro ao enviar mensagem especial: {resposta.text}")
                        
                except Exception as e:
                    BOT2_LOGGER.error(f"[{horario_atual}] Erro ao enviar mensagem especial: {str(e)}")
        else:
            # Envio do GIF normal pós-sinal para cada canal
            BOT2_LOGGER.info(f"[{horario_atual}] Enviando GIF pós-sinal padrão para todos os canais")
            
            for chat_id in BOT2_CHAT_IDS:
                try:
                    config_canal = BOT2_CANAIS_CONFIG[chat_id]
                    idioma = config_canal["idioma"]
                    
                    # Definir a URL do GIF no GitHub com base no idioma
                    if idioma == "pt":
                        gif_url = f"{GITHUB_BASE_URL}videos/pos_sinal/pt/padrão.gif"
                    elif idioma == "en":
                        gif_url = f"{GITHUB_BASE_URL}videos/pos_sinal/en/padrao.gif"
                    else:  # "es"
                        gif_url = f"{GITHUB_BASE_URL}videos/pos_sinal/es/padrao.gif"
                    
                    BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: Preparando envio do GIF: {gif_url} para canal {chat_id}")
                    
                    # Verificar se a URL do GIF é válida
                    gif_url_verificada, is_valid = verificar_url_gif(gif_url)
                    
                    if is_valid:
                        BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: URL do GIF é válida: {gif_url_verificada}")
                    else:
                        BOT2_LOGGER.warning(f"[{horario_atual}] 🎬 LOG GIF: URL do GIF pode não ser válida: {gif_url_verificada}")
                    
                    # Enviar o GIF como animação via API Telegram
                    url_base = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendAnimation"
                    payload = {
                        'chat_id': chat_id,
                        'animation': gif_url_verificada
                    }
                    
                    BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: Enviando requisição para API Telegram com payload: {payload}")
                    
                    resposta = requests.post(url_base, json=payload)
                    
                    if resposta.status_code == 200:
                        BOT2_LOGGER.info(f"[{horario_atual}] ✓ GIF PÓS-SINAL ENVIADO COM SUCESSO para o canal {chat_id}")
                        BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: Resposta da API: {resposta.json()}")
                    else:
                        BOT2_LOGGER.error(f"[{horario_atual}] ✗ Erro ao enviar GIF: {resposta.text}")
                        BOT2_LOGGER.error(f"[{horario_atual}] 🎬 LOG GIF: Tentando método alternativo de envio...")
                        
                        # Tentar enviar o GIF como uma foto primeiro
                        try:
                            BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: Tentando enviar como foto em vez de animação")
                            url_base_foto = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendPhoto"
                            foto_payload = {
                                'chat_id': chat_id,
                                'photo': gif_url_verificada,
                                'caption': 'Signal result'
                            }
                            
                            resposta_foto = requests.post(url_base_foto, json=foto_payload)
                            if resposta_foto.status_code == 200:
                                BOT2_LOGGER.info(f"[{horario_atual}] ✓ GIF enviado com sucesso como FOTO para o canal {chat_id}")
                                continue
                            else:
                                BOT2_LOGGER.error(f"[{horario_atual}] ✗ Falha ao enviar como foto: {resposta_foto.text}")
                        except Exception as photo_error:
                            BOT2_LOGGER.error(f"[{horario_atual}] 🎬 LOG GIF: Erro ao enviar como foto: {str(photo_error)}")
                        
                        # Tentar baixar o GIF e enviar como um arquivo
                        try:
                            BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: Baixando GIF de {gif_url_verificada}")
                            gif_data = requests.get(gif_url_verificada, timeout=30)
                            if gif_data.status_code == 200:
                                BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: GIF baixado com sucesso ({len(gif_data.content)} bytes), tentando enviar como arquivo")
                                
                                url_base_documento = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendDocument"
                                files = {'document': ('animation.gif', gif_data.content)}
                                data = {'chat_id': chat_id}
                                
                                resposta_alt = requests.post(url_base_documento, files=files, data=data)
                                if resposta_alt.status_code == 200:
                                    BOT2_LOGGER.info(f"[{horario_atual}] ✓ GIF enviado com sucesso como documento para o canal {chat_id}")
                                else:
                                    BOT2_LOGGER.error(f"[{horario_atual}] ✗ Erro ao enviar GIF como documento: {resposta_alt.text}")
                            else:
                                BOT2_LOGGER.error(f"[{horario_atual}] 🎬 LOG GIF: Falha ao baixar GIF: {gif_data.status_code}")
                        except Exception as download_error:
                            BOT2_LOGGER.error(f"[{horario_atual}] 🎬 LOG GIF: Erro ao baixar/enviar GIF alternativo: {str(download_error)}")
                        
                except Exception as e:
                    BOT2_LOGGER.error(f"[{horario_atual}] Erro ao processar GIF: {str(e)}")
                    BOT2_LOGGER.error(f"[{horario_atual}] 🎬 LOG GIF: Erro detalhado: {traceback.format_exc()}")
                    
        return True
    except Exception as e:
        horario_atual = bot2_obter_hora_brasilia().strftime("%H:%M:%S")
        BOT2_LOGGER.error(f"[{horario_atual}] Erro geral ao enviar imagens pós-sinal: {str(e)}")
        BOT2_LOGGER.error(f"[{horario_atual}] 🎬 LOG GIF: Stack trace completo: {traceback.format_exc()}")
        return False

def bot2_send_message(ignorar_anti_duplicacao=False, enviar_gif_imediatamente=False):
    """Envia uma mensagem com sinal para todos os canais configurados."""
    global bot2_contador_sinais
    
    try:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.info(f"[{horario_atual}] INICIANDO ENVIO DO SINAL...")
        
        # Gerar o sinal aleatório
        sinal = bot2_gerar_sinal_aleatorio()
        if not sinal:
            BOT2_LOGGER.error(f"[{horario_atual}] Não foi possível gerar um sinal válido. Tentando novamente mais tarde.")
            return
            
        # Em vez de desempacotar diretamente, obtenha os valores do dicionário
        ativo = sinal['ativo']
        direcao = sinal['direcao']
        tempo_expiracao_minutos = sinal['tempo_expiracao_minutos']
        categoria = sinal['categoria']
        
        # Calcular o horário de entrada (2 minutos após o envio do sinal)
        hora_entrada = agora + timedelta(minutes=2)
        hora_formatada = hora_entrada.strftime("%H:%M")
        
        # Enviar para cada canal
        for chat_id in BOT2_CHAT_IDS:
            config_canal = BOT2_CANAIS_CONFIG[chat_id]
            idioma = config_canal["idioma"]
            
            mensagem_formatada = bot2_formatar_mensagem(sinal, hora_formatada, idioma)
            url_base = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendMessage"
            
            # Registrar envio nos logs
            BOT2_LOGGER.info(f"[{horario_atual}] Enviando sinal: Ativo={ativo}, Direção={direcao}, Categoria={categoria}, Tempo={tempo_expiracao_minutos}, Idioma={idioma}")
            
            try:
                resposta = requests.post(url_base, json={
                    "chat_id": chat_id,
                    "text": mensagem_formatada,
                    "parse_mode": "HTML",
                    "disable_web_page_preview": True
                }, timeout=10)
                
                if resposta.status_code == 200:
                    BOT2_LOGGER.info(f"[{horario_atual}] ✓ SINAL ENVIADO COM SUCESSO para o canal {chat_id}")
                else:
                    BOT2_LOGGER.error(f"[{horario_atual}] ✗ Erro ao enviar mensagem para o canal {chat_id}: {resposta.text}")
            except Exception as msg_error:
                BOT2_LOGGER.error(f"[{horario_atual}] ✗ Exceção ao enviar mensagem para o canal {chat_id}: {str(msg_error)}")
        
        # Incrementa o contador global de sinais
        bot2_contador_sinais += 1
        
        # ALTERADO: Agendar o gif pós-sinal para 7 minutos após a expiração (5 minutos + 7 minutos)
        # Tempo total = tempo_expiracao_minutos + 7 minutos após expiração
        tempo_pos_sinal = tempo_expiracao_minutos + 7
        
        # Calcular a hora exata para o envio do GIF pós-sinal (hora atual + tempo_pos_sinal minutos)
        horario_pos_sinal = agora + timedelta(minutes=tempo_pos_sinal)
        hora_pos_sinal_str = horario_pos_sinal.strftime("%H:%M")
        
        BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: Agendando GIF pós-sinal para {hora_pos_sinal_str} (daqui a {tempo_pos_sinal} minutos)")
        BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: Tempo de expiração do sinal: {tempo_expiracao_minutos} minutos + 7 minutos de atraso = {tempo_pos_sinal} minutos total")
        
        # Limpar quaisquer agendamentos anteriores para o GIF pós-sinal
        schedule.clear('bot2_pos_sinal')
        
        # Verificar se deve enviar o GIF imediatamente (para testes)
        if enviar_gif_imediatamente:
            BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: Opção de envio imediato ativada - enviando GIF agora...")
            bot2_enviar_gif_pos_sinal()
        else:
            # Agendar para uma hora específica em vez de um intervalo relativo
            scheduler_job = schedule.every().day.at(hora_pos_sinal_str).do(bot2_enviar_gif_pos_sinal).tag('bot2_pos_sinal')
            
            # Verificar se o agendamento foi bem-sucedido
            if scheduler_job:
                BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: Agendamento criado com sucesso: {scheduler_job}")
                
                # Listar todos os trabalhos agendados para verificar
                jobs = schedule.get_jobs()
                BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: Total de trabalhos agendados: {len(jobs)}")
                for i, job in enumerate(jobs):
                    BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: Trabalho {i+1}: {job} - Próxima execução: {job.next_run}")
            else:
                BOT2_LOGGER.error(f"[{horario_atual}] 🎬 LOG GIF: FALHA ao criar agendamento para o GIF pós-sinal!")
        
        return True
    
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao enviar sinal: {str(e)}")
        traceback.print_exc()
        return False

def bot2_iniciar_ciclo_sinais():
    """
    Agenda o envio de sinais do Bot 2 a cada hora no minuto 13.
    """
    global bot2_sinais_agendados
    
    try:
        # Limpar agendamentos anteriores se houver
        schedule.clear()
        
        # Configurar para enviar apenas no minuto 13 de cada hora
        minuto_envio = 13
        
        # Agendar a cada hora no minuto 13
        schedule.every().hour.at(f":{minuto_envio:02d}").do(bot2_send_message).tag('bot2_sinais')
        BOT2_LOGGER.info(f"Sinal do Bot 2 agendado para minuto {minuto_envio} de cada hora")
        BOT2_LOGGER.info("Configuração atual: 1 sinal por hora, apenas ativos Digital, expiração de 5 minutos")
        
        # Contar quantos ativos da categoria Digital estão disponíveis
        ativos_digital = len(ATIVOS_CATEGORIAS["Digital"])
        BOT2_LOGGER.info(f"Total de ativos da categoria Digital disponíveis: {ativos_digital}")
        
        bot2_sinais_agendados = True
        BOT2_LOGGER.info("Ciclo de sinais do Bot 2 iniciado com sucesso")
        
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao iniciar ciclo de sinais do Bot 2: {str(e)}")
        bot2_sinais_agendados = False
        raise

# Funo para manter o Bot 2 em execuo
def iniciar_ambos_bots():
    """
    Inicializa ambos os bots (Bot 1 e Bot 2) e mantém o programa em execução,
    tratando as tarefas agendadas periodicamente.
    """
    global bot2_sinais_agendados
    
    try:
        # Iniciar o Bot 2
        if not bot2_sinais_agendados:
            bot2_iniciar_ciclo_sinais()  # Agendar sinais para o Bot 2
            
        BOT2_LOGGER.info("=== BOT 2 INICIADO COM SUCESSO! ===")
        BOT2_LOGGER.info("Aguardando envio de sinais nos horários programados...")
        
        # Teste inicial: enviar um sinal imediatamente com GIF (descomentar apenas para teste)
        # bot2_send_message(enviar_gif_imediatamente=True)
        
        # Loop principal para manter o programa em execução
        while True:
            # Registrar todas as tarefas pendentes a cada 5 minutos (apenas para diagnóstico)
            agora = bot2_obter_hora_brasilia()
            if agora.minute % 5 == 0 and agora.second == 0:
                jobs = schedule.get_jobs()
                BOT2_LOGGER.info(f"[{agora.strftime('%H:%M:%S')}] 🔄 DIAGNÓSTICO: Verificando {len(jobs)} tarefas agendadas")
                for i, job in enumerate(jobs):
                    BOT2_LOGGER.info(f"[{agora.strftime('%H:%M:%S')}] 🔄 DIAGNÓSTICO: Tarefa {i+1}: {job} - Próxima execução: {job.next_run}")
            
            # Executar tarefas agendadas
            pending_jobs = schedule.get_jobs()
            if pending_jobs:
                BOT2_LOGGER.debug(f"Executando {len(pending_jobs)} tarefas agendadas")
            schedule.run_pending()
            
            # Pequena pausa para evitar uso excessivo de CPU
            time.sleep(1)

    except KeyboardInterrupt:
        BOT2_LOGGER.info("Bots encerrados pelo usuário (Ctrl+C)")
    except Exception as e:
        BOT2_LOGGER.error(f"Erro na execução dos bots: {str(e)}")
        import traceback
        BOT2_LOGGER.error(traceback.format_exc())
        raise

# Executar se este arquivo for o script principal
if __name__ == "__main__":
    try:
        print("=== INICIANDO O BOT TELEGRAM ===")
        print(f"Diretrio base: {BASE_DIR}")
        print(f"Diretrio de vdeos: {VIDEOS_DIR}")
        print(f"Diretrio de GIFs especiais: {VIDEOS_ESPECIAL_DIR}")
        print(f"Arquivo GIF especial PT: {VIDEO_GIF_ESPECIAL_PT}")
        
        # Informações sobre a configuração atual
        print("=== CONFIGURAÇÃO ATUAL DO BOT ===")
        print("- Enviando apenas 1 sinal por hora (no minuto 13)")
        print("- Usando apenas ativos da categoria Digital")
        print("- Tempo de expiração fixo em 5 minutos")
        print("- GIF pós-sinal agendado para 7 minutos após o sinal (expiração + 2 min)")
        print("================================")
        
        # Exibir caminhos das imagens ps-sinal
        print(f"Caminho da imagem ps-sinal padro (PT): {os.path.join(VIDEOS_POS_SINAL_DIR, 'pt', 'padrao.jpg')}")
        print(f"Caminho da imagem ps-sinal especial (PT): {os.path.join(VIDEOS_POS_SINAL_DIR, 'pt', 'especial.jpg')}")
        print(f"Caminho da imagem ps-sinal padro (EN): {os.path.join(VIDEOS_POS_SINAL_DIR, 'en', 'padrao.jpg')}")
        print(f"Caminho da imagem ps-sinal especial (EN): {os.path.join(VIDEOS_POS_SINAL_DIR, 'en', 'especial.jpg')}")
        print(f"Caminho da imagem ps-sinal padro (ES): {os.path.join(VIDEOS_POS_SINAL_DIR, 'es', 'padrao.jpg')}")
        print(f"Caminho da imagem ps-sinal especial (ES): {os.path.join(VIDEOS_POS_SINAL_DIR, 'es', 'especial.jpg')}")
        
        # Verificar se os diretrios existem
        print(f"Verificando pastas:")
        print(f"VIDEOS_DIR existe: {os.path.exists(VIDEOS_DIR)}")
        print(f"VIDEOS_POS_SINAL_DIR existe: {os.path.exists(VIDEOS_POS_SINAL_DIR)}")
        print(f"VIDEOS_POS_SINAL_PT_DIR existe: {os.path.exists(VIDEOS_POS_SINAL_PT_DIR)}")
        print(f"VIDEOS_ESPECIAL_DIR existe: {os.path.exists(VIDEOS_ESPECIAL_DIR)}")
        print(f"VIDEOS_ESPECIAL_PT_DIR existe: {os.path.exists(VIDEOS_ESPECIAL_PT_DIR)}")
        
        # Criar pastas se no existirem
        os.makedirs(VIDEOS_DIR, exist_ok=True)
        os.makedirs(VIDEOS_ESPECIAL_DIR, exist_ok=True)
        os.makedirs(VIDEOS_ESPECIAL_PT_DIR, exist_ok=True)
        os.makedirs(VIDEOS_POS_SINAL_DIR, exist_ok=True)
        os.makedirs(VIDEOS_POS_SINAL_PT_DIR, exist_ok=True)
        os.makedirs(VIDEOS_POS_SINAL_EN_DIR, exist_ok=True)
        os.makedirs(VIDEOS_POS_SINAL_ES_DIR, exist_ok=True)

        # TESTE: Enviar um GIF diretamente para testar
        print("=== TESTE MANUAL DE ENVIO DE GIF ===")
        print("Enviando um teste do GIF pós-sinal diretamente...")
        # Inicializar os logs
        BOT2_LOGGER.info("=== INICIANDO TESTE MANUAL DE ENVIO DE GIF ===")
        
        # Testar o envio direto do GIF
        teste_result = bot2_enviar_gif_pos_sinal()
        if teste_result:
            print("✓ Teste de envio de GIF realizado com sucesso!")
            BOT2_LOGGER.info("✓ Teste de envio de GIF realizado com sucesso!")
        else:
            print("✗ Falha no teste de envio de GIF!")
            BOT2_LOGGER.error("✗ Falha no teste de envio de GIF!")
            
        print("=== FIM DO TESTE MANUAL ===")
        
        # Iniciar os bots
        iniciar_ambos_bots()
    except Exception as e:
        print(f"Erro ao iniciar bots: {str(e)}")
        traceback.print_exc()

# Função para verificar se uma URL de GIF é válida
def verificar_url_gif(url):
    """Verifica se uma URL de GIF é válida e retorna a URL corrigida se necessário."""
    try:
        BOT2_LOGGER.info(f"Verificando URL do GIF: {url}")
        
        # Tentar obter o cabeçalho da URL para verificar se está acessível
        resposta = requests.head(url, timeout=5)
        
        # Se a URL estiver acessível, retornar a mesma URL
        if resposta.status_code == 200:
            BOT2_LOGGER.info(f"URL do GIF válida: {url}")
            return url, True
        
        # Se a URL não estiver acessível, tentar alternativas
        BOT2_LOGGER.warning(f"URL do GIF inacessível: {url} (Código: {resposta.status_code})")
        
        # Tentar substituir "raw.githubusercontent.com" por "github.com/raw"
        if "raw.githubusercontent.com" in url:
            url_alt = url.replace("raw.githubusercontent.com", "github.com").replace("/main/", "/raw/main/")
            try:
                resposta_alt = requests.head(url_alt, timeout=5)
                if resposta_alt.status_code == 200:
                    BOT2_LOGGER.info(f"URL alternativa do GIF válida: {url_alt}")
                    return url_alt, True
            except Exception as e:
                BOT2_LOGGER.error(f"Erro ao verificar URL alternativa: {str(e)}")
        
        # Tentar sem o prefixo "raw.githubusercontent.com"
        if "raw.githubusercontent.com" in url:
            partes = url.split("raw.githubusercontent.com")
            if len(partes) > 1:
                caminho_arquivo = partes[1]
                url_alt2 = f"https://github.com{caminho_arquivo.replace('/main/', '/blob/main/')}"
                try:
                    resposta_alt2 = requests.head(url_alt2, timeout=5)
                    if resposta_alt2.status_code == 200:
                        BOT2_LOGGER.info(f"Segunda URL alternativa do GIF válida: {url_alt2}")
                        return url_alt2, True
                except Exception as e:
                    BOT2_LOGGER.error(f"Erro ao verificar segunda URL alternativa: {str(e)}")
        
        # Corrigir especificamente URLs para GIFs em português com caracteres especiais
        if "padrão.gif" in url:
            url_corrigida = url.replace("padrão.gif", "padrao.gif")
            BOT2_LOGGER.info(f"Tentando URL corrigida (sem acentos): {url_corrigida}")
            try:
                resposta_corrigida = requests.head(url_corrigida, timeout=5)
                if resposta_corrigida.status_code == 200:
                    BOT2_LOGGER.info(f"URL corrigida sem acentos válida: {url_corrigida}")
                    return url_corrigida, True
            except Exception as e:
                BOT2_LOGGER.error(f"Erro ao verificar URL corrigida sem acentos: {str(e)}")
        
        # Se todas as tentativas falharem, retornar a URL original e False
        BOT2_LOGGER.warning(f"Todas as tentativas de validação de URL falharam. Retornando URL original.")
        return url, False
    
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao verificar URL do GIF: {str(e)}")
        return url, False
