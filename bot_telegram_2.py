# -*- coding: utf-8 -*-
"""
Bot Telegram 2 para envio de sinais em canais separados por idioma.
Versão independente que não depende mais do Bot 1.
Os sinais serão enviados da seguinte forma:
- Canal Português: -1002424874613
- Canal Inglês: -1002453956387
- Canal Espanhol: -1002446547846
O bot enviará 1 sinal por hora no minuto 13.
"""

# Importaes necessrias
import traceback
import socket
import pytz
from datetime import datetime, timedelta, time as dt_time
import json
import random
import time
import schedule
import requests
import logging
import sys
import os
from functools import lru_cache
import telebot

# Definição da variável global assets
assets = {}

# Definição de outras variáveis globais
ultimo_ativo = None
ultimo_signal = None

# Configuração do logger específico para o Bot 2
BOT2_LOGGER = logging.getLogger("bot2")
BOT2_LOGGER.setLevel(logging.INFO)
bot2_formatter = logging.Formatter(
    "%(asctime)s - BOT2 - %(levelname)s - %(message)s")

# Evitar duplicação de handlers
if not BOT2_LOGGER.handlers:
    bot2_file_handler = logging.FileHandler("bot_telegram_bot2_logs.log")
    bot2_file_handler.setFormatter(bot2_formatter)
    BOT2_LOGGER.addHandler(bot2_file_handler)

    bot2_console_handler = logging.StreamHandler()
    bot2_console_handler.setFormatter(bot2_formatter)
    BOT2_LOGGER.addHandler(bot2_console_handler)

# Credenciais Telegram
BOT2_TOKEN = "7997585882:AAFDyG-BYskj1gyAbh17X5jd6DDClXdluww"

# Inicialização do bot
bot2 = telebot.TeleBot(BOT2_TOKEN)

# Configuração dos canais para cada idioma
BOT2_CANAIS_CONFIG = {
    "pt": ["-1002424874613"],  # Canal para mensagens em português
    "en": ["-1002453956387"],  # Canal para mensagens em inglês
    "es": ["-1002446547846"]   # Canal para mensagens em espanhol
}

# Configurações adicionais por idioma
CONFIGS_IDIOMA = {
    "pt": {
        "link_corretora": "https://trade.xxbroker.com/register?aff=741613&aff_model=revenue&afftrack=",
        "fuso_horario": "America/Sao_Paulo",  # Brasil (UTC-3)
    },
    "en": {
        "link_corretora": "https://trade.xxbroker.com/register?aff=741727&aff_model=revenue&afftrack=",
        "fuso_horario": "America/New_York",  # EUA (UTC-5 ou UTC-4 no horário de verão)
    },
    "es": {
        "link_corretora": "https://trade.xxbroker.com/register?aff=741726&aff_model=revenue&afftrack=",
        "fuso_horario": "Europe/Madrid",  # Espanha (UTC+1 ou UTC+2 no horário de verão)
    }
}

# Lista de IDs dos canais para facilitar iterao
BOT2_CHAT_IDS = []
for idioma, chats in BOT2_CANAIS_CONFIG.items():
    BOT2_CHAT_IDS.extend(chats)

# Base URL do GitHub para os arquivos
GITHUB_BASE_URL = "https://raw.githubusercontent.com/IgorElion/-TelegramBot/main/"

# Dicionário de mapeamento de caminhos dos GIFs válidos
GIFS_VALIDOS = {
    "gif_especial_pt": "videos/gif_especial/pt/especial.gif",
    "pos_sinal_pt": "videos/pos_sinal/pt/padrao.gif",
    "pos_sinal_en": "videos/pos_sinal/en/padrao.gif",
    "pos_sinal_es": "videos/pos_sinal/es/padrao.gif",
    "promo_pt": "videos/promo/pt/promo.gif",
    "promo_en": "videos/promo/en/promo.gif",
    "promo_es": "videos/promo/es/promo.gif",
}

# URLs alternativas para GIFs (utilizadas apenas na verificação)
ALTERNATIVE_GIFS = {}

# URLs diretas para GIFs do Giphy
URLS_GIFS_DIRETAS = {
    "promo_pt": "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExaWVtYnVhamd3bm01OXZyNmYxYTdteDljNDFrMGZybWx1dXJkbmo2cyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/PDTiu190mvjkifkbG5/giphy.gif",
    "promo_en": "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExaWVtYnVhamd3bm01OXZyNmYxYTdteDljNDFrMGZybWx1dXJkbmo2cyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/PDTiu190mvjkifkbG5/giphy.gif",
    "promo_es": "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExaWVtYnVhamd3bm01OXZyNmYxYTdteDljNDFrMGZybWx1dXJkbmo2cyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/PDTiu190mvjkifkbG5/giphy.gif",
    "pos_sinal_padrao": "https://raw.githubusercontent.com/IgorElion/-TelegramBot/main/videos/pos_sinal/pt/180398513446716419%20(7).webp",
    "gif_especial_pt": "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExN2tzdzB4bjNjaWo4bm9zdDR3d2g4bmQzeHRqcWx6MTQxYTA1cjRoeCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/E2EknXAKA5ac8gKVxu/giphy.gif"
}

# ID para compatibilidade com cdigo existente
BOT2_CHAT_ID_CORRETO = BOT2_CHAT_IDS[0]  # Usar o primeiro canal como padro

# Limite de sinais por hora
BOT2_LIMITE_SINAIS_POR_HORA = 1

# Categorias de ativos
ATIVOS_CATEGORIAS = {
    "Binary": [],
    "Blitz": [],
    "Digital": [
        "Gold/Silver (OTC)",
        "Worldcoin (OTC)",
        "USD/THB (OTC)",
        "ETH/USD (OTC)",
        "CHF/JPY (OTC)",
        "Pepe (OTC)",
        "GBP/AUD (OTC)",
        "GBP/CHF",
        "GBP/CAD (OTC)",
        "EUR/JPY (OTC)",
        "AUD/CHF",
        "GER 30 (OTC)",
        "AUD/CHF (OTC)",
        "EUR/AUD",
        "USD/CAD (OTC)",
        "BTC/USD",
        "Amazon/Ebay (OTC)",
        "Coca-Cola Company (OTC)",
        "AIG (OTC)",
        "Amazon/Alibaba (OTC)",
        "Bitcoin Cash (OTC)",
        "AUD/USD",
        "DASH (OTC)",
        "BTC/USD (OTC)",
        "SP 35 (OTC)",
        "TRUMP Coin (OTC)",
        "US 100 (OTC)",
        "EUR/CAD (OTC)",
        "HK 33 (OTC)",
        "Alphabet/Microsoft (OTC)",
        "1000Sats (OTC)",
        "USD/ZAR (OTC)",
        "Litecoin (OTC)",
        "Hamster Kombat (OTC)",
        "USD Currency Index (OTC)",
        "AUS 200 (OTC)",
        "USD/CAD",
        "USD/JPY",
        "MELANIA Coin (OTC)",
        "JP 225 (OTC)",
        "AUD/CAD (OTC)",
        "AUD/JPY (OTC)",
        "US 500 (OTC)",
    ],
}

# Configurações de horários específicos para cada ativo
HORARIOS_PADRAO = {
    "USD/BRL_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-00:45", "01:15-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "USOUSD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-06:00", "06:30-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "BTC/USD_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Google_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "EUR/JPY_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "ETH/USD_OTC": {
        "Monday": ["00:00-19:45", "20:15-23:59"],
        "Tuesday": ["00:00-19:45", "20:15-23:59"],
        "Wednesday": ["00:00-19:45", "20:15-23:59"],
        "Thursday": ["00:00-19:45", "20:15-23:59"],
        "Friday": ["00:00-19:45", "20:15-23:59"],
        "Saturday": ["00:00-19:45", "20:15-23:59"],
        "Sunday": ["00:00-19:45", "20:15-23:59"],
    },
    "MELANIA_COIN_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "EUR/GBP_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "Apple_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "Amazon_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "TRUM_Coin_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Nike_Inc_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "DOGECOIN_OTC": {
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
    },
    "Tesla_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "SOL/USD_OTC": {
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
    },
    "1000Sats_OTC": {
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "XAUUSD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-06:00", "06:30-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "McDonalds_Corporation_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Meta_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "Coca_Cola_Company_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "CARDANO_OTC": {
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
    },
    "EUR/USD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "PEN/USD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-00:45", "01:15-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "Bitcoin_Cash_OTC": {
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "AUD/CAD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "Tesla/Ford_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "US_100_OTC": {
        "Monday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Tuesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Wednesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Thursday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
    },
    "FR_40_OTC": {  # Novo horrio para FR 40 (OTC)
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "AUS_200_OTC": {  # Atualizado com horrios especficos
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
    },
    "US_500_OTC": {  # Atualizado com horrios especficos
        "Monday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Tuesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Wednesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Thursday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
    },
    "EU_50_OTC": {  # Novo ativo com horrios especficos
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Gold": {  # Novo ativo com horrios especficos
        "Monday": ["04:00-16:00"],
        "Tuesday": ["04:00-16:00"],
        "Wednesday": ["04:00-16:00"],
        "Thursday": ["04:00-16:00"],
        "Friday": ["04:00-16:00"],
        "Saturday": [],
        "Sunday": [],
    },
    "XAUUSD_OTC": {  # Atualizado com horrios especficos
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-06:00", "06:10-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "US2000_OTC": {  # Novo ativo com horrios especficos
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Gala_OTC": {  # Novo horrio especfico para Gala (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Floki_OTC": {  # Novo horrio especfico para Floki (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Graph_OTC": {  # Novo horrio especfico para Graph (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Intel_IBM_OTC": {  # Novo horrio para Intel/IBM (OTC)
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Pyth_OTC": {  # Atualizado para Pyth (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "IOTA_OTC": {  # Atualizado para IOTA (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "DOGECOIN_OTC": {  # Atualizado para DOGECOIN (OTC)
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
    },
    "Sei_OTC": {  # Atualizado para Sei (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Decentraland_OTC": {  # Atualizado para Decentraland (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "PEN_USD_OTC": {  # Atualizado para PEN/USD (OTC)
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-00:45", "01:15-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "Sandbox_OTC": {  # Atualizado para Sandbox (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "TRON_USD_OTC": {  # Atualizado para TRON/USD (OTC)
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
    },
    "Ripple_OTC": {  # Atualizado para Ripple (OTC)
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
    },
    "NEAR_OTC": {  # Atualizado para NEAR (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Arbitrum_OTC": {  # Atualizado para Arbitrum (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Polygon_OTC": {  # Atualizado para Polygon (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "EOS_OTC": {  # Atualizado para EOS (OTC)
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
    },
    "Alphabet_Microsoft_OTC": {  # Novo horrio para Alphabet/Microsoft (OTC)
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Jupiter_OTC": {  # Atualizado para Jupiter (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Dogwifhat_OTC": {  # Novo horrio para Dogwifhat (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Immutable_OTC": {  # Atualizado para Immutable (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Stacks_OTC": {  # Atualizado para Stacks (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Pepe_OTC": {  # Atualizado para Pepe (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Ronin_OTC": {  # Atualizado para Ronin (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
    },
    "Gold/Silver_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Worldcoin_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "USD/THB_OTC": {
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
    },
    "ETH/USD_OTC": {
        "Monday": ["00:00-19:45", "20:15-23:59"],
        "Tuesday": ["00:00-19:45", "20:15-23:59"],
        "Wednesday": ["00:00-19:45", "20:15-23:59"],
        "Thursday": ["00:00-19:45", "20:15-23:59"],
        "Friday": ["00:00-19:45", "20:15-23:59"],
        "Saturday": ["00:00-19:45", "20:15-23:59"],
        "Sunday": ["00:00-19:45", "20:15-23:59"],
    },
    "CHF/JPY_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Pepe_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "GBP/AUD_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "GBP/CHF": {
        "Monday": ["00:00-16:00"],
        "Tuesday": ["00:00-16:00"],
        "Wednesday": ["00:00-16:00"],
        "Thursday": ["00:00-16:00"],
        "Friday": ["00:00-14:00"],
                "Saturday": [],
        "Sunday": [],
    },
    "GBP/CAD_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "EUR/JPY_OTC": {
                "Monday": ["00:00-23:59"],
                "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
                "Thursday": ["00:00-23:59"],
                "Friday": ["00:00-23:59"],
                "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"],
    },
    "AUD/CHF": {
        "Monday": ["00:00-16:00"],
        "Tuesday": ["00:00-16:00"],
        "Wednesday": ["00:00-16:00"],
        "Thursday": ["00:00-16:00"],
        "Friday": ["00:00-14:00"],
                "Saturday": [],
        "Sunday": [],
    },
    "GER_30_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "AUD/CHF_OTC": {
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
    },
    "EUR/AUD": {
        "Monday": ["00:00-16:00"],
        "Tuesday": ["00:00-16:00"],
        "Wednesday": ["00:00-16:00"],
        "Thursday": ["00:00-16:00"],
        "Friday": ["00:00-14:00"],
                "Saturday": [],
        "Sunday": [],
    },
    "USD/CAD_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "BTC/USD": {
        "Monday": ["03:00-15:00"],
        "Tuesday": ["03:00-15:00"],
        "Wednesday": ["03:00-15:00"],
        "Thursday": ["03:00-15:00"],
        "Friday": ["03:00-15:00"],
        "Saturday": [],
        "Sunday": [],
    },
    "Amazon/Ebay_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Coca-Cola_Company_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "AIG_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Amazon/Alibaba_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "Bitcoin_Cash_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "USD Currency Index_OTC": {
        "Monday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-10:00", "10:30-18:00"],
        "Saturday": [],
        "Sunday": ["19:00-23:59"],
    },
    "AUS_200_OTC": {  # J existe, mas atualizando para os novos horrios
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
    },
    "USD/CAD": {
        "Monday": ["03:00-15:00"],
        "Tuesday": ["03:00-15:00", "21:00-23:59"],
        "Wednesday": ["00:00-15:00"],
        "Thursday": ["03:00-15:00"],
        "Friday": ["03:00-15:00"],
        "Saturday": [],
        "Sunday": [],
    },
    "USD/JPY": {
        "Monday": ["00:00-14:00", "23:00-23:59"],
        "Tuesday": ["00:00-14:00", "23:00-23:59"],
        "Wednesday": ["00:00-14:00", "23:00-23:59"],
        "Thursday": ["00:00-14:00", "23:00-23:59"],
        "Friday": ["00:00-14:00"],
        "Saturday": [],
        "Sunday": ["23:00-23:59"],
    },
    "MELANIA_Coin_OTC": {  # J existe, mantendo a mesma configurao
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "JP_225_OTC": {
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
    },
    "AUD/CAD_OTC": {  # J existe, atualizando a configurao
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
    },
    "AUD/JPY_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
    },
    "US_500_OTC": {  # J existe, atualizando a configurao
        "Monday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Tuesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Wednesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Thursday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
                "Friday": ["00:00-23:59"],
                "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
    },
}

# URLs diretas para GIFs
URLS_GIFS_DIRETAS = {
    "promo_pt": "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExdnVvZ203ZXphMXc5N2dwMm1uaDk4Nmp4Z3A1OGkwZnd0a2JtdHo1bCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/1Q3HkjW2vvNTfAnPA4/giphy.gif",
    "promo_en": "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExbnJqZDV6OWJsd2xtOXpvMjduMDB3Nnc1dG8zZG40NzY5aGtsMHV0OSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/Btx7R7ul9qaeCt8eEk/giphy.gif",
    "promo_es": "https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExMGY5aG93cTV4NWg2dzM2anpmaWd5ajlqenkwcjd3bXVjdG0wYnlmYSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/5IG2JKmARkpsfMkp4z/giphy.gif",
    "pos_sinal_padrao": "https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExdjZjb3hyMDVqOHAyb2xvZTgxZzVpb2ZscWE3M2RzOHY5Z3VzZTc2YiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/eWbGux0IXOygZ7m2Of/giphy.gif",
    "gif_especial_pt": "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExN2tzdzB4bjNjaWo4bm9zdDR3d2g4bmQzeHRqcWx6MTQxYTA1cjRoeCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/E2EknXAKA5ac8gKVxu/giphy.gif"
}

# Adicionar variável global para controlar mensagem de perda enviada por dia
mensagem_perda_enviada_hoje = False

# Variáveis para controle de sinais
ultimo_sinal_enviado = None

def adicionar_blitz(lista_ativos):
    for ativo in lista_ativos:
        if ativo in HORARIOS_PADRAO:
            assets[ativo] = HORARIOS_PADRAO[ativo]
        else:
            assets[ativo] = {
                "Monday": ["00:00-23:59"],
                "Tuesday": ["00:00-23:59"],
                "Wednesday": ["00:00-23:59"],
                "Thursday": ["00:00-23:59"],
                "Friday": ["00:00-23:59"],
                "Saturday": ["00:00-23:59"],
                "Sunday": ["00:00-23:59"],
            }
        ATIVOS_CATEGORIAS[ativo] = "Blitz"


# Exemplos de como adicionar ativos (comentado para referncia)
# adicionar_forex(["EUR/USD", "GBP/USD"])
# adicionar_crypto(["BTC/USD", "ETH/USD"])
# adicionar_stocks(["AAPL", "MSFT"])

# Funo para parsear os horrios


@lru_cache(maxsize=128)
def parse_time_range(time_str):
    """
    Converte uma string de intervalo de tempo (e.g. "09:30-16:00") para um par de time objects.
    """
    start_str, end_str = time_str.split("-")
    start_time = datetime.strptime(start_str, "%H:%M").time()
    end_time = datetime.strptime(end_str, "%H:%M").time()
    return start_time, end_time


# Funo para verificar disponibilidade de ativos


def is_asset_available(asset, current_time=None, current_day=None):
    """
    Verifica se um ativo está disponível para negociação em um determinado horário.

    Args:
        asset (str): O nome do ativo a ser verificado.
        current_time (datetime, optional): O horário atual. Se None, usará o horário atual do sistema.
        current_day (str, optional): O dia atual. Se None, será determinado a partir do horário atual.

    Returns:
        bool: True se o ativo estiver disponível, False caso contrário.
    """
    # Se o horário atual não foi fornecido, usar o horário de Brasília
    if current_time is None:
        current_time = bot2_obter_hora_brasilia()

    # Determinar o dia da semana atual
    if current_day is None:
        # segunda-feira, terça-feira, etc.
        current_day = current_time.strftime("%A")

    # Transformar o horário atual em um formato de string para comparação
    current_time_str = current_time.strftime("%H:%M")

    # Se o ativo tiver um horário personalizado, verificar nesse horário
    asset_key = asset.replace(" ", "_").replace("/", "_")
    if asset_key in HORARIOS_PADRAO:
        day_ranges = HORARIOS_PADRAO[asset_key].get(current_day, [])
        if not day_ranges:
            return False  # Se não há horários definidos para este dia, o ativo não está disponível

        # Verificar se o horário atual está dentro de algum dos intervalos
        # definidos
        for time_range in day_ranges:
            start_time, end_time = time_range.split("-")
            if start_time <= current_time_str <= end_time:
                return True

        return False  # Se não está em nenhum intervalo, não está disponível

    # Se o ativo não tem um horário específico definido, ele está sempre
    # disponível
    return True


def bot2_verificar_horario_ativo(ativo, categoria):
    """
    Verifica se um ativo está disponível no horário atual.

    Args:
        ativo (str): O nome do ativo a verificar
        categoria (str): A categoria do ativo (Binary, Blitz, Digital)

    Returns:
        bool: True se o ativo estiver disponível, False caso contrário
    """
    # Obter o horário atual em Brasília
    agora = bot2_obter_hora_brasilia()
    dia_semana = agora.strftime("%A")

    # Verificar disponibilidade usando a função is_asset_available
    return is_asset_available(ativo, agora, dia_semana)


# Funo para obter hora no fuso horário de Brasília (específica para Bot 2)


def bot2_obter_hora_brasilia():
    """
    Retorna a hora atual no fuso horário de Brasília.
    """
    fuso_horario_brasilia = pytz.timezone("America/Sao_Paulo")
    return datetime.now(fuso_horario_brasilia)


def bot2_verificar_disponibilidade():
    """
    Verifica quais ativos estão disponíveis no momento da verificação.
    Retorna uma lista de ativos da categoria Digital disponíveis.
    """
    ativos_disponiveis = []

    # Obter hora atual no fuso horário de Brasília
    agora = bot2_obter_hora_brasilia()
    dia_atual = agora.strftime("%A")
    hora_atual = agora.strftime("%H:%M")

    BOT2_LOGGER.info(
        f"Verificando disponibilidade para o dia {dia_atual} às {hora_atual}"
    )

    # Filtrar apenas ativos da categoria Digital
    ativos_digital = [ativo for ativo in ATIVOS_CATEGORIAS["Digital"]]

    if not ativos_digital:
        BOT2_LOGGER.warning("Nenhum ativo na categoria Digital encontrado!")
        return []

    BOT2_LOGGER.info(
        f"Total de ativos na categoria Digital: {len(ativos_digital)}"
    )

    # Verificar disponibilidade de cada ativo
    for ativo in ativos_digital:
        if is_asset_available(ativo, hora_atual, dia_atual):
            ativos_disponiveis.append(ativo)

    BOT2_LOGGER.info(
        f"Ativos disponíveis no momento ({len(ativos_disponiveis)}): {ativos_disponiveis}"
    )

    return ativos_disponiveis


def bot2_gerar_sinal_aleatorio():
    """Gera um sinal de trading aleatório com base nas categorias disponíveis."""
    global assets

    try:
        # Obter a hora atual em Brasília
        agora = bot2_obter_hora_brasilia()

        # Selecionar apenas uma categoria para todos os sinais (Digital)
        categoria = "Digital"

        # Verificar se há ativos disponíveis na categoria selecionada
        ativos_na_categoria = ATIVOS_CATEGORIAS[categoria]

        if not ativos_na_categoria:
            BOT2_LOGGER.warning(
                f"Nenhum ativo disponível na categoria {categoria}")
            return None

        # Escolher aleatoriamente um ativo da categoria
        ativo = random.choice(ativos_na_categoria)

        # Escolher aleatoriamente a direção (CALL ou PUT)
        direcao = random.choice(["CALL", "PUT"])

        # Definir o tempo de expiração fixo em 5 minutos para todos os sinais
        tempo_expiracao_minutos = 5
        expiracao_time = bot2_obter_hora_brasilia() + timedelta(
            minutes=tempo_expiracao_minutos
        )
        expiracao_texto = f"🕒 Expiração: {tempo_expiracao_minutos} minutos ({expiracao_time.strftime('%H:%M')})"

        # Registrar nos logs que um sinal foi gerado
        BOT2_LOGGER.info(
            f"Sinal gerado: Ativo={ativo}, Direção={direcao}, Expiração={tempo_expiracao_minutos}min, Categoria={categoria}"
        )

        # Retornar o sinal como um dicionário
        return {
            "ativo": ativo,
            "direcao": direcao,
            "tempo_expiracao_minutos": tempo_expiracao_minutos,
            "expiracao_texto": expiracao_texto,
            "categoria": categoria,
        }

    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao gerar sinal aleatório: {str(e)}")
        import traceback

        BOT2_LOGGER.error(traceback.format_exc())
        return None


# Funo para obter hora no fuso horário específico (a partir da hora de
# Brasília)


def bot2_converter_fuso_horario(hora_brasilia, fuso_destino):
    """
    Converte uma hora do fuso horário de Brasília para o fuso horário de destino.
    
    Args:
        hora_brasilia (datetime): Hora no fuso horário de Brasília
        fuso_destino (str): Nome do fuso horário de destino (ex: 'America/New_York')
        
    Returns:
        datetime: Hora convertida para o fuso horário de destino
    """
    # Garantir que hora_brasilia tenha informações de fuso horário
    fuso_horario_brasilia = pytz.timezone("America/Sao_Paulo")
    
    # Se a hora não tiver informação de fuso, adicionar
    if hora_brasilia.tzinfo is None:
        hora_brasilia = fuso_horario_brasilia.localize(hora_brasilia)
    
    # Converter para o fuso horário de destino
    fuso_destino_tz = pytz.timezone(fuso_destino)
    hora_destino = hora_brasilia.astimezone(fuso_destino_tz)
    
    return hora_destino


def bot2_formatar_mensagem(sinal, hora_formatada, idioma):
    """
    Formata a mensagem de sinal para envio, conforme o idioma especificado.
    """
    global BOT2_LOGGER, CONFIGS_IDIOMA

    try:
        # Extrair informações do sinal
        ativo = sinal["ativo"]
        direcao = sinal["direcao"]
        categoria = sinal["categoria"]
        tempo_expiracao_minutos = sinal["tempo_expiracao_minutos"]
        
        BOT2_LOGGER.info(
            f"Formatando mensagem com: ativo={ativo}, direção={direcao}, categoria={categoria}, tempo={tempo_expiracao_minutos}, idioma={idioma}"
        )

        # Configuração do fuso horário para esse idioma
        config_idioma = CONFIGS_IDIOMA.get(idioma, CONFIGS_IDIOMA["pt"])  # Usa PT como padrão se o idioma não existir
        fuso_horario = config_idioma.get("fuso_horario", "America/Sao_Paulo")
        link_corretora = config_idioma.get("link_corretora", "")

        # Formatação do nome do ativo para exibição
        nome_ativo_exibicao = (
            ativo.replace("Digital_", "") if ativo.startswith(
                "Digital_") else ativo
        )
        if "(OTC)" in nome_ativo_exibicao and not " (OTC)" in nome_ativo_exibicao:
            nome_ativo_exibicao = nome_ativo_exibicao.replace("(OTC)", " (OTC)")

        # Configura ações e emojis conforme a direção
        action_pt = "PUT" if direcao == "sell" else "CALL"
        action_en = "PUT" if direcao == "sell" else "CALL"
        action_es = "PUT" if direcao == "sell" else "CALL"
        emoji = "🟥" if direcao == "sell" else "🟩"

        # Encontrar o fuso horário adequado para o idioma
        fuso_horario = "America/Sao_Paulo"  # Padrão (Brasil)
        
        # Usar configuração de idioma diretamente
        if idioma in CONFIGS_IDIOMA:
            fuso_horario = CONFIGS_IDIOMA[idioma].get("fuso_horario", "America/Sao_Paulo")
        
        # Hora de entrada convertida para datetime no fuso horário de Brasília
        hora_entrada = datetime.strptime(hora_formatada, "%H:%M")
        hora_entrada_br = bot2_obter_hora_brasilia().replace(
            hour=hora_entrada.hour, minute=hora_entrada.minute, second=0, microsecond=0
        )
        
        # Converter para o fuso horário do canal
        hora_entrada_local = bot2_converter_fuso_horario(
            hora_entrada_br, fuso_horario)
        
        # Calcular horário de expiração no fuso horário de Brasília
        hora_expiracao_br = hora_entrada_br + \
            timedelta(minutes=tempo_expiracao_minutos)
        
        # Converter expiração para o fuso horário do canal
        hora_expiracao_local = bot2_converter_fuso_horario(
            hora_expiracao_br, fuso_horario)
        
        # Calcular horários de gale (reentrada) no fuso horário de Brasília
        # 1° GALE é o horário de expiração + 5 minutos
        hora_gale1_br = hora_expiracao_br + timedelta(minutes=5)
        # 2° GALE é o 1° GALE + 5 minutos
        hora_gale2_br = hora_gale1_br + timedelta(minutes=5)
        # 3° GALE é o 2° GALE + 5 minutos
        hora_gale3_br = hora_gale2_br + timedelta(minutes=5)
        
        # Converter gales para o fuso horário do canal
        hora_gale1_local = bot2_converter_fuso_horario(hora_gale1_br, fuso_horario)
        hora_gale2_local = bot2_converter_fuso_horario(hora_gale2_br, fuso_horario)
        hora_gale3_local = bot2_converter_fuso_horario(hora_gale3_br, fuso_horario)
        
        # Formatar os horários para exibição (no fuso horário local)
        hora_entrada_formatada = hora_entrada_local.strftime("%H:%M")
        hora_expiracao_formatada = hora_expiracao_local.strftime("%H:%M")
        hora_gale1_formatada = hora_gale1_local.strftime("%H:%M")
        hora_gale2_formatada = hora_gale2_local.strftime("%H:%M")
        hora_gale3_formatada = hora_gale3_local.strftime("%H:%M")
        
        # Registrar a conversão de fuso horário
        BOT2_LOGGER.info(
            f"Horários convertidos para fuso {fuso_horario}: Entrada={hora_entrada_formatada}, "
            + f"Expiração={hora_expiracao_formatada}, Gale1={hora_gale1_formatada}, "
            + f"Gale2={hora_gale2_formatada}, Gale3={hora_gale3_formatada}"
        )

        # Formatação para singular ou plural de "minuto" baseado no tempo de
        # expiração
        texto_minutos_pt = "minuto" if tempo_expiracao_minutos == 1 else "minutos"
        texto_minutos_en = "minute" if tempo_expiracao_minutos == 1 else "minutes"
        texto_minutos_es = "minuto" if tempo_expiracao_minutos == 1 else "minutos"

        # Configurar links baseados no idioma
        if idioma == "pt":
            link_corretora = (
                "https://trade.xxbroker.com/register?aff=741613&aff_model=revenue&afftrack="
            )
            link_video = "https://t.me/trendingbrazil/215"
            texto_corretora = "Clique para abrir a corretora"
            texto_video = "Clique aqui"
            texto_tempo = "TEMPO PARA"
            texto_gale1 = "1º GALE — TEMPO PARA"
            texto_gale2 = "2º GALE TEMPO PARA"
            texto_gale3 = "3º GALE TEMPO PARA"
        elif idioma == "en":
            link_corretora = (
                "https://trade.xxbroker.com/register?aff=741727&aff_model=revenue&afftrack="
            )
            link_video = "https://t.me/trendingenglish/226"
            texto_corretora = "Click to open broker"
            texto_video = "Click here"
            texto_tempo = "TIME UNTIL"
            texto_gale1 = "1st GALE — TIME UNTIL"
            texto_gale2 = "2nd GALE TIME UNTIL"
            texto_gale3 = "3rd GALE TIME UNTIL"
        else:  # espanhol
            link_corretora = (
                "https://trade.xxbroker.com/register?aff=741726&aff_model=revenue&afftrack="
            )
            link_video = "https://t.me/trendingespanish/212"
            texto_corretora = "Haga clic para abrir el corredor"
            texto_video = "Haga clic aquí"
            texto_tempo = "TIEMPO HASTA"
            texto_gale1 = "1º GALE — TIEMPO HASTA"
            texto_gale2 = "2º GALE TIEMPO HASTA"
            texto_gale3 = "3º GALE TIEMPO HASTA"
        
        # Determinar a categoria de exibição (Binary, Digital)
        categoria_exibicao = "Binary"
        if isinstance(categoria, list) and len(categoria) > 0:
            # Escolher apenas um item da lista para exibir (o primeiro)
            categoria_exibicao = categoria[0]
        else:
            categoria_exibicao = categoria  # Usar o valor de categoria diretamente

        # Mensagem em PT
        mensagem_pt = (
            f"💰{tempo_expiracao_minutos} {texto_minutos_pt} de expiração\n"
            f"{nome_ativo_exibicao};{hora_entrada_formatada};{action_pt} {emoji} {categoria_exibicao}\n\n"
                f"🕐{texto_tempo} {hora_expiracao_formatada}\n\n"
                f"{texto_gale1} {hora_gale1_formatada}\n"
                f"{texto_gale2} {hora_gale2_formatada}\n"
                f"{texto_gale3} {hora_gale3_formatada}\n\n"
            f'📲 <a href="{link_corretora}">{texto_corretora}</a>\n'
            f'🙋‍♂️ Não sabe operar ainda? <a href="{link_video}">{texto_video}</a>'
        )
                
        # Mensagem em EN
        mensagem_en = (
            f"💰{tempo_expiracao_minutos} {texto_minutos_en} expiration\n"
            f"{nome_ativo_exibicao};{hora_entrada_formatada};{action_en} {emoji} {categoria_exibicao}\n\n"
                f"🕐{texto_tempo} {hora_expiracao_formatada}\n\n"
                f"{texto_gale1} {hora_gale1_formatada}\n"
                f"{texto_gale2} {hora_gale2_formatada}\n"
                f"{texto_gale3} {hora_gale3_formatada}\n\n"
            f'📲 <a href="{link_corretora}">{texto_corretora}</a>\n'
            f'🙋‍♂️ Don\'t know how to trade yet? <a href="{link_video}">{texto_video}</a>'
        )
                
        # Mensagem em ES
        mensagem_es = (
            f"💰{tempo_expiracao_minutos} {texto_minutos_es} de expiración\n"
            f"{nome_ativo_exibicao};{hora_entrada_formatada};{action_es} {emoji} {categoria_exibicao}\n\n"
                f"🕐{texto_tempo} {hora_expiracao_formatada}\n\n"
                f"{texto_gale1} {hora_gale1_formatada}\n"
                f"{texto_gale2} {hora_gale2_formatada}\n"
                f"{texto_gale3} {hora_gale3_formatada}\n\n"
            f'📲 <a href="{link_corretora}">{texto_corretora}</a>\n'
            f'🙋‍♂️ ¿No sabe operar todavía? <a href="{link_video}">{texto_video}</a>'
        )
                
        # Verificar se há algum texto não esperado antes de retornar a mensagem
        if idioma == "pt":
            mensagem_final = mensagem_pt
        elif idioma == "en":
            mensagem_final = mensagem_en
        elif idioma == "es":
            mensagem_final = mensagem_es
        else:  # Padrão para qualquer outro idioma (português)
            mensagem_final = mensagem_pt
            
        BOT2_LOGGER.info(
            f"Mensagem formatada final para idioma {idioma}: {mensagem_final}")
        return mensagem_final

    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao formatar mensagem: {str(e)}")
        traceback.print_exc()
        return None


def bot2_registrar_envio(ativo, direcao, categoria):
    """
    Registra o envio de um sinal no banco de dados.
    Implementao futura: Aqui voc adicionaria o cdigo para registrar o envio no banco de dados.
    """
    pass


# Inicializao do Bot 2 quando este arquivo for executado
bot2_sinais_agendados = False
bot2_contador_sinais = 0  # Contador para rastrear quantos sinais foram enviados
BOT2_ATIVOS_CATEGORIAS = {}  # Inicialização de categorias de ativos

# URLs promocionais
XXBROKER_URL = (
    "https://trade.xxbroker.com/register?aff=741613&aff_model=revenue&afftrack="
)
VIDEO_TELEGRAM_URL = "https://t.me/trendingbrazil/215"
VIDEO_TELEGRAM_ES_URL = "https://t.me/trendingespanish/212"
VIDEO_TELEGRAM_EN_URL = "https://t.me/trendingenglish/226"

# Base directory para os arquivos do projeto
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# Definindo diretrios para os vdeos
VIDEOS_DIR = os.path.join(BASE_DIR, "videos")
os.makedirs(VIDEOS_DIR, exist_ok=True)

# Subdiretrios para organizar os vdeos
VIDEOS_POS_SINAL_DIR = os.path.join(VIDEOS_DIR, "pos_sinal")
VIDEOS_PROMO_DIR = os.path.join(VIDEOS_DIR, "promo")
# Alterado de "especial" para "gif_especial"
VIDEOS_ESPECIAL_DIR = os.path.join(VIDEOS_DIR, "gif_especial")

# Criar os subdiretrios se no existirem
os.makedirs(VIDEOS_POS_SINAL_DIR, exist_ok=True)
os.makedirs(VIDEOS_PROMO_DIR, exist_ok=True)
os.makedirs(VIDEOS_ESPECIAL_DIR, exist_ok=True)

# Diretrios para vdeos ps-sinal em cada idioma
VIDEOS_POS_SINAL_PT_DIR = os.path.join(VIDEOS_POS_SINAL_DIR, "pt")
VIDEOS_POS_SINAL_EN_DIR = os.path.join(VIDEOS_POS_SINAL_DIR, "en")
VIDEOS_POS_SINAL_ES_DIR = os.path.join(VIDEOS_POS_SINAL_DIR, "es")

# Diretrios para vdeos especiais em cada idioma
VIDEOS_ESPECIAL_PT_DIR = os.path.join(VIDEOS_ESPECIAL_DIR, "pt")
VIDEOS_ESPECIAL_EN_DIR = os.path.join(VIDEOS_ESPECIAL_DIR, "en")
VIDEOS_ESPECIAL_ES_DIR = os.path.join(VIDEOS_ESPECIAL_DIR, "es")

# Criar os subdiretrios para cada idioma se no existirem
os.makedirs(VIDEOS_POS_SINAL_PT_DIR, exist_ok=True)
os.makedirs(VIDEOS_POS_SINAL_EN_DIR, exist_ok=True)
os.makedirs(VIDEOS_POS_SINAL_ES_DIR, exist_ok=True)
os.makedirs(VIDEOS_ESPECIAL_PT_DIR, exist_ok=True)
os.makedirs(VIDEOS_ESPECIAL_EN_DIR, exist_ok=True)
os.makedirs(VIDEOS_ESPECIAL_ES_DIR, exist_ok=True)

# URLs dos GIFs diretamente do GitHub (seguindo a estrutura de seu repositório)
VIDEOS_POS_SINAL_GITHUB = {
    "pt": [
        # Vdeo padro em portugus (9/10)
        f"{GITHUB_BASE_URL}videos/pos_sinal/pt/padrão.gif",
        # Vdeo especial em portugus (1/10)
        f"{GITHUB_BASE_URL}videos/pos_sinal/pt/especial.gif",
    ],
    "en": [
        # Vdeo padro em ingls (9/10)
        f"{GITHUB_BASE_URL}videos/pos_sinal/en/padrao.gif",
        # Vdeo especial em ingls (1/10)
        f"{GITHUB_BASE_URL}videos/pos_sinal/en/especial.gif",
    ],
    "es": [
        # Vdeo padro em espanhol (9/10)
        f"{GITHUB_BASE_URL}videos/pos_sinal/es/padrao.gif",
        # Vdeo especial em espanhol (1/10)
        f"{GITHUB_BASE_URL}videos/pos_sinal/es/especial.gif",
    ],
}

# Configurar vdeos ps-sinal especficos para cada idioma (local paths)
VIDEOS_POS_SINAL = {
    "pt": [
        os.path.join(VIDEOS_POS_SINAL_PT_DIR, "padrão.gif"),
        # Vdeo padro em portugus (9/10)
        # Vdeo especial em portugus (1/10)
        os.path.join(VIDEOS_POS_SINAL_PT_DIR, "especial.gif"),
    ],
    "en": [
        os.path.join(VIDEOS_POS_SINAL_EN_DIR, "padrao.gif"),
        # Vdeo padro em ingls (9/10)
        # Vdeo especial em ingls (1/10)
        os.path.join(VIDEOS_POS_SINAL_EN_DIR, "especial.gif"),
    ],
    "es": [
        os.path.join(VIDEOS_POS_SINAL_ES_DIR, "padrao.gif"),
        # Vdeo padro em espanhol (9/10)
        # Vdeo especial em espanhol (1/10)
        os.path.join(VIDEOS_POS_SINAL_ES_DIR, "especial.gif"),
    ],
}

# Vdeo especial a cada 3 sinais (por idioma) - URLs do GitHub
VIDEOS_ESPECIAIS_GITHUB = {
    "pt": f"{GITHUB_BASE_URL}videos/gif_especial/pt/especial.gif",
    "en": f"{GITHUB_BASE_URL}videos/gif_especial/en/especial.gif",
    "es": f"{GITHUB_BASE_URL}videos/gif_especial/es/especial.gif",
}

# Vdeo especial a cada 3 sinais (por idioma) - local paths
VIDEOS_ESPECIAIS = {
    "pt": os.path.join(VIDEOS_ESPECIAL_PT_DIR, "especial.gif"),
    "en": os.path.join(VIDEOS_ESPECIAL_EN_DIR, "especial.gif"),
    "es": os.path.join(VIDEOS_ESPECIAL_ES_DIR, "especial.gif"),
}

# Vdeos promocionais por idioma - URLs do GitHub
VIDEOS_PROMO_GITHUB = {
    "pt": f"{GITHUB_BASE_URL}videos/promo/pt/promo.gif",
    "en": f"{GITHUB_BASE_URL}videos/promo/en/promo.gif",
    "es": f"{GITHUB_BASE_URL}videos/promo/es/promo.gif",
}

# Vdeos promocionais por idioma - local paths
VIDEOS_PROMO = {
    "pt": os.path.join(VIDEOS_PROMO_DIR, "pt", "promo.gif"),
    "en": os.path.join(VIDEOS_PROMO_DIR, "en", "promo.gif"),
    "es": os.path.join(VIDEOS_PROMO_DIR, "es", "promo.gif"),
}

# Logs para diagnstico
print(f"VIDEOS_DIR: {VIDEOS_DIR}")
print(f"VIDEOS_ESPECIAL_DIR: {VIDEOS_ESPECIAL_DIR}")
print(f"VIDEOS_ESPECIAL_PT_DIR: {VIDEOS_ESPECIAL_PT_DIR}")

# Caminho para o vdeo do GIF especial PT
VIDEO_GIF_ESPECIAL_PT = os.path.join(VIDEOS_ESPECIAL_PT_DIR, "especial.gif")
print(f"VIDEO_GIF_ESPECIAL_PT: {VIDEO_GIF_ESPECIAL_PT}")

# Contador para controle dos GIFs ps-sinal
contador_pos_sinal = 0
contador_desde_ultimo_especial = 0

# Adicionar variveis para controle da imagem especial diria
horario_especial_diario = None
imagem_especial_ja_enviada_hoje = False

# Funo para definir o horrio especial dirio


def definir_horario_especial_diario():
    global horario_especial_diario, imagem_especial_ja_enviada_hoje, mensagem_perda_enviada_hoje
    
    # Reseta o status de envio da imagem especial e mensagem de perda
    imagem_especial_ja_enviada_hoje = False
    mensagem_perda_enviada_hoje = False
    
    # Define um horrio aleatrio entre 0 e 23 horas
    horas_disponiveis = list(range(0, 24))
    hora_aleatoria = random.choice(horas_disponiveis)
    
    # Definir o mesmo minuto usado para o envio de sinais
    minuto_envio = 13
    
    # Define o horrio especial para hoje
    horario_atual = bot2_obter_hora_brasilia()
    horario_especial_diario = horario_atual.replace(
        hour=hora_aleatoria, 
        minute=minuto_envio,  # Mesmo minuto usado para envio de sinais
        second=0, 
        microsecond=0,
    )
    
    BOT2_LOGGER.info(
        f"Horário especial diário definido para: {horario_especial_diario.strftime('%H:%M')}"
    )
    
    # Se o horrio j passou hoje, reagenda para amanh
    if horario_especial_diario < horario_atual:
        horario_especial_diario = horario_especial_diario + timedelta(days=1)
        BOT2_LOGGER.info(
            f"Horário já passou hoje, reagendado para amanhã: {horario_especial_diario.strftime('%H:%M')}"
        )


# Agendar a redefinio do horrio especial dirio  meia-noite


def agendar_redefinicao_horario_especial():
    schedule.every().day.at("00:01").do(definir_horario_especial_diario)
    BOT2_LOGGER.info(
        "Agendada redefinição do horário especial diário para meia-noite e um minuto"
    )


# Chamar a funo no incio para definir o horrio especial para hoje
definir_horario_especial_diario()
agendar_redefinicao_horario_especial()


def verificar_url_gif(url):
    """
    Verifica se a URL do GIF está acessível.
    
    Args:
        url (str): A URL do GIF a ser verificada
        
    Returns:
        tuple: (url_a_usar, is_valid) onde url_a_usar é a URL verificada ou alternativa,
               e is_valid é um booleano indicando se a URL está acessível
    """
    try:
        BOT2_LOGGER.info(f"Verificando URL de GIF: {url}")
        response = requests.head(url, timeout=5)
        
        if response.status_code == 200:
            BOT2_LOGGER.info(f"URL de GIF válida: {url}")
            return url, True
        else:
            BOT2_LOGGER.warning(f"URL de GIF inválida (código {response.status_code}): {url}")
            return url, False
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao verificar URL {url}: {str(e)}")
        return url, False


def bot2_enviar_gif_pos_sinal(signal=None):
    """Envia um GIF após o resultado do sinal ou uma mensagem de gerenciamento uma vez por dia."""
    global BOT2_LOGGER, BOT2_CANAIS_CONFIG, BOT2_TOKEN, CONFIGS_IDIOMA, ultimo_sinal_enviado, bot2, URLS_GIFS_DIRETAS
    
    try:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        data_atual = agora.strftime("%Y-%m-%d")
        
        # Criar uma variável estática para controlar se a mensagem já foi enviada hoje
        if not hasattr(bot2_enviar_gif_pos_sinal, "mensagem_perda_enviada_hoje"):
            bot2_enviar_gif_pos_sinal.mensagem_perda_enviada_hoje = ""
        
        # Para testes, forçamos o envio do GIF definindo a mensagem como já enviada hoje
        bot2_enviar_gif_pos_sinal.mensagem_perda_enviada_hoje = data_atual
        enviar_mensagem_perda = bot2_enviar_gif_pos_sinal.mensagem_perda_enviada_hoje != data_atual
        
        if enviar_mensagem_perda:
            BOT2_LOGGER.info(f"[{horario_atual}] Enviando mensagem de gerenciamento de banca em vez de GIF pós-sinal")
            # Marcar que a mensagem de perda foi enviada hoje
            bot2_enviar_gif_pos_sinal.mensagem_perda_enviada_hoje = data_atual
        else:
            BOT2_LOGGER.info(f"[{horario_atual}] INICIANDO ENVIO DA IMAGEM PÓS-SINAL...")
            BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: Preparando para enviar GIFs pós-sinal")
        
        # Verificar se o sinal existe
        if not signal:
            signal = ultimo_sinal_enviado
        
        if not signal:
            BOT2_LOGGER.error(f"[{horario_atual}] Não foi possível encontrar o sinal para enviar a mensagem/GIF.")
            return False
        
        # Verifica se o ativo está dentro do horário de operação
        ativo = signal.get('ativo', None)
        categoria = signal.get('categoria', 'Digital')

        if ativo and not bot2_verificar_horario_ativo(ativo, categoria):
            BOT2_LOGGER.warning(
                f"Ativo {ativo} não está dentro do horário de operação. Não enviando mensagem/GIF pós-sinal.")
            return False
        
        # Contar quantas mensagens/GIFs foram enviados
        envios_com_sucesso = 0
        
        # Para cada idioma configurado, envia a mensagem formatada
        for idioma, chats in BOT2_CANAIS_CONFIG.items():
            if not chats:  # Se não houver chats configurados para este idioma, pula
                continue
            
            for chat_id in chats:
                try:
                    if enviar_mensagem_perda:
                        # Preparar a mensagem de perda conforme o idioma
                        config_idioma = CONFIGS_IDIOMA.get(idioma, CONFIGS_IDIOMA["pt"])
                        link_corretora = config_idioma.get("link_corretora", "")
                
                        if idioma == "pt":
                            texto_perda = f"⚠️ GERENCIAMENTO DE BANCA ⚠️\n\nSinal anterior não alcançou o resultado esperado!\nLembre-se de seguir seu gerenciamento para recuperar na próxima entrada.\n\n<a href=\"{link_corretora}\"><font color=\"blue\">Continue operando</font></a> 📈"
                        elif idioma == "en":
                            texto_perda = f"⚠️ BANKROLL MANAGEMENT ⚠️\n\nPrevious signal did not reach the expected outcome!\nRemember to follow your management to recover in the next entry.\n\n<a href=\"{link_corretora}\"><font color=\"blue\">Keep trading</font></a> 📈"
                        else:  # es
                            texto_perda = f"⚠️ GESTIÓN DE BANCA ⚠️\n\nLa señal anterior no alcanzó el resultado esperado!\nRecuerde seguir su gestión para recuperarse en la próxima entrada.\n\n<a href=\"{link_corretora}\"><font color=\"blue\">Sigue operando</font></a> 📈"
                
                        # URL base para a API do Telegram
                        url_base = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendMessage"
                        
                        resposta = requests.post(
                            url_base,
                            json={
                                "chat_id": chat_id,
                                "text": texto_perda,
                                "parse_mode": "HTML",
                                "disable_web_page_preview": False,
                            },
                            timeout=10,
                        )
                        
                        if resposta.status_code == 200:
                            BOT2_LOGGER.info(
                                f"[{horario_atual}] Mensagem de gerenciamento enviada com sucesso para {chat_id} (idioma: {idioma})"
                            )
                            envios_com_sucesso += 1
                        else:
                            BOT2_LOGGER.error(
                                f"[{horario_atual}] Erro ao enviar mensagem de gerenciamento para {chat_id}: {resposta.text}"
                            )
                    else:
                        # Enviar GIF normal pós-sinal
                        # Definir a URL do GIF para envio
                        usar_gif_especial = hasattr(bot2_enviar_gif_pos_sinal, "contador_pos_sinal") and bot2_enviar_gif_pos_sinal.contador_pos_sinal % 3 == 0
                        
                        if not hasattr(bot2_enviar_gif_pos_sinal, "contador_pos_sinal"):
                            bot2_enviar_gif_pos_sinal.contador_pos_sinal = 0
                        bot2_enviar_gif_pos_sinal.contador_pos_sinal += 1
                        
                        # Sempre usaremos a imagem do GitHub para o GIF pós-sinal
                        gif_url = "https://raw.githubusercontent.com/IgorElion/-TelegramBot/main/videos/pos_sinal/pt/180398513446716419%20(7).webp"
                        BOT2_LOGGER.info(f"[{horario_atual}] Usando GIF do GitHub para canal {idioma}")

                        BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: Preparando envio do GIF: {gif_url} para canal {chat_id}")
                        
                        try:
                            # Baixar o arquivo para enviar como arquivo em vez de URL
                            BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: Baixando arquivo de {gif_url}")
                            arquivo_resposta = requests.get(gif_url, stream=True, timeout=10)
                            
                            if arquivo_resposta.status_code == 200:
                                # Criar um arquivo temporário no formato correto
                                extensao = ".webp"  # Sempre usar .webp para o arquivo do GitHub
                                
                                nome_arquivo_temp = f"temp_gif_{random.randint(1000, 9999)}{extensao}"
                                
                                # Salvar o arquivo temporariamente
                                with open(nome_arquivo_temp, 'wb') as f:
                                    f.write(arquivo_resposta.content)
                                
                                BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: Arquivo baixado com sucesso como {nome_arquivo_temp}")
                                
                                # Abrir o arquivo e enviar como animação
                                with open(nome_arquivo_temp, 'rb') as f_gif:
                                    # Enviar o GIF como animação diretamente do arquivo nas dimensões especificadas
                                    BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: Enviando arquivo como animação")
                                    bot2.send_animation(
                                        chat_id=chat_id,
                                        animation=f_gif,
                                        caption="",
                                        parse_mode="HTML",
                                        width=208,
                                        height=84  # Arredondando para 84 pixels já que não é possível usar valores decimais
                                    )
                                
                                # Remover o arquivo temporário
                                try:
                                    os.remove(nome_arquivo_temp)
                                    BOT2_LOGGER.info(f"[{horario_atual}] 🎬 LOG GIF: Arquivo temporário {nome_arquivo_temp} removido")
                                except:
                                    BOT2_LOGGER.warning(f"[{horario_atual}] 🎬 LOG GIF: Não foi possível remover o arquivo temporário {nome_arquivo_temp}")
                                
                                BOT2_LOGGER.info(f"GIF enviado com sucesso como animação para o canal {chat_id}")
                                envios_com_sucesso += 1
                            else:
                                BOT2_LOGGER.error(f"[{horario_atual}] 🎬 LOG GIF: Erro ao baixar o arquivo. Status code: {arquivo_resposta.status_code}")
                                # Tentar enviar diretamente com a URL como fallback
                                bot2.send_animation(
                                    chat_id=chat_id,
                                    animation=gif_url,
                                    caption="",
                                    parse_mode="HTML",
                                    width=208,
                                    height=84
                                )
                                BOT2_LOGGER.info(f"GIF enviado com sucesso como URL para o canal {chat_id} (fallback)")
                                envios_com_sucesso += 1
                        except Exception as download_error:
                            BOT2_LOGGER.error(f"[{horario_atual}] 🎬 LOG GIF: Erro ao baixar/enviar o arquivo: {str(download_error)}")
                            # Tentar enviar diretamente com a URL como fallback
                            bot2.send_animation(
                                chat_id=chat_id,
                                animation=gif_url,
                                caption="",
                                parse_mode="HTML",
                                width=208,
                                height=84
                            )
                            BOT2_LOGGER.info(f"GIF enviado com sucesso como URL para o canal {chat_id} (fallback após erro)")
                            envios_com_sucesso += 1
                    
                except Exception as e:
                    BOT2_LOGGER.error(f"[{horario_atual}] Erro ao enviar para o canal {chat_id}: {str(e)}")

                    if "rights to send" in str(e).lower():
                        BOT2_LOGGER.error(f"Bot não tem permissões de administrador no canal {chat_id}")

        if envios_com_sucesso > 0:
            if enviar_mensagem_perda:
                BOT2_LOGGER.info(f"[{horario_atual}] Total de {envios_com_sucesso} mensagens de gerenciamento enviadas com sucesso")
            else:
                BOT2_LOGGER.info(f"[{horario_atual}] Total de {envios_com_sucesso} GIFs pós-sinal enviados com sucesso")
            return True
        else:
            BOT2_LOGGER.warning(f"[{horario_atual}] Nenhuma mensagem ou GIF foi enviado")
            return False
    
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao enviar mensagem/GIF pós-sinal: {str(e)}")
        traceback.print_exc()
        return False


def bot2_send_message(ignorar_anti_duplicacao=False, enviar_gif_imediatamente=False):
    """
    Função principal para envio de sinais do Bot 2.
    Gera e envia um sinal aleatório para todos os canais configurados.
    
    Args:
        ignorar_anti_duplicacao (bool, opcional): Se True, ignora a verificação de anti-duplicação
        enviar_gif_imediatamente (bool, opcional): Se True, envia o GIF pós-sinal imediatamente
    
    Returns:
        bool: True se o sinal foi enviado com sucesso, False caso contrário
    """
    global BOT2_LOGGER, BOT2_CANAIS_CONFIG, BOT2_TOKEN, ultimo_sinal_enviado, bot2_contador_sinais
    
    try:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.info(f"[{horario_atual}] INICIANDO ENVIO DO SINAL...")
        
        # Contar quantos sinais foram enviados
        sinais_enviados = 0
        
        try:
            # Gerar o sinal aleatório
            sinal = bot2_gerar_sinal_aleatorio()
            if not sinal:
                BOT2_LOGGER.warning(
                    f"[{horario_atual}] Não foi possível gerar um sinal válido. Tentando novamente mais tarde."
                )
                return False
                
            # Salvar o sinal para uso posterior
            ultimo_sinal_enviado = sinal
            
        except Exception as e:
            BOT2_LOGGER.error(f"Erro ao gerar sinal aleatório: {str(e)}")
            traceback.print_exc()
            return False
        
        # Em vez de desempacotar diretamente, obtenha os valores do dicionário
        ativo = sinal["ativo"]
        direcao = sinal["direcao"]
        tempo_expiracao_minutos = sinal["tempo_expiracao_minutos"]
        categoria = sinal["categoria"]

        # Calcular o horário de entrada (2 minutos após o envio do sinal)
        hora_entrada = agora + timedelta(minutes=2)
        hora_formatada = hora_entrada.strftime("%H:%M")
        
        # Enviar o sinal para cada canal configurado
        for idioma, chats in BOT2_CANAIS_CONFIG.items():
            if not chats:  # Se não houver chats configurados para este idioma, pula
                continue
            
            # Formatar a mensagem para o idioma específico
            mensagem_formatada = bot2_formatar_mensagem(sinal, hora_formatada, idioma)
            
            if not mensagem_formatada:
                BOT2_LOGGER.error(f"[{horario_atual}] Erro ao formatar mensagem para idioma {idioma}")
                continue
            
            # URL base para a API do Telegram
            url_base = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendMessage"
            
            BOT2_LOGGER.info(
                f"[{horario_atual}] Enviando sinal: Ativo={ativo}, Direção={direcao}, Categoria={categoria}, Tempo={tempo_expiracao_minutos}, Idioma={idioma}"
            )
            
            # Enviar para cada chat do idioma
            for chat_id in chats:
                try:
                    resposta = requests.post(
                        url_base,
                        json={
                            "chat_id": chat_id,
                            "text": mensagem_formatada,
                            "parse_mode": "HTML"
                        },
                        timeout=10,
                    )
                    
                    if resposta.status_code == 200:
                        sinais_enviados += 1
                        BOT2_LOGGER.info(
                            f"[{horario_atual}] Sinal enviado com sucesso para o canal {chat_id} (idioma: {idioma})"
                        )
                    else:
                        BOT2_LOGGER.error(
                            f"[{horario_atual}] Erro ao enviar sinal para {chat_id}: {resposta.text}"
                        )
                except Exception as e:
                    BOT2_LOGGER.error(f"[{horario_atual}] Erro ao enviar para {chat_id}: {str(e)}")
        
        # Incrementa o contador global de sinais
        bot2_contador_sinais += 1

        # MODIFICADO: Agendar o gif pós-sinal para 7 minutos após o envio do sinal
        tempo_pos_sinal = 7

        # Calcular a hora exata para o envio do GIF pós-sinal (hora atual + 7 minutos)
        horario_pos_sinal = agora + timedelta(minutes=tempo_pos_sinal)
        hora_pos_sinal_str = horario_pos_sinal.strftime("%H:%M")

        BOT2_LOGGER.info(
            f"[{horario_atual}] LOG GIF: Agendando GIF pós-sinal para {hora_pos_sinal_str} (daqui a {tempo_pos_sinal} minutos)"
        )
        BOT2_LOGGER.info(
            f"[{horario_atual}] LOG GIF: O GIF será enviado exatamente 7 minutos após o sinal"
        )

        # Limpar quaisquer agendamentos anteriores para o GIF pós-sinal
        schedule.clear("bot2_pos_sinal")

        # Verificar se deve enviar o GIF imediatamente (para testes)
        if enviar_gif_imediatamente:
            BOT2_LOGGER.info(
                f"[{horario_atual}] LOG GIF: Opção de envio imediato ativada - enviando GIF agora..."
            )
            bot2_enviar_gif_pos_sinal()
        else:
            # Agendar para uma hora específica em vez de um intervalo relativo
            scheduler_job = (
                schedule.every()
                .day.at(hora_pos_sinal_str)
                .do(bot2_enviar_gif_pos_sinal)
                .tag("bot2_pos_sinal")
            )

            # Verificar se o agendamento foi bem-sucedido
            if scheduler_job:
                BOT2_LOGGER.info(
                    f"[{horario_atual}] LOG GIF: Agendamento criado com sucesso: {scheduler_job}"
                )

                # Listar todos os trabalhos agendados para verificar
                jobs = schedule.get_jobs()
                BOT2_LOGGER.info(
                    f"[{horario_atual}] LOG GIF: Total de trabalhos agendados: {len(jobs)}"
                )
                for i, job in enumerate(jobs):
                    BOT2_LOGGER.info(
                        f"[{horario_atual}] LOG GIF: Trabalho {i + 1}: {job} - Próxima execução: {job.next_run}"
                    )
            else:
                BOT2_LOGGER.error(
                    f"[{horario_atual}] LOG GIF: FALHA ao criar agendamento para o GIF pós-sinal!"
                )

        return True

    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao enviar sinal: {str(e)}")
        traceback.print_exc()
        return False


def bot2_iniciar_ciclo_sinais():
    """
    Agenda o envio de sinais do Bot 2 a cada hora no minuto 13.
    """
    global bot2_sinais_agendados, BOT2_LOGGER
    
    try:
        # Limpar agendamentos anteriores de sinais
        schedule.clear("bot2_sinais")
        
        # Configurar para enviar sempre no minuto 13 de cada hora
        minuto_envio = 13
        
        # Agendar a cada hora no minuto 13
        schedule.every().hour.at(f":{minuto_envio:02d}").do(bot2_send_message).tag("bot2_sinais")
        
        BOT2_LOGGER.info(f"Sinal do Bot 2 agendado para o minuto {minuto_envio} de cada hora")
        BOT2_LOGGER.info("Configuração atual: 1 sinal por hora, apenas ativos Digital, expiração de 5 minutos")
        BOT2_LOGGER.info(f"Total de ativos da categoria Digital disponíveis: {len(ATIVOS_CATEGORIAS['Digital'])}")
        
        # Verificar próximo horário de envio
        agora = bot2_obter_hora_brasilia()
        hora_atual = agora.hour
        minuto_atual = agora.minute
        
        if minuto_atual >= minuto_envio:
            # Se já passou do minuto 13 dessa hora, o próximo será na próxima hora
            proximo_envio = f"{(hora_atual + 1) % 24:02d}:{minuto_envio:02d}"
        else:
            # Se ainda não chegou no minuto 13 dessa hora, será nessa hora mesmo
            proximo_envio = f"{hora_atual:02d}:{minuto_envio:02d}"
            
        BOT2_LOGGER.info(f"Próximo sinal agendado para: {proximo_envio}")
        
        # Verificar se estamos próximos do horário de envio (dentro de 1 minuto)
        if (minuto_atual == minuto_envio) or (minuto_atual == minuto_envio - 1):
            BOT2_LOGGER.info(f"Estamos próximos do horário de envio! Enviando sinal imediatamente...")
            bot2_send_message()
        
        bot2_sinais_agendados = True
        return True
        
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao iniciar ciclo de sinais do Bot 2: {str(e)}")
        traceback.print_exc()
        bot2_sinais_agendados = False
        return False


def iniciar_ambos_bots():
    """
    Inicializa o Bot 2 e mantém o programa em execução,
    tratando as tarefas agendadas periodicamente.
    """
    global bot2_sinais_agendados, BOT2_LOGGER
    
    try:
        # Iniciar o Bot 2
        if not bot2_sinais_agendados:
            bot2_iniciar_ciclo_sinais()  # Agendar sinais para o Bot 2
            
        BOT2_LOGGER.info("=== BOT 2 INICIADO COM SUCESSO! ===")
        BOT2_LOGGER.info("Aguardando envio de sinais nos horários programados...")
        
        # Teste inicial (descomentar para testes)
        # bot2_send_message(enviar_gif_imediatamente=True)
        
        # Loop principal para manter o programa em execução
        while True:
            # Registrar todas as tarefas pendentes a cada 5 minutos (diagnóstico)
            agora = bot2_obter_hora_brasilia()
            
            # Verificação adicional para enviar no minuto 13 de cada hora
            if agora.minute == 13 and agora.second == 0:
                BOT2_LOGGER.info(f"[{agora.strftime('%H:%M:%S')}] Chegou o horário programado! Enviando sinal agora...")
                bot2_send_message()
            
            if agora.minute % 5 == 0 and agora.second == 0:
                jobs = schedule.get_jobs()
                BOT2_LOGGER.info(f"[{agora.strftime('%H:%M:%S')}] DIAGNÓSTICO: Verificando {len(jobs)} tarefas agendadas")
                for i, job in enumerate(jobs):
                    BOT2_LOGGER.info(f"[{agora.strftime('%H:%M:%S')}] DIAGNÓSTICO: Tarefa {i + 1}: {job} - Próxima execução: {job.next_run}")
            
            # Executar tarefas agendadas
            schedule.run_pending()
            
            # Pequena pausa para evitar uso excessivo de CPU
            time.sleep(1)
            
    except KeyboardInterrupt:
        BOT2_LOGGER.info("Bots encerrados pelo usuário (Ctrl+C)")
    except Exception as e:
        BOT2_LOGGER.error(f"Erro na execução dos bots: {str(e)}")
        traceback.print_exc()
        raise

# Função para enviar sinal manualmente (para testes)
def enviar_sinal_manual():
    """Função para enviar um sinal manualmente para testes."""
    try:
        BOT2_LOGGER.info("Enviando sinal manualmente para teste...")
        resultado = bot2_send_message()
        
        if resultado:
            BOT2_LOGGER.info("Sinal manual enviado com sucesso!")
            return True
        else:
            BOT2_LOGGER.error("Falha ao enviar sinal manual.")
            return False
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao enviar sinal manual: {str(e)}")
        traceback.print_exc()
        return False


def bot2_enviar_gif_especial():
    """
    Envia um GIF especial para todos os canais após sinais múltiplos de 3.
    """
    global BOT2_LOGGER, BOT2_CANAIS_CONFIG, BOT2_TOKEN, URLS_GIFS_DIRETAS, bot2
    
    try:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.info(f"[{horario_atual}] Iniciando envio de GIF especial para múltiplos de 3")

        gif_enviado_com_sucesso = False
        
        # Limpar quaisquer agendamentos anteriores para envio de mensagem de cadastro
        schedule.clear("cadastro_especial")

        for idioma, chats in BOT2_CANAIS_CONFIG.items():
            if not chats:  # Se não houver chats configurados para este idioma, pula
                continue
            
            for chat_id in chats:
                try:
                    # Usar o GIF especial 
                    if idioma == "pt":
                        gif_url = URLS_GIFS_DIRETAS["gif_especial_pt"]
                    else:
                        # Para os outros idiomas usar o mesmo gif
                        gif_url = URLS_GIFS_DIRETAS["gif_especial_pt"]

                    BOT2_LOGGER.info(
                        f"[{horario_atual}] Tentando enviar GIF especial como animação do URL: {gif_url} para o canal {chat_id}"
                    )
                    
                    try:
                        # Baixar o arquivo para enviar como arquivo em vez de URL
                        BOT2_LOGGER.info(f"[{horario_atual}] Baixando arquivo de {gif_url}")
                        arquivo_resposta = requests.get(gif_url, stream=True, timeout=10)
                        
                        if arquivo_resposta.status_code == 200:
                            # Criar um arquivo temporário no formato correto
                            extensao = ".gif"
                            if ".webp" in gif_url.lower():
                                extensao = ".webp"
                            
                            nome_arquivo_temp = f"temp_gif_{random.randint(1000, 9999)}{extensao}"
                            
                            # Salvar o arquivo temporariamente
                            with open(nome_arquivo_temp, 'wb') as f:
                                f.write(arquivo_resposta.content)
                            
                            BOT2_LOGGER.info(f"[{horario_atual}] Arquivo baixado com sucesso como {nome_arquivo_temp}")
                            
                            # Abrir o arquivo e enviar como animação
                            with open(nome_arquivo_temp, 'rb') as f_gif:
                                # Enviar o GIF como animação diretamente do arquivo nas dimensões especificadas
                                BOT2_LOGGER.info(f"[{horario_atual}] Enviando arquivo como animação")
                                bot2.send_animation(
                                    chat_id=chat_id,
                                    animation=f_gif,
                                    caption="",
                                    parse_mode="HTML",
                                    width=208,
                                    height=84  # Arredondando para 84 pixels já que não é possível usar valores decimais
                                )
                            
                            # Remover o arquivo temporário
                            try:
                                os.remove(nome_arquivo_temp)
                                BOT2_LOGGER.info(f"[{horario_atual}] Arquivo temporário {nome_arquivo_temp} removido")
                            except:
                                BOT2_LOGGER.warning(f"[{horario_atual}] Não foi possível remover o arquivo temporário {nome_arquivo_temp}")
                            
                            BOT2_LOGGER.info(f"[{horario_atual}] GIF especial enviado com sucesso como animação para o canal {chat_id}")
                            gif_enviado_com_sucesso = True
                        else:
                            BOT2_LOGGER.error(f"[{horario_atual}] Erro ao baixar o arquivo. Status code: {arquivo_resposta.status_code}")
                            # Tentar enviar diretamente com a URL como fallback
                            bot2.send_animation(
                                chat_id=chat_id,
                                animation=gif_url,
                                caption="",
                                parse_mode="HTML",
                                width=208,
                                height=84
                            )
                            BOT2_LOGGER.info(f"[{horario_atual}] GIF enviado com sucesso como URL para o canal {chat_id} (fallback)")
                            gif_enviado_com_sucesso = True
                    except Exception as download_error:
                        BOT2_LOGGER.error(f"[{horario_atual}] Erro ao baixar/enviar o arquivo: {str(download_error)}")
                        # Tentar enviar diretamente com a URL como fallback
                        bot2.send_animation(
                            chat_id=chat_id,
                            animation=gif_url,
                            caption="",
                            parse_mode="HTML",
                            width=208,
                            height=84
                        )
                        BOT2_LOGGER.info(f"[{horario_atual}] GIF enviado com sucesso como URL para o canal {chat_id} (fallback após erro)")
                        gif_enviado_com_sucesso = True

                except Exception as e:
                    BOT2_LOGGER.error(
                        f"[{horario_atual}] Erro ao enviar GIF especial para o canal {chat_id}: {str(e)}"
                    )

                    if "rights to send" in str(e).lower():
                        BOT2_LOGGER.error(
                            f"[{horario_atual}] Bot não tem permissões de administrador no canal {chat_id}"
                        )

        if gif_enviado_com_sucesso:
            BOT2_LOGGER.info(f"[{horario_atual}] GIF especial enviado com sucesso para sinais múltiplos de 3")
            
            # Agendar o envio da mensagem de cadastro para 1 minuto depois
            schedule.every(1).minutes.do(bot2_enviar_mensagem_cadastro).tag("cadastro_especial")
            BOT2_LOGGER.info(f"[{horario_atual}] Agendado envio da mensagem de cadastro em 1 minuto após GIF especial")
            
            return True
        else:
            BOT2_LOGGER.warning(
                f"[{horario_atual}] Não foi possível enviar o GIF especial para sinais múltiplos de 3"
            )
            return False
    
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao enviar GIF especial: {str(e)}")
        traceback.print_exc()
        return False


def bot2_enviar_gif_promo(idioma="pt"):
    """
    Envia um GIF promocional antes do sinal.

    Args:
        idioma (str): O idioma do GIF a ser enviado (pt, en, es)
    """
    global BOT2_LOGGER, BOT2_CANAIS_CONFIG, BOT2_TOKEN, URLS_GIFS_DIRETAS, bot2
    
    try:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.info(f"[{horario_atual}] Iniciando função bot2_enviar_gif_promo para idioma {idioma}")

        gif_enviado_com_sucesso = False
        
        # Limpar quaisquer agendamentos anteriores para envio de mensagem de abertura
        schedule.clear("abertura_corretora")

        # Verificar se o idioma existe em BOT2_CANAIS_CONFIG
        chats = BOT2_CANAIS_CONFIG.get(idioma, [])
        
        if not chats:
            BOT2_LOGGER.warning(f"[{horario_atual}] Não há canais configurados para o idioma {idioma}")
            return False

        # Definir a URL do GIF do Giphy com base no idioma
        gif_key = f"promo_{idioma}"
        if gif_key in URLS_GIFS_DIRETAS:
            gif_url = URLS_GIFS_DIRETAS[gif_key]
        else:
            # Usar o gif promocional em inglês como padrão
            gif_url = URLS_GIFS_DIRETAS["promo_en"]

        for chat_id in chats:
            try:
                BOT2_LOGGER.info(
                    f"[{horario_atual}] Tentando enviar GIF promo como animação do URL: {gif_url} para o canal {chat_id}"
                )
                
                try:
                    # Baixar o arquivo para enviar como arquivo em vez de URL
                    BOT2_LOGGER.info(f"[{horario_atual}] Baixando arquivo de {gif_url}")
                    arquivo_resposta = requests.get(gif_url, stream=True, timeout=10)
                    
                    if arquivo_resposta.status_code == 200:
                        # Criar um arquivo temporário no formato correto
                        extensao = ".gif"
                        if ".webp" in gif_url.lower():
                            extensao = ".webp"
                        
                        nome_arquivo_temp = f"temp_gif_{random.randint(1000, 9999)}{extensao}"
                        
                        # Salvar o arquivo temporariamente
                        with open(nome_arquivo_temp, 'wb') as f:
                            f.write(arquivo_resposta.content)
                        
                        BOT2_LOGGER.info(f"[{horario_atual}] Arquivo baixado com sucesso como {nome_arquivo_temp}")
                        
                        # Abrir o arquivo e enviar como animação
                        with open(nome_arquivo_temp, 'rb') as f_gif:
                            # Enviar o GIF como animação diretamente do arquivo nas dimensões especificadas
                            BOT2_LOGGER.info(f"[{horario_atual}] Enviando arquivo como animação")
                            bot2.send_animation(
                                chat_id=chat_id,
                                animation=f_gif,
                                caption="",
                                parse_mode="HTML",
                                width=208,
                                height=84  # Arredondando para 84 pixels já que não é possível usar valores decimais
                            )
                        
                        # Remover o arquivo temporário
                        try:
                            os.remove(nome_arquivo_temp)
                            BOT2_LOGGER.info(f"[{horario_atual}] Arquivo temporário {nome_arquivo_temp} removido")
                        except:
                            BOT2_LOGGER.warning(f"[{horario_atual}] Não foi possível remover o arquivo temporário {nome_arquivo_temp}")
                        
                        BOT2_LOGGER.info(f"[{horario_atual}] GIF promocional enviado com sucesso como animação para o canal {chat_id}")
                        gif_enviado_com_sucesso = True
                    else:
                        BOT2_LOGGER.error(f"[{horario_atual}] Erro ao baixar o arquivo. Status code: {arquivo_resposta.status_code}")
                        # Tentar enviar diretamente com a URL como fallback
                        bot2.send_animation(
                            chat_id=chat_id,
                            animation=gif_url,
                            caption="",
                            parse_mode="HTML",
                            width=208,
                            height=84
                        )
                        BOT2_LOGGER.info(f"[{horario_atual}] GIF enviado com sucesso como URL para o canal {chat_id} (fallback)")
                        gif_enviado_com_sucesso = True
                except Exception as download_error:
                    BOT2_LOGGER.error(f"[{horario_atual}] Erro ao baixar/enviar o arquivo: {str(download_error)}")
                    # Tentar enviar diretamente com a URL como fallback
                    bot2.send_animation(
                        chat_id=chat_id,
                        animation=gif_url,
                        caption="",
                        parse_mode="HTML",
                        width=208,
                        height=84
                    )
                    BOT2_LOGGER.info(f"[{horario_atual}] GIF enviado com sucesso como URL para o canal {chat_id} (fallback após erro)")
                    gif_enviado_com_sucesso = True

            except Exception as e:
                BOT2_LOGGER.error(
                    f"[{horario_atual}] Erro ao enviar GIF promocional para o canal {chat_id}: {str(e)}"
                )

                if "rights to send" in str(e).lower():
                    BOT2_LOGGER.error(
                        f"[{horario_atual}] Bot não tem permissões de administrador no canal {chat_id}"
                    )

        if gif_enviado_com_sucesso:
            BOT2_LOGGER.info(f"[{horario_atual}] GIF promocional enviado com sucesso para idioma {idioma}")
            
            # Agendar o envio da mensagem de abertura da corretora para 1 minuto depois
            schedule.every(1).minutes.do(bot2_enviar_mensagem_abertura_corretora).tag("abertura_corretora")
            BOT2_LOGGER.info(f"[{horario_atual}] Agendado envio da mensagem de abertura da corretora em 1 minuto")
            
            return True
        else:
            BOT2_LOGGER.warning(
                f"[{horario_atual}] Não foi possível enviar o GIF promocional para idioma {idioma}"
            )
            return False
    
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao enviar GIF promocional: {str(e)}")
        traceback.print_exc()
        return False


def bot2_enviar_mensagem_cadastro():
    """Envia uma mensagem de cadastro para todos os canais configurados."""
    global BOT2_LOGGER, BOT2_CANAIS_CONFIG, BOT2_TOKEN, CONFIGS_IDIOMA
    
    try:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.info(f"[{horario_atual}] Iniciando envio de mensagem de cadastro")
        
        # Contar quantas mensagens foram enviadas com sucesso
        mensagens_enviadas = 0
        
        # Para cada idioma configurado, envia a mensagem formatada
        for idioma, chats in BOT2_CANAIS_CONFIG.items():
            if not chats:  # Se não houver chats configurados para este idioma, pula
                continue
            
            config_idioma = CONFIGS_IDIOMA.get(idioma, CONFIGS_IDIOMA["pt"])
            link_corretora = config_idioma.get("link_corretora", "")
            
            if idioma == "pt":
                texto_cadastro = f"🔴 ATENÇÃO 🔴\n\nATUALIZAÇÃO DE CADASTRO NECESSÁRIA!\n\nPara continuar recebendo os sinais, clique no link abaixo e atualize seus dados de cadastro.\n\n<a href=\"{link_corretora}\"><font color=\"blue\">ATUALIZAR CADASTRO</font></a> 🔹"
            elif idioma == "en":
                texto_cadastro = f"🔴 ATTENTION 🔴\n\nREGISTRATION UPDATE REQUIRED!\n\nTo continue receiving signals, click the link below and update your registration data.\n\n<a href=\"{link_corretora}\"><font color=\"blue\">UPDATE REGISTRATION</font></a> 🔹"
            else:  # es
                texto_cadastro = f"🔴 ATENCIÓN 🔴\n\n¡ACTUALIZACIÓN DE REGISTRO NECESARIA!\n\nPara seguir recibiendo las señales, haga clic en el enlace a continuación y actualice sus datos de registro.\n\n<a href=\"{link_corretora}\"><font color=\"blue\">ACTUALIZAR REGISTRO</font></a> 🔹"
            
            for chat_id in chats:
                try:
                    # URL base para a API do Telegram
                    url_base = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendMessage"
                    
                    resposta = requests.post(
                        url_base,
                        json={
                            "chat_id": chat_id,
                            "text": texto_cadastro,
                            "parse_mode": "HTML",
                            "disable_web_page_preview": False,
                        },
                        timeout=10,
                    )
                    
                    if resposta.status_code == 200:
                        BOT2_LOGGER.info(
                            f"[{horario_atual}] Mensagem de cadastro enviada com sucesso para {chat_id} (idioma: {idioma})"
                        )
                        mensagens_enviadas += 1
                    else:
                        BOT2_LOGGER.error(
                            f"[{horario_atual}] Erro ao enviar mensagem de cadastro para {chat_id}: {resposta.text}"
                        )
                except Exception as e:
                    BOT2_LOGGER.error(
                        f"[{horario_atual}] Exceção ao enviar mensagem de cadastro para {chat_id}: {str(e)}"
                    )
        
        if mensagens_enviadas > 0:
            BOT2_LOGGER.info(f"[{horario_atual}] Total de {mensagens_enviadas} mensagens de cadastro enviadas com sucesso")
            
            # Agendar envio da mensagem de abertura da corretora em 9 minutos
            schedule.every(9).minutes.do(bot2_enviar_gif_promo, idioma="pt").tag("gif_promo")
            BOT2_LOGGER.info(f"[{horario_atual}] Agendado envio do GIF promo em 9 minutos")
            
            return True
        else:
            BOT2_LOGGER.warning(f"[{horario_atual}] Nenhuma mensagem de cadastro foi enviada")
            return False
    
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao enviar mensagem de cadastro: {str(e)}")
        traceback.print_exc()
        return False


def bot2_enviar_mensagem_abertura_corretora():
    """Envia uma mensagem informando sobre a abertura da corretora para todos os canais configurados."""
    global BOT2_LOGGER, BOT2_CANAIS_CONFIG, BOT2_TOKEN, CONFIGS_IDIOMA
    
    try:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.info(f"[{horario_atual}] Iniciando envio da mensagem de abertura da corretora")
        
        # Contar quantas mensagens foram enviadas com sucesso
        mensagens_enviadas = 0
        
        # Para cada idioma configurado, envia a mensagem formatada
        for idioma, chats in BOT2_CANAIS_CONFIG.items():
            if not chats:  # Se não houver chats configurados para este idioma, pula
                continue
            
            config_idioma = CONFIGS_IDIOMA.get(idioma, CONFIGS_IDIOMA["pt"])
            link_corretora = config_idioma.get("link_corretora", "")
            
            if idioma == "pt":
                texto_abertura = f"⏰ CORRETORA ABERTA ⏰\n\nA corretora já está aberta para operações! 🎯\n\nLembre-se de seguir corretamente seu gerenciamento para obter os melhores resultados.\n\n<a href=\"{link_corretora}\"><font color=\"blue\">ACESSAR CORRETORA</font></a> 📈"
            elif idioma == "en":
                texto_abertura = f"⏰ BROKER OPEN ⏰\n\nThe broker is now open for trading! 🎯\n\nRemember to correctly follow your management to achieve the best results.\n\n<a href=\"{link_corretora}\"><font color=\"blue\">ACCESS BROKER</font></a> 📈"
            else:  # es
                texto_abertura = f"⏰ CORREDOR ABIERTO ⏰\n\n¡El corredor ya está abierto para operaciones! 🎯\n\nRecuerde seguir correctamente su gestión para obtener los mejores resultados.\n\n<a href=\"{link_corretora}\"><font color=\"blue\">ACCEDER AL CORREDOR</font></a> 📈"
            
            for chat_id in chats:
                try:
                    # URL base para a API do Telegram
                    url_base = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendMessage"
                    
                    resposta = requests.post(
                        url_base,
                        json={
                            "chat_id": chat_id,
                            "text": texto_abertura,
                            "parse_mode": "HTML",
                            "disable_web_page_preview": False,
                        },
                        timeout=10,
                    )
                    
                    if resposta.status_code == 200:
                        BOT2_LOGGER.info(
                            f"[{horario_atual}] Mensagem de abertura da corretora enviada com sucesso para {chat_id} (idioma: {idioma})"
                        )
                        mensagens_enviadas += 1
                    else:
                        BOT2_LOGGER.error(
                            f"[{horario_atual}] Erro ao enviar mensagem de abertura para {chat_id}: {resposta.text}"
                        )
                except Exception as e:
                    BOT2_LOGGER.error(
                        f"[{horario_atual}] Exceção ao enviar mensagem de abertura para {chat_id}: {str(e)}"
                    )
        
        if mensagens_enviadas > 0:
            BOT2_LOGGER.info(f"[{horario_atual}] Total de {mensagens_enviadas} mensagens de abertura enviadas com sucesso")
            return True
        else:
            BOT2_LOGGER.warning(f"[{horario_atual}] Nenhuma mensagem de abertura foi enviada")
            return False
    
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao enviar mensagem de abertura: {str(e)}")
        traceback.print_exc()
        return False

# Executar se este arquivo for o script principal
if __name__ == "__main__":
    try:
        print("=== INICIANDO O BOT TELEGRAM ===")
        print(f"Diretório base: {BASE_DIR}")
        print(f"Diretório de vídeos: {VIDEOS_DIR}")
        print(f"Diretório de GIFs especiais: {VIDEOS_ESPECIAL_DIR}")
        print(f"Arquivo GIF especial PT: {VIDEO_GIF_ESPECIAL_PT}")

        # Informações sobre a configuração atual
        print("=== CONFIGURAÇÃO ATUAL DO BOT ===")
        print("- Enviando apenas 1 sinal por hora (no minuto 13)")
        print("- Usando apenas ativos da categoria Digital")
        print("- Tempo de expiração fixo em 5 minutos")
        print(
            "- GIF pós-sinal agendado para 7 minutos após o sinal (expiração + 2 min)"
        )
        print("================================")

        # Exibir caminhos das imagens pós-sinal
        print(
            f"Caminho da imagem pós-sinal padrão (PT): {os.path.join(VIDEOS_POS_SINAL_DIR, 'pt', 'padrao.jpg')}"
        )
        print(
            f"Caminho da imagem pós-sinal especial (PT): {os.path.join(VIDEOS_POS_SINAL_DIR, 'pt', 'especial.jpg')}"
        )
        print(
            f"Caminho da imagem pós-sinal padrão (EN): {os.path.join(VIDEOS_POS_SINAL_DIR, 'en', 'padrao.jpg')}"
        )
        print(
            f"Caminho da imagem pós-sinal especial (EN): {os.path.join(VIDEOS_POS_SINAL_DIR, 'en', 'especial.jpg')}"
        )
        print(
            f"Caminho da imagem pós-sinal padrão (ES): {os.path.join(VIDEOS_POS_SINAL_DIR, 'es', 'padrao.jpg')}"
        )
        print(
            f"Caminho da imagem pós-sinal especial (ES): {os.path.join(VIDEOS_POS_SINAL_DIR, 'es', 'especial.jpg')}"
        )

        # Verificar se os diretórios existem
        print(f"Verificando pastas:")
        print(f"VIDEOS_DIR existe: {os.path.exists(VIDEOS_DIR)}")
        print(
            f"VIDEOS_POS_SINAL_DIR existe: {os.path.exists(VIDEOS_POS_SINAL_DIR)}"
        )
        print(
            f"VIDEOS_POS_SINAL_PT_DIR existe: {os.path.exists(VIDEOS_POS_SINAL_PT_DIR)}"
        )
        print(
            f"VIDEOS_ESPECIAL_DIR existe: {os.path.exists(VIDEOS_ESPECIAL_DIR)}"
        )
        print(
            f"VIDEOS_ESPECIAL_PT_DIR existe: {os.path.exists(VIDEOS_ESPECIAL_PT_DIR)}"
        )

        # Criar pastas se não existirem
        os.makedirs(VIDEOS_DIR, exist_ok=True)
        os.makedirs(VIDEOS_ESPECIAL_DIR, exist_ok=True)
        os.makedirs(VIDEOS_ESPECIAL_PT_DIR, exist_ok=True)
        os.makedirs(VIDEOS_POS_SINAL_DIR, exist_ok=True)
        os.makedirs(VIDEOS_POS_SINAL_PT_DIR, exist_ok=True)
        os.makedirs(VIDEOS_POS_SINAL_EN_DIR, exist_ok=True)
        os.makedirs(VIDEOS_POS_SINAL_ES_DIR, exist_ok=True)

        def verificar_urls_gifs():
            """Verifica se as URLs dos GIFs estão acessíveis."""
            print("=== VERIFICANDO URLS DOS GIFS NO GITHUB ===")

            for gif_key, gif_path in GIFS_VALIDOS.items():
                gif_url = f"{GITHUB_BASE_URL}{gif_path}"
                print(f"Verificando URL: {gif_url}")

                try:
                    response = requests.head(gif_url, timeout=5)
                    if response.status_code == 200:
                        print(
                            f"  SUCESSO: URL acessível (código {response.status_code})")
                    else:
                        print(
                            f"  ERRO: URL inacessível (código {response.status_code})")
                except Exception as e:
                    print(f"  ERRO: Falha ao verificar URL: {str(e)}")

            print("\n=== IMPORTANTE ===")
            print("Para que o bot funcione corretamente, ele precisa ser promovido a ADMINISTRADOR em todos os canais.")
            print("Se estiver recebendo erros 'need administrator rights', adicione o bot como administrador nos canais:")
            for idioma, chats in BOT2_CANAIS_CONFIG.items():
                for chat_id in chats:
                    print(f"  - Canal {chat_id} (idioma: {idioma})")
            print("================================\n")

        # Verificar URLs de GIFs no GitHub
        verificar_urls_gifs()

        # Teste manual de envio de GIF
        print("=== TESTE MANUAL DE ENVIO DE GIF ===")
        print("Enviando um teste do GIF pós-sinal diretamente...")

        BOT2_LOGGER.info("=== INICIANDO TESTE MANUAL DE ENVIO DE GIF ===")

        # Criar um sinal de teste para o GIF
        if not ultimo_sinal_enviado:
            ultimo_sinal_enviado = {
                "ativo": "EURUSD",
                "direcao": "CALL",
                "categoria": "Digital",
                "tempo_expiracao_minutos": 5,
                "expiracao_texto": "🕑 Expiração: 5 minutos"
            }
        
        # Remoção do teste de GIF que estava causando problemas
        print("=== TESTE MANUAL REMOVIDO ===")
        BOT2_LOGGER.info("Teste manual de GIF removido para evitar problemas")
        
        print("=== FIM DO TESTE MANUAL ===")
        
        # Teste manual de envio de sinal
        print("=== TESTE MANUAL DE ENVIO DE SINAL ===")
        print("Verificando se deve enviar um sinal de teste agora...")
        
        # Verificar hora atual e enviar sinal manualmente se estiver no minuto 13
        agora = bot2_obter_hora_brasilia()
        print(f"Hora atual: {agora.strftime('%H:%M:%S')}")
        
        # Forçar um envio de sinal para teste
        print("Forçando envio de sinal para teste...")
        enviar_sinal_manual()
        
        print("=== FIM DO TESTE MANUAL DE SINAL ===")

        # Iniciar os bots
        iniciar_ambos_bots()
    except Exception as e:
        print(f"Erro ao iniciar bots: {str(e)}")
        traceback.print_exc()

# Função para enviar sinal manualmente (para testes)
def enviar_sinal_manual():
    """Função para enviar um sinal manualmente para testes."""
    try:
        BOT2_LOGGER.info("Enviando sinal manualmente para teste...")
        resultado = bot2_send_message()
        
        if resultado:
            BOT2_LOGGER.info("Sinal manual enviado com sucesso!")
            return True
        else:
            BOT2_LOGGER.error("Falha ao enviar sinal manual.")
            return False
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao enviar sinal manual: {str(e)}")
        traceback.print_exc()
        return False

def enviar_gif_teste_direto(): 
    """Função mantida como stub para compatibilidade com código existente"""
    BOT2_LOGGER.warning("Função enviar_gif_teste_direto() desativada")
    return False
