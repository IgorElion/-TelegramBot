# -*- coding: utf-8 -*-
"""
Bot Telegram 2 para envio de sinais em canais separados por idioma.
Verso independente que no depende mais do Bot 1.
Os sinais sero enviados da seguinte forma:
- Canal Portugus: -1002424874613
- Canal Ingls: -1002453956387
- Canal Espanhol: -1002446547846
O bot enviar 3 sinais por hora nos minutos 10, 30 e 50.
"""

# Importaes necessrias
import traceback
import socket
import pytz
from datetime import datetime, timedelta, time as dt_time
import json
import random
import time
import schedule
import requests
import logging
import sys
import os
from functools import lru_cache

# Definio da varivel global assets
assets = {}

# Configurao do logger especfico para o Bot 2
BOT2_LOGGER = logging.getLogger('bot2')
BOT2_LOGGER.setLevel(logging.INFO)
bot2_formatter = logging.Formatter('%(asctime)s - BOT2 - %(levelname)s - %(message)s')

# Evitar duplicao de handlers
if not BOT2_LOGGER.handlers:
    bot2_file_handler = logging.FileHandler("bot_telegram_bot2_logs.log")
    bot2_file_handler.setFormatter(bot2_formatter)
    BOT2_LOGGER.addHandler(bot2_file_handler)

    bot2_console_handler = logging.StreamHandler()
    bot2_console_handler.setFormatter(bot2_formatter)
    BOT2_LOGGER.addHandler(bot2_console_handler)

# Credenciais Telegram
BOT2_TOKEN = '7997585882:AAFDyG-BYskj1gyAbh17X5jd6DDClXdluww'

# Configurao dos canais para cada idioma
BOT2_CANAIS_CONFIG = {
    "-1002424874613": {  # Canal para mensagens em portugus
        "idioma": "pt",
        "link_corretora": "https://trade.xxbroker.com/register?aff=741613&aff_model=revenue&afftrack=",
        "fuso_horario": "America/Sao_Paulo"  # Brasil (UTC-3)
    },
    "-1002453956387": {  # Canal para mensagens em ingls
        "idioma": "en",
        "link_corretora": "https://trade.xxbroker.com/register?aff=741727&aff_model=revenue&afftrack=",
        "fuso_horario": "America/New_York"  # EUA (UTC-5 ou UTC-4 no horrio de vero)
    },
    "-1002446547846": {  # Canal para mensagens em espanhol
        "idioma": "es",
        "link_corretora": "https://trade.xxbroker.com/register?aff=741726&aff_model=revenue&afftrack=",
        "fuso_horario": "Europe/Madrid"  # Espanha (UTC+1 ou UTC+2 no horrio de vero)
    }
}

# Lista de IDs dos canais para facilitar iterao
BOT2_CHAT_IDS = list(BOT2_CANAIS_CONFIG.keys())

# ID para compatibilidade com cdigo existente
BOT2_CHAT_ID_CORRETO = BOT2_CHAT_IDS[0]  # Usar o primeiro canal como padro

# Limite de sinais por hora
BOT2_LIMITE_SINAIS_POR_HORA = 1

# Categorias de ativos
ATIVOS_CATEGORIAS = {
    "Binary": [],
    "Blitz": [],
    "Digital": [
        "Gold/Silver (OTC)",
        "Worldcoin (OTC)",
        "USD/THB (OTC)",
        "ETH/USD (OTC)",
        "CHF/JPY (OTC)",
        "Pepe (OTC)",
        "GBP/AUD (OTC)",
        "GBP/CHF",
        "GBP/CAD (OTC)",
        "EUR/JPY (OTC)",
        "AUD/CHF",
        "GER 30 (OTC)",
        "AUD/CHF (OTC)",
        "EUR/AUD",
        "USD/CAD (OTC)",
        "BTC/USD",
        "Amazon/Ebay (OTC)",
        "Coca-Cola Company (OTC)",
        "AIG (OTC)",
        "Amazon/Alibaba (OTC)",
        "Bitcoin Cash (OTC)",
        "AUD/USD",
        "DASH (OTC)",
        "BTC/USD (OTC)",
        "SP 35 (OTC)",
        "TRUMP Coin (OTC)",
        "US 100 (OTC)",
        "EUR/CAD (OTC)",
        "HK 33 (OTC)",
        "Alphabet/Microsoft (OTC)",
        "1000Sats (OTC)",
        "USD/ZAR (OTC)",
        "Litecoin (OTC)",
        "Hamster Kombat (OTC)",
        "USD Currency Index (OTC)",
        "AUS 200 (OTC)",
        "USD/CAD",
        "USD/JPY",
        "MELANIA Coin (OTC)",
        "JP 225 (OTC)",
        "AUD/CAD (OTC)",
        "AUD/JPY (OTC)",
        "US 500 (OTC)"
    ]
}

# Configuraes de horrios especficos para cada ativo
HORARIOS_PADRAO = {
    "USD/BRL_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-00:45", "01:15-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "USOUSD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-06:00", "06:30-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "BTC/USD_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Google_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "EUR/JPY_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "ETH/USD_OTC": {
        "Monday": ["00:00-19:45", "20:15-23:59"],
        "Tuesday": ["00:00-19:45", "20:15-23:59"],
        "Wednesday": ["00:00-19:45", "20:15-23:59"],
        "Thursday": ["00:00-19:45", "20:15-23:59"],
        "Friday": ["00:00-19:45", "20:15-23:59"],
        "Saturday": ["00:00-19:45", "20:15-23:59"],
        "Sunday": ["00:00-19:45", "20:15-23:59"]
    },
    "MELANIA_COIN_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "EUR/GBP_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "Apple_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "Amazon_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "TRUM_Coin_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Nike_Inc_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "DOGECOIN_OTC": {
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"]
    },
    "Tesla_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "SOL/USD_OTC": {
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"]
    },
    "1000Sats_OTC": {
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "XAUUSD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-06:00", "06:30-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "McDonalds_Corporation_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Meta_OTC": {
        "Monday": ["00:00-15:30", "16:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-15:30", "16:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-15:30", "16:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "Coca_Cola_Company_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "CARDANO_OTC": {
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"]
    },
    "EUR/USD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "PEN/USD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-00:45", "01:15-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "Bitcoin_Cash_OTC": {
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "AUD/CAD_OTC": {
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "Tesla/Ford_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "US_100_OTC": {
        "Monday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Tuesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Wednesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Thursday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"]
    },
    "FR_40_OTC": {  # Novo horrio para FR 40 (OTC)
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "AUS_200_OTC": {  # Atualizado com horrios especficos
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
    },
    "US_500_OTC": {  # Atualizado com horrios especficos
        "Monday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Tuesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Wednesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Thursday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"]
    },
    "EU_50_OTC": {  # Novo ativo com horrios especficos
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Gold": {  # Novo ativo com horrios especficos
        "Monday": ["04:00-16:00"],
        "Tuesday": ["04:00-16:00"],
        "Wednesday": ["04:00-16:00"],
        "Thursday": ["04:00-16:00"],
        "Friday": ["04:00-16:00"],
        "Saturday": [],
        "Sunday": []
    },
    "XAUUSD_OTC": {  # Atualizado com horrios especficos
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-06:00", "06:10-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "US2000_OTC": {  # Novo ativo com horrios especficos
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Gala_OTC": {  # Novo horrio especfico para Gala (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Floki_OTC": {  # Novo horrio especfico para Floki (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Graph_OTC": {  # Novo horrio especfico para Graph (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Intel_IBM_OTC": {  # Novo horrio para Intel/IBM (OTC)
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Pyth_OTC": {  # Atualizado para Pyth (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "IOTA_OTC": {  # Atualizado para IOTA (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "DOGECOIN_OTC": {  # Atualizado para DOGECOIN (OTC)
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"]
    },
    "Sei_OTC": {  # Atualizado para Sei (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Decentraland_OTC": {  # Atualizado para Decentraland (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "PEN_USD_OTC": {  # Atualizado para PEN/USD (OTC)
        "Monday": ["00:00-23:59"],
        "Tuesday": ["00:00-00:45", "01:15-23:59"],
        "Wednesday": ["00:00-23:59"],
        "Thursday": ["00:00-23:59"],
        "Friday": ["00:00-23:59"],
        "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-23:59"]
    },
    "Sandbox_OTC": {  # Atualizado para Sandbox (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "TRON_USD_OTC": {  # Atualizado para TRON/USD (OTC)
        "Monday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Tuesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Wednesday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Thursday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Friday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Saturday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"],
        "Sunday": ["00:00-05:45", "06:15-17:45", "18:15-23:59"]
    },
    "Ripple_OTC": {  # Atualizado para Ripple (OTC)
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
    },
    "NEAR_OTC": {  # Atualizado para NEAR (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Arbitrum_OTC": {  # Atualizado para Arbitrum (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Polygon_OTC": {  # Atualizado para Polygon (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "EOS_OTC": {  # Atualizado para EOS (OTC)
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
    },
    "Alphabet_Microsoft_OTC": {  # Novo horrio para Alphabet/Microsoft (OTC)
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Jupiter_OTC": {  # Atualizado para Jupiter (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Dogwifhat_OTC": {  # Novo horrio para Dogwifhat (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Immutable_OTC": {  # Atualizado para Immutable (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Stacks_OTC": {  # Atualizado para Stacks (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Pepe_OTC": {  # Atualizado para Pepe (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Ronin_OTC": {  # Atualizado para Ronin (OTC)
        "Monday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Tuesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Wednesday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Thursday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Friday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Saturday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"],
        "Sunday": ["00:00-05:05", "05:10-12:05", "12:10-23:59"]
    },
    "Gold/Silver_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Worldcoin_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "USD/THB_OTC": {
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
    },
    "ETH/USD_OTC": {
        "Monday": ["00:00-19:45", "20:15-23:59"],
        "Tuesday": ["00:00-19:45", "20:15-23:59"],
        "Wednesday": ["00:00-19:45", "20:15-23:59"],
        "Thursday": ["00:00-19:45", "20:15-23:59"],
        "Friday": ["00:00-19:45", "20:15-23:59"],
        "Saturday": ["00:00-19:45", "20:15-23:59"],
        "Sunday": ["00:00-19:45", "20:15-23:59"]
    },
    "CHF/JPY_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Pepe_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "GBP/AUD_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "GBP/CHF": {
        "Monday": ["00:00-16:00"],
        "Tuesday": ["00:00-16:00"],
        "Wednesday": ["00:00-16:00"],
        "Thursday": ["00:00-16:00"],
        "Friday": ["00:00-14:00"],
                "Saturday": [],
                "Sunday": []
    },
    "GBP/CAD_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "EUR/JPY_OTC": {
                "Monday": ["00:00-23:59"],
                "Tuesday": ["00:00-23:59"],
        "Wednesday": ["00:00-01:00", "01:15-23:59"],
                "Thursday": ["00:00-23:59"],
                "Friday": ["00:00-23:59"],
                "Saturday": ["00:00-23:59"],
                "Sunday": ["00:00-23:59"]
    },
    "AUD/CHF": {
        "Monday": ["00:00-16:00"],
        "Tuesday": ["00:00-16:00"],
        "Wednesday": ["00:00-16:00"],
        "Thursday": ["00:00-16:00"],
        "Friday": ["00:00-14:00"],
                "Saturday": [],
                "Sunday": []
    },
    "GER_30_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "AUD/CHF_OTC": {
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
    },
    "EUR/AUD": {
        "Monday": ["00:00-16:00"],
        "Tuesday": ["00:00-16:00"],
        "Wednesday": ["00:00-16:00"],
        "Thursday": ["00:00-16:00"],
        "Friday": ["00:00-14:00"],
                "Saturday": [],
                "Sunday": []
    },
    "USD/CAD_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "BTC/USD": {
        "Monday": ["03:00-15:00"],
        "Tuesday": ["03:00-15:00"],
        "Wednesday": ["03:00-15:00"],
        "Thursday": ["03:00-15:00"],
        "Friday": ["03:00-15:00"],
                "Saturday": [],
                "Sunday": []
    },
    "Amazon/Ebay_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Coca-Cola_Company_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "AIG_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Amazon/Alibaba_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "Bitcoin_Cash_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "USD Currency Index_OTC": {
        "Monday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-10:00", "10:30-18:00"],
        "Saturday": [],
        "Sunday": ["19:00-23:59"]
    },
    "AUS_200_OTC": {  # J existe, mas atualizando para os novos horrios
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
    },
    "USD/CAD": {
        "Monday": ["03:00-15:00"],
        "Tuesday": ["03:00-15:00", "21:00-23:59"],
        "Wednesday": ["00:00-15:00"],
        "Thursday": ["03:00-15:00"],
        "Friday": ["03:00-15:00"],
        "Saturday": [],
        "Sunday": []
    },
    "USD/JPY": {
        "Monday": ["00:00-14:00", "23:00-23:59"],
        "Tuesday": ["00:00-14:00", "23:00-23:59"],
        "Wednesday": ["00:00-14:00", "23:00-23:59"],
        "Thursday": ["00:00-14:00", "23:00-23:59"],
        "Friday": ["00:00-14:00"],
        "Saturday": [],
        "Sunday": ["23:00-23:59"]
    },
    "MELANIA_Coin_OTC": {  # J existe, mantendo a mesma configurao
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "JP_225_OTC": {
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
    },
    "AUD/CAD_OTC": {  # J existe, atualizando a configurao
        "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
        "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
    },
    "AUD/JPY_OTC": {
        "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
        "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
    },
    "US_500_OTC": {  # J existe, atualizando a configurao
        "Monday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Tuesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Wednesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
        "Thursday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
                "Friday": ["00:00-23:59"],
                "Saturday": ["00:00-23:59"],
        "Sunday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"]
    },
}

def adicionar_blitz(lista_ativos):
    for ativo in lista_ativos:
        if ativo in HORARIOS_PADRAO:
            assets[ativo] = HORARIOS_PADRAO[ativo]
        else:
            assets[ativo] = {
                "Monday": ["00:00-23:59"],
                "Tuesday": ["00:00-23:59"],
                "Wednesday": ["00:00-23:59"],
                "Thursday": ["00:00-23:59"],
                "Friday": ["00:00-23:59"],
                "Saturday": ["00:00-23:59"],
                "Sunday": ["00:00-23:59"]
            }
        ATIVOS_CATEGORIAS[ativo] = "Blitz"

# Exemplos de como adicionar ativos (comentado para referncia)
# adicionar_forex(["EUR/USD", "GBP/USD"])
# adicionar_crypto(["BTC/USD", "ETH/USD"])
# adicionar_stocks(["AAPL", "MSFT"])

# Funo para parsear os horrios
@lru_cache(maxsize=128)
def parse_time_range(time_str):
    """
    Converte uma string de intervalo de tempo (e.g. "09:30-16:00") para um par de time objects.
    """
    start_str, end_str = time_str.split('-')
    start_time = datetime.strptime(start_str, "%H:%M").time()
    end_time = datetime.strptime(end_str, "%H:%M").time()
    return start_time, end_time

# Funo para verificar disponibilidade de ativos
def is_asset_available(asset, current_time=None, current_day=None):
    """
    Verifica se um ativo est disponvel no horrio atual.
    """
    if asset not in assets:
        return False

    if current_day not in assets[asset]:
        return False

    if not current_time:
        current_time = datetime.now().strftime("%H:%M")

    current_time_obj = datetime.strptime(current_time, "%H:%M").time()

    for time_range in assets[asset][current_day]:
        start_time, end_time = parse_time_range(time_range)
        if start_time <= current_time_obj <= end_time:
            return True

    return False

# Funo para obter hora no fuso horrio de Braslia (especfica para Bot 2)
def bot2_obter_hora_brasilia():
    """
    Retorna a hora atual no fuso horrio de Braslia.
    """
    fuso_horario_brasilia = pytz.timezone('America/Sao_Paulo')
    return datetime.now(fuso_horario_brasilia)

def bot2_verificar_disponibilidade():
    """
    Verifica quais ativos esto disponveis para o sinal atual.
    Retorna uma lista de ativos disponveis.
    """
    agora = bot2_obter_hora_brasilia()
    current_time = agora.strftime("%H:%M")
    current_day = agora.strftime("%A")

    # Se BOT2_ATIVOS_CATEGORIAS ainda no foi inicializado, retornar lista vazia
    if not hasattr(sys.modules[__name__], 'BOT2_ATIVOS_CATEGORIAS') or not BOT2_ATIVOS_CATEGORIAS:
        BOT2_LOGGER.warning(f"BOT2_ATIVOS_CATEGORIAS no inicializado ou vazio. Usando ativos padro.")
        # Usar alguns ativos padro que funcionam bem como exemplo
        default_assets = ["Immutable (OTC)", "Ripple (OTC)", "SOL/USD (OTC)"]
        return default_assets

    # Verificar ativos disponveis
    available_assets = []
    
    # Primeira verificao: procurar ativos que estejam especificamente em ATIVOS_CATEGORIAS["Digital"]
    for ativo in ATIVOS_CATEGORIAS["Digital"]:
        if is_asset_available(ativo, current_time, current_day):
            available_assets.append(ativo)
    
    # Se no houver ativos disponveis na categoria Digital, tentar outras categorias
    if not available_assets:
        for ativo in BOT2_ATIVOS_CATEGORIAS.keys():
            if is_asset_available(ativo, current_time, current_day):
                available_assets.append(ativo)
    
    # Se ainda no houver ativos disponveis, usar ativos padro como fallback
    if not available_assets:
        BOT2_LOGGER.warning(f"Nenhum ativo disponvel no momento. Usando ativos padro.")
        fallback_assets = ["Immutable (OTC)", "Ripple (OTC)", "SOL/USD (OTC)"]
        return fallback_assets

    return available_assets

def bot2_gerar_sinal_aleatorio():
    """
    Gera um sinal aleatrio para enviar.
    Retorna um dicionrio com os dados do sinal ou None se no houver sinal.
    """
    ativos_disponiveis = bot2_verificar_disponibilidade()
    if not ativos_disponiveis:
        return None

    ativo = random.choice(ativos_disponiveis)
    direcao = random.choice(['buy', 'sell'])
    categoria = BOT2_ATIVOS_CATEGORIAS.get(ativo, "No categorizado")

    # Defina o tempo de expirao fixo em 1 minuto para todas as categorias
        tempo_expiracao_minutos = 1
        expiracao_time = bot2_obter_hora_brasilia() + timedelta(minutes=tempo_expiracao_minutos)
    expiracao_texto = f"? Expirao: {tempo_expiracao_minutos} minuto ({expiracao_time.strftime('%H:%M')})"

    return {
        'ativo': ativo,
        'direcao': direcao,
        'categoria': categoria,
        'expiracao_texto': expiracao_texto,
        'tempo_expiracao_minutos': int(tempo_expiracao_minutos)  # Garante que seja inteiro
    }

# Funo para obter hora no fuso horrio especfico (a partir da hora de Braslia)
def bot2_converter_fuso_horario(hora_brasilia, fuso_destino):
    """
    Converte uma hora do fuso horrio de Braslia para o fuso horrio de destino.
    
    Args:
        hora_brasilia (datetime): Hora no fuso horrio de Braslia
        fuso_destino (str): Nome do fuso horrio de destino (ex: 'America/New_York')
        
    Returns:
        datetime: Hora convertida para o fuso horrio de destino
    """
    # Garantir que hora_brasilia tenha informaes de fuso horrio
    fuso_horario_brasilia = pytz.timezone('America/Sao_Paulo')
    
    # Se a hora no tiver informao de fuso, adicionar
    if hora_brasilia.tzinfo is None:
        hora_brasilia = fuso_horario_brasilia.localize(hora_brasilia)
    
    # Converter para o fuso horrio de destino
    fuso_destino_tz = pytz.timezone(fuso_destino)
    hora_destino = hora_brasilia.astimezone(fuso_destino_tz)
    
    return hora_destino

def bot2_formatar_mensagem(sinal, hora_formatada, idioma):
    """
    Formata a mensagem do sinal para o idioma especificado.
    Retorna a mensagem formatada no idioma correto (pt, en ou es).
    """
    ativo = sinal['ativo']
    direcao = sinal['direcao']
    categoria = sinal['categoria']
    tempo_expiracao_minutos = sinal['tempo_expiracao_minutos']

    # Debug: registrar os dados sendo usados para formatar a mensagem
    BOT2_LOGGER.info(f"Formatando mensagem com: ativo={ativo}, direção={direcao}, categoria={categoria}, tempo={tempo_expiracao_minutos}, idioma={idioma}")

    # Formatação do nome do ativo para exibição
    nome_ativo_exibicao = ativo.replace("Digital_", "") if ativo.startswith("Digital_") else ativo
    if "(OTC)" in nome_ativo_exibicao and not " (OTC)" in nome_ativo_exibicao:
        nome_ativo_exibicao = nome_ativo_exibicao.replace("(OTC)", " (OTC)")

    # Configura ações e emojis conforme a direção
    action_pt = "PUT" if direcao == 'sell' else "CALL"
    action_en = "PUT" if direcao == 'sell' else "CALL"
    action_es = "PUT" if direcao == 'sell' else "CALL"
    emoji = "🟥" if direcao == 'sell' else "🟩"

    # Encontrar o fuso horário adequado para o idioma
    fuso_horario = "America/Sao_Paulo"  # Padrão (Brasil)
    
    # Buscar o fuso horário na configuração dos canais
    for chat_id, config in BOT2_CANAIS_CONFIG.items():
        if config["idioma"] == idioma:
            fuso_horario = config.get("fuso_horario", "America/Sao_Paulo")
            break
    
    # Hora de entrada convertida para datetime no fuso horário de Brasília
    hora_entrada = datetime.strptime(hora_formatada, "%H:%M")
    hora_entrada_br = bot2_obter_hora_brasilia().replace(hour=hora_entrada.hour, minute=hora_entrada.minute, second=0, microsecond=0)
    
    # Converter para o fuso horário do canal
    hora_entrada_local = bot2_converter_fuso_horario(hora_entrada_br, fuso_horario)
    
    # Calcular horário de expiração no fuso horário de Brasília
    hora_expiracao_br = hora_entrada_br + timedelta(minutes=tempo_expiracao_minutos)
    
    # Converter expiração para o fuso horário do canal
    hora_expiracao_local = bot2_converter_fuso_horario(hora_expiracao_br, fuso_horario)
    
    # Calcular horários de gale (reentrada) no fuso horário de Brasília
    # 1° GALE é o horário de expiração + 1 minuto
    hora_gale1_br = hora_expiracao_br + timedelta(minutes=5)
    # 2° GALE é o 1° GALE + 1 minuto
    hora_gale2_br = hora_gale1_br + timedelta(minutes=1)
    # 3° GALE é o 2° GALE + 1 minuto
    hora_gale3_br = hora_gale2_br + timedelta(minutes=1)
    
    # Converter gales para o fuso horário do canal
    hora_gale1_local = bot2_converter_fuso_horario(hora_gale1_br, fuso_horario)
    hora_gale2_local = bot2_converter_fuso_horario(hora_gale2_br, fuso_horario)
    hora_gale3_local = bot2_converter_fuso_horario(hora_gale3_br, fuso_horario)
    
    # Formatar os horários para exibição (no fuso horário local)
    hora_entrada_formatada = hora_entrada_local.strftime("%H:%M")
    hora_expiracao_formatada = hora_expiracao_local.strftime("%H:%M")
    hora_gale1_formatada = hora_gale1_local.strftime("%H:%M")
    hora_gale2_formatada = hora_gale2_local.strftime("%H:%M")
    hora_gale3_formatada = hora_gale3_local.strftime("%H:%M")
    
    # Registrar a conversão de fuso horário
    BOT2_LOGGER.info(f"Horários convertidos para fuso {fuso_horario}: Entrada={hora_entrada_formatada}, " +
                     f"Expiração={hora_expiracao_formatada}, Gale1={hora_gale1_formatada}, " +
                     f"Gale2={hora_gale2_formatada}, Gale3={hora_gale3_formatada}")

    # Formatação para singular ou plural de "minuto" baseado no tempo de expiração
    texto_minutos_pt = "minuto" if tempo_expiracao_minutos == 1 else "minutos"
    texto_minutos_en = "minute" if tempo_expiracao_minutos == 1 else "minutes"
    texto_minutos_es = "minuto" if tempo_expiracao_minutos == 1 else "minutos"

    # Configurar links baseados no idioma
    if idioma == "pt":
        link_corretora = "https://trade.xxbroker.com/register?aff=741613&aff_model=revenue&afftrack="
        link_video = "https://t.me/trendingbrazil/215"
        texto_corretora = "Clique para abrir a corretora"
        texto_video = "Clique aqui"
        texto_tempo = "TEMPO PARA"
        texto_gale1 = "1º GALE — TEMPO PARA"
        texto_gale2 = "2º GALE TEMPO PARA"
        texto_gale3 = "3º GALE TEMPO PARA"
    elif idioma == "en":
        link_corretora = "https://trade.xxbroker.com/register?aff=741727&aff_model=revenue&afftrack="
        link_video = "https://t.me/trendingenglish/226"
        texto_corretora = "Click to open broker"
        texto_video = "Click here"
        texto_tempo = "TIME UNTIL"
        texto_gale1 = "1st GALE — TIME UNTIL"
        texto_gale2 = "2nd GALE TIME UNTIL"
        texto_gale3 = "3rd GALE TIME UNTIL"
    else:  # espanhol
        link_corretora = "https://trade.xxbroker.com/register?aff=741726&aff_model=revenue&afftrack="
        link_video = "https://t.me/trendingespanish/212"
        texto_corretora = "Haga clic para abrir el corredor"
        texto_video = "Haga clic aquí"
        texto_tempo = "TIEMPO HASTA"
        texto_gale1 = "1º GALE — TIEMPO HASTA"
        texto_gale2 = "2º GALE TIEMPO HASTA"
        texto_gale3 = "3º GALE TIEMPO HASTA"
    
    # Determinar a categoria de exibição (Binary, Digital)
    categoria_exibicao = "Binary"
    if isinstance(categoria, list) and len(categoria) > 0:
        # Escolher apenas um item da lista para exibir (o primeiro)
        categoria_exibicao = categoria[0]
    else:
        categoria_exibicao = categoria  # Usar o valor de categoria diretamente
    
    # Mensagem em PT
    mensagem_pt = (f"💰{tempo_expiracao_minutos} {texto_minutos_pt} de expiração\n"
            f"{nome_ativo_exibicao};{hora_entrada_formatada};{action_pt} {emoji} {categoria_exibicao}\n\n"
            f"🕐{texto_tempo} {hora_expiracao_formatada}\n\n"
            f"{texto_gale1} {hora_gale1_formatada}\n"
            f"{texto_gale2} {hora_gale2_formatada}\n"
            f"{texto_gale3} {hora_gale3_formatada}\n\n"
            f"📲 <a href=\"{link_corretora}\" data-js-focus-visible=\"\">&#8203;{texto_corretora}</a>\n"
            f"🙋‍♂️ Não sabe operar ainda? <a href=\"{link_video}\" data-js-focus-visible=\"\">&#8203;{texto_video}</a>")
            
    # Mensagem em EN
    mensagem_en = (f"💰{tempo_expiracao_minutos} {texto_minutos_en} expiration\n"
            f"{nome_ativo_exibicao};{hora_entrada_formatada};{action_en} {emoji} {categoria_exibicao}\n\n"
            f"🕐{texto_tempo} {hora_expiracao_formatada}\n\n"
            f"{texto_gale1} {hora_gale1_formatada}\n"
            f"{texto_gale2} {hora_gale2_formatada}\n"
            f"{texto_gale3} {hora_gale3_formatada}\n\n"
            f"📲 <a href=\"{link_corretora}\" data-js-focus-visible=\"\">&#8203;{texto_corretora}</a>\n"
            f"🙋‍♂️ Don't know how to trade yet? <a href=\"{link_video}\" data-js-focus-visible=\"\">&#8203;{texto_video}</a>")
            
    # Mensagem em ES
    mensagem_es = (f"💰{tempo_expiracao_minutos} {texto_minutos_es} de expiración\n"
            f"{nome_ativo_exibicao};{hora_entrada_formatada};{action_es} {emoji} {categoria_exibicao}\n\n"
            f"🕐{texto_tempo} {hora_expiracao_formatada}\n\n"
            f"{texto_gale1} {hora_gale1_formatada}\n"
            f"{texto_gale2} {hora_gale2_formatada}\n"
            f"{texto_gale3} {hora_gale3_formatada}\n\n"
            f"📲 <a href=\"{link_corretora}\" data-js-focus-visible=\"\">&#8203;{texto_corretora}</a>\n"
            f"🙋‍♂️ ¿No sabe operar todavía? <a href=\"{link_video}\" data-js-focus-visible=\"\">&#8203;{texto_video}</a>")
            
    # Verificar se há algum texto não esperado antes de retornar a mensagem
    if idioma == "pt":
        mensagem_final = mensagem_pt
    elif idioma == "en":
        mensagem_final = mensagem_en
    elif idioma == "es":
        mensagem_final = mensagem_es
    else:  # Padrão para qualquer outro idioma (português)
        mensagem_final = mensagem_pt
        
    BOT2_LOGGER.info(f"Mensagem formatada final para idioma {idioma}: {mensagem_final}")
    return mensagem_final

def bot2_registrar_envio(ativo, direcao, categoria):
    """
    Registra o envio de um sinal no banco de dados.
    Implementao futura: Aqui voc adicionaria o cdigo para registrar o envio no banco de dados.
    """
    pass

# Inicializao do Bot 2 quando este arquivo for executado
bot2_sinais_agendados = False
bot2_contador_sinais = 0  # Contador para rastrear quantos sinais foram enviados

# URLs promocionais
XXBROKER_URL = "https://trade.xxbroker.com/register?aff=741613&aff_model=revenue&afftrack="
VIDEO_TELEGRAM_URL = "https://t.me/trendingbrazil/215"
VIDEO_TELEGRAM_ES_URL = "https://t.me/trendingespanish/212"
VIDEO_TELEGRAM_EN_URL = "https://t.me/trendingenglish/226"

# Base directory para os arquivos do projeto
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# Definindo diretrios para os vdeos
VIDEOS_DIR = os.path.join(BASE_DIR, "videos")
os.makedirs(VIDEOS_DIR, exist_ok=True)

# Subdiretrios para organizar os vdeos
VIDEOS_POS_SINAL_DIR = os.path.join(VIDEOS_DIR, "pos_sinal")
VIDEOS_PROMO_DIR = os.path.join(VIDEOS_DIR, "promo")
VIDEOS_ESPECIAL_DIR = os.path.join(VIDEOS_DIR, "gif_especial")  # Alterado de "especial" para "gif_especial"

# Criar os subdiretrios se no existirem
os.makedirs(VIDEOS_POS_SINAL_DIR, exist_ok=True)
os.makedirs(VIDEOS_PROMO_DIR, exist_ok=True)
os.makedirs(VIDEOS_ESPECIAL_DIR, exist_ok=True)

# Diretrios para vdeos ps-sinal em cada idioma
VIDEOS_POS_SINAL_PT_DIR = os.path.join(VIDEOS_POS_SINAL_DIR, "pt")
VIDEOS_POS_SINAL_EN_DIR = os.path.join(VIDEOS_POS_SINAL_DIR, "en")
VIDEOS_POS_SINAL_ES_DIR = os.path.join(VIDEOS_POS_SINAL_DIR, "es")

# Diretrios para vdeos especiais em cada idioma
VIDEOS_ESPECIAL_PT_DIR = os.path.join(VIDEOS_ESPECIAL_DIR, "pt")
VIDEOS_ESPECIAL_EN_DIR = os.path.join(VIDEOS_ESPECIAL_DIR, "en")
VIDEOS_ESPECIAL_ES_DIR = os.path.join(VIDEOS_ESPECIAL_DIR, "es")

# Criar os subdiretrios para cada idioma se no existirem
os.makedirs(VIDEOS_POS_SINAL_PT_DIR, exist_ok=True)
os.makedirs(VIDEOS_POS_SINAL_EN_DIR, exist_ok=True)
os.makedirs(VIDEOS_POS_SINAL_ES_DIR, exist_ok=True)
os.makedirs(VIDEOS_ESPECIAL_PT_DIR, exist_ok=True)
os.makedirs(VIDEOS_ESPECIAL_EN_DIR, exist_ok=True)
os.makedirs(VIDEOS_ESPECIAL_ES_DIR, exist_ok=True)

# Configurar vdeos ps-sinal especficos para cada idioma 
VIDEOS_POS_SINAL = {
    "pt": [
        os.path.join(VIDEOS_POS_SINAL_PT_DIR, "padro.gif"),  # Vdeo padro em portugus (9/10)
        os.path.join(VIDEOS_POS_SINAL_PT_DIR, "especial.gif")  # Vdeo especial em portugus (1/10)
    ],
    "en": [
        os.path.join(VIDEOS_POS_SINAL_EN_DIR, "padrao.gif"),  # Vdeo padro em ingls (9/10)
        os.path.join(VIDEOS_POS_SINAL_EN_DIR, "especial.gif")  # Vdeo especial em ingls (1/10)
    ],
    "es": [
        os.path.join(VIDEOS_POS_SINAL_ES_DIR, "padrao.gif"),  # Vdeo padro em espanhol (9/10)
        os.path.join(VIDEOS_POS_SINAL_ES_DIR, "especial.gif")  # Vdeo especial em espanhol (1/10)
    ]
}

# Vdeo especial a cada 3 sinais (por idioma)
VIDEOS_ESPECIAIS = {
    "pt": os.path.join(VIDEOS_ESPECIAL_PT_DIR, "especial.gif"),
    "en": os.path.join(VIDEOS_ESPECIAL_EN_DIR, "especial.gif"),
    "es": os.path.join(VIDEOS_ESPECIAL_ES_DIR, "especial.gif")
}

# Vdeos promocionais por idioma
VIDEOS_PROMO = {
    "pt": os.path.join(VIDEOS_PROMO_DIR, "pt", "promo.gif"),
    "en": os.path.join(VIDEOS_PROMO_DIR, "en", "promo.gif"),
    "es": os.path.join(VIDEOS_PROMO_DIR, "es", "promo.gif")
}

# Diretrios para vdeos especiais em cada idioma
VIDEOS_ESPECIAL_PT_DIR = os.path.join(VIDEOS_ESPECIAL_DIR, "pt")
VIDEOS_ESPECIAL_EN_DIR = os.path.join(VIDEOS_ESPECIAL_DIR, "en")
VIDEOS_ESPECIAL_ES_DIR = os.path.join(VIDEOS_ESPECIAL_DIR, "es")

# Logs para diagnstico
print(f"VIDEOS_DIR: {VIDEOS_DIR}")
print(f"VIDEOS_ESPECIAL_DIR: {VIDEOS_ESPECIAL_DIR}")
print(f"VIDEOS_ESPECIAL_PT_DIR: {VIDEOS_ESPECIAL_PT_DIR}")

# Caminho para o vdeo do GIF especial PT
VIDEO_GIF_ESPECIAL_PT = os.path.join(VIDEOS_ESPECIAL_PT_DIR, "especial.gif")
print(f"VIDEO_GIF_ESPECIAL_PT: {VIDEO_GIF_ESPECIAL_PT}")

# Contador para controle dos GIFs ps-sinal
contador_pos_sinal = 0
contador_desde_ultimo_especial = 0

# Adicionar variveis para controle da imagem especial diria
import random
horario_especial_diario = None
imagem_especial_ja_enviada_hoje = False

# Funo para definir o horrio especial dirio
def definir_horario_especial_diario():
    global horario_especial_diario, imagem_especial_ja_enviada_hoje
    
    # Reseta o status de envio da imagem especial
    imagem_especial_ja_enviada_hoje = False
    
    # Define um horrio aleatrio entre 0 e 23 horas
    horas_disponiveis = list(range(0, 24))
    hora_aleatoria = random.choice(horas_disponiveis)
    
    # Definir o mesmo minuto usado para o envio de sinais
    minuto_envio = 13
    
    # Define o horrio especial para hoje
    horario_atual = bot2_obter_hora_brasilia()
    horario_especial_diario = horario_atual.replace(
        hour=hora_aleatoria, 
        minute=minuto_envio,  # Mesmo minuto usado para envio de sinais
        second=0, 
        microsecond=0
    )
    
    BOT2_LOGGER.info(f"Horrio especial dirio definido para: {horario_especial_diario.strftime('%H:%M')}")
    
    # Se o horrio j passou hoje, reagenda para amanh
    if horario_especial_diario < horario_atual:
        horario_especial_diario = horario_especial_diario + timedelta(days=1)
        BOT2_LOGGER.info(f"Horrio j passou hoje, reagendado para amanh: {horario_especial_diario.strftime('%H:%M')}")

# Agendar a redefinio do horrio especial dirio  meia-noite
def agendar_redefinicao_horario_especial():
    schedule.every().day.at("00:01").do(definir_horario_especial_diario)
    BOT2_LOGGER.info("Agendada redefinio do horrio especial dirio para meia-noite e um minuto")

# Chamar a funo no incio para definir o horrio especial para hoje
definir_horario_especial_diario()
agendar_redefinicao_horario_especial()

def bot2_enviar_gif_pos_sinal():
    """Envia um GIF ou imagem pós-sinal para todos os canais."""
    try:
        global contador_pos_sinal
        global contador_desde_ultimo_especial
        global imagem_especial_ja_enviada_hoje
        global horario_especial_diario
        
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.info(f"[{horario_atual}] INICIANDO ENVIO DA IMAGEM PÓS-SINAL...")
        
        # Limpar o próprio agendamento para garantir que este seja executado apenas uma vez por sinal
        schedule.clear('bot2_pos_sinal')
        BOT2_LOGGER.info(f"[{horario_atual}] Agendamento de gif pós-sinal limpo para evitar duplicações.")
        
        # Tentar importar PIL para verificar se uma imagem tem transparência
        try:
            from PIL import Image
            BOT2_LOGGER.info(f"[{horario_atual}] Biblioteca PIL (Pillow) disponível para processamento de imagem")
            pillow_disponivel = True
        except ImportError:
            pillow_disponivel = False
            BOT2_LOGGER.warning(f"[{horario_atual}] Biblioteca PIL (Pillow) não disponível. As imagens serão enviadas sem tratamento.")
        
        # Incrementar o contador de envios pós-sinal
        contador_pos_sinal += 1
        contador_desde_ultimo_especial += 1
        
        BOT2_LOGGER.info(f"[{horario_atual}] Contador pós-sinal: {contador_pos_sinal}, Contador desde último especial: {contador_desde_ultimo_especial}")
        
        # Determinar se devemos enviar a imagem especial
        # Verifica se é o horário especial definido para hoje e se a imagem especial ainda não foi enviada hoje
        horario_especial_agora = False
        if horario_especial_diario and not imagem_especial_ja_enviada_hoje:
            # Compara apenas hora e minuto, ignorando segundos
            if (agora.hour == horario_especial_diario.hour and 
                agora.minute == horario_especial_diario.minute):
                horario_especial_agora = True
                imagem_especial_ja_enviada_hoje = True
                BOT2_LOGGER.info(f"[{horario_atual}] HORÁRIO ESPECIAL DETECTADO! Enviando imagem especial pela única vez no dia")
        
        # Verifica se deve enviar imagem especial (apenas no horário especial do dia)
        if horario_especial_agora:
            BOT2_LOGGER.info(f"[{horario_atual}] ENVIANDO A IMAGEM ESPECIAL (sinal {contador_pos_sinal})")
            deve_enviar_especial = True
            
            # Se foi por causa do horário especial, registra isso
            if horario_especial_agora:
                BOT2_LOGGER.info(f"[{horario_atual}] Envio de imagem especial foi acionado pelo horário especial do dia")
            
            contador_desde_ultimo_especial = 0
        else:
            BOT2_LOGGER.info(f"[{horario_atual}] ENVIANDO A IMAGEM PADRÃO (sinal {contador_pos_sinal})")
            deve_enviar_especial = False
        
        # Loop para enviar aos canais configurados
        for chat_id in BOT2_CHAT_IDS:
            config_canal = BOT2_CANAIS_CONFIG[chat_id]
            idioma = config_canal["idioma"]
            
            # Diretório base para imagens
            dir_base = f"videos/pos_sinal/{idioma}"
            
            # Nomes de arquivos padrão
            nome_padrao = "padrao.gif"
            nome_especial = "especial.gif"
            
            # Determinar qual imagem enviar com base no idioma
            nome_arquivo = nome_especial if deve_enviar_especial else nome_padrao
            
            # Tentar encontrar o arquivo no formato correto
            possiveis_formatos = ['.gif']
            imagem_path = None
            
            # Primeiro, tenta encontrar o arquivo exato
            for formato in possiveis_formatos:
                # Remove a extensão atual e adiciona o formato sendo testado
                nome_base = nome_arquivo.rsplit('.', 1)[0]
                caminho = f"{dir_base}/{nome_base}{formato}"
                
                if os.path.exists(caminho):
                    imagem_path = caminho
                    BOT2_LOGGER.info(f"[{horario_atual}] Encontrada imagem: {caminho}")
                    break
                    
                # Tenta com acento para compatibilidade
                if nome_base == "padrao":
                    caminho = f"{dir_base}/padrão{formato}"
                    if os.path.exists(caminho):
                        imagem_path = caminho
                        BOT2_LOGGER.info(f"[{horario_atual}] Encontrada imagem com acento: {caminho}")
                        break
            
            # Se não encontrou imagem no idioma específico, usa o fallback em português
            if not imagem_path:
                fallback_dir = f"videos/pos_sinal/pt"
                for formato in possiveis_formatos:
                    nome_base = nome_arquivo.rsplit('.', 1)[0]
                    fallback_path = f"{fallback_dir}/{nome_base}{formato}"
                    
                    if os.path.exists(fallback_path):
                        imagem_path = fallback_path
                        BOT2_LOGGER.info(f"[{horario_atual}] Usando fallback em português: {fallback_path}")
                        break
                        
                    # Tenta com acento para compatibilidade
                    if nome_base == "padrao":
                        fallback_path = f"{fallback_dir}/padrão{formato}"
                        if os.path.exists(fallback_path):
                            imagem_path = fallback_path
                            BOT2_LOGGER.info(f"[{horario_atual}] Usando fallback em português com acento: {fallback_path}")
                            break
            
            # Se ainda não encontrou nenhuma imagem, log de erro e continua para o próximo canal
            if not imagem_path:
                BOT2_LOGGER.error(f"[{horario_atual}] ERRO: Não foi possível encontrar nenhuma imagem para o canal {chat_id}")
                continue
                
            BOT2_LOGGER.info(f"[{horario_atual}] Enviando imagem pós-sinal para o canal {chat_id} no idioma {idioma}: {imagem_path}")
            
            # Verifica se o arquivo é um GIF
            if imagem_path.lower().endswith('.gif'):
                BOT2_LOGGER.info(f"[{horario_atual}] Detectado arquivo GIF, enviando como animação")
                try:
                    # Método melhorado para enviar GIFs como animações que são mostradas automaticamente
                    with open(imagem_path, 'rb') as animation_file:
                        url_animation = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendAnimation"
                        # Parâmetros essenciais para garantir que a animação seja reproduzida automaticamente
                        data = {
                            'chat_id': chat_id,
                            'disable_notification': False,  # Garantir notificação
                            'parse_mode': 'HTML',
                            'has_spoiler': False,  # Sem spoiler para garantir visualização imediata
                        }
                        
                        # Criar o objeto MultipartEncoder para upload do arquivo
                        import requests
                        files = {'animation': (os.path.basename(imagem_path), animation_file, 'image/gif')}
                        
                        # Enviar a animação
                        animation_response = requests.post(url_animation, files=files, data=data)
                        
                        if animation_response.status_code == 200:
                            BOT2_LOGGER.info(f"[{horario_atual}] ✓ GIF ENVIADO COM SUCESSO")
                            continue
                        else:
                            BOT2_LOGGER.warning(f"[{horario_atual}] ✗ Não foi possível enviar como GIF: {animation_response.text}")
                            # Tente um método alternativo se o primeiro método falhar
                            BOT2_LOGGER.info(f"[{horario_atual}] Tentando método alternativo de envio de GIF")
                            
                            # Reabrir o arquivo para segundo método
                            animation_file.seek(0)
                            url_alt = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendDocument"
                            files = {'document': (os.path.basename(imagem_path), animation_file, 'image/gif')}
                            data = {'chat_id': chat_id, 'disable_content_type_detection': True}
                            alt_response = requests.post(url_alt, files=files, data=data)
                            
                            if alt_response.status_code == 200:
                                BOT2_LOGGER.info(f"[{horario_atual}] ✓ GIF ENVIADO COM SUCESSO (método alternativo)")
                            else:
                                BOT2_LOGGER.error(f"[{horario_atual}] ✗ Falha também no método alternativo: {alt_response.text}")
                except Exception as e:
                    BOT2_LOGGER.error(f"[{horario_atual}] Erro ao processar arquivo GIF: {str(e)}")
                    
                    # Tentativa final: enviar como foto se tudo falhar
                    try:
                        BOT2_LOGGER.info(f"[{horario_atual}] Última tentativa: enviar como foto")
                        with open(imagem_path, 'rb') as photo_file:
                            url_photo = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendPhoto"
                            files = {'photo': photo_file}
                            data = {'chat_id': chat_id}
                            
                            photo_response = requests.post(url_photo, files=files, data=data)
                            if photo_response.status_code == 200:
                                BOT2_LOGGER.info(f"[{horario_atual}] ✓ GIF ENVIADO COMO FOTO (último recurso)")
                            else:
                                BOT2_LOGGER.error(f"[{horario_atual}] ✗ Falha em todos os métodos de envio")
                    except Exception as final_error:
                        BOT2_LOGGER.error(f"[{horario_atual}] Erro na tentativa final: {str(final_error)}")
            else:
                # Para imagens que não são GIF, enviar como foto
                try:
                    BOT2_LOGGER.info(f"[{horario_atual}] Enviando imagem como foto")
                    with open(imagem_path, 'rb') as photo_file:
                        url_photo = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendPhoto"
                        files = {'photo': photo_file}
                        data = {'chat_id': chat_id}
                        
                        photo_response = requests.post(url_photo, files=files, data=data)
                        if photo_response.status_code == 200:
                            BOT2_LOGGER.info(f"[{horario_atual}] ✓ IMAGEM ENVIADA COMO FOTO com sucesso")
                        else:
                            BOT2_LOGGER.error(f"[{horario_atual}] ✗ Erro ao enviar como foto: {photo_response.text}")
                except Exception as photo_error:
                    BOT2_LOGGER.error(f"[{horario_atual}] ✗ Erro ao processar envio como foto: {str(photo_error)}")
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao enviar GIF pós-sinal: {str(e)}")
        import traceback
        BOT2_LOGGER.error(traceback.format_exc())

# Funo para enviar mensagem promocional antes do sinal
def bot2_enviar_promo_pre_sinal():
    """
    Envia um vdeo promocional 10 minutos antes do sinal.
     seguido de uma mensagem com link da corretora.
    """
    try:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.info(f"[{horario_atual}] INICIANDO ENVIO DA MENSAGEM PR-SINAL...")
        
        # Loop para enviar aos canais configurados
        for chat_id in BOT2_CHAT_IDS:
            # Pegar configurao do canal
            config_canal = BOT2_CANAIS_CONFIG[chat_id]
            idioma = config_canal.get("idioma", "pt")  # Usar portugus como padro
            link_corretora = config_canal.get("link_corretora", XXBROKER_URL)
            
            # Determinar qual vdeo enviar com base no idioma
            if idioma in VIDEOS_PROMO:
                video_path = VIDEOS_PROMO[idioma]
                if not os.path.exists(video_path):
                    BOT2_LOGGER.error(f"[{horario_atual}] ERRO: Arquivo de vdeo promo no encontrado para {idioma}: {video_path}")
                    # Tentar usar portugus como fallback
                    video_path = VIDEOS_PROMO.get("pt", "")
                    if not os.path.exists(video_path):
                        BOT2_LOGGER.error(f"[{horario_atual}] ERRO: Arquivo de vdeo promo fallback tambm no encontrado: {video_path}")
                        continue
            else:
                # Usar portugus como padro
                video_path = VIDEOS_PROMO.get("pt", "")
                if not os.path.exists(video_path):
                    BOT2_LOGGER.error(f"[{horario_atual}] ERRO: Arquivo de vdeo promo no encontrado: {video_path}")
                    continue
            
            # Verificar se  a primeira mensagem do dia para este canal
            hora_atual = agora.replace(minute=0, second=0, microsecond=0)
            key_contagem = f"{chat_id}_{hora_atual.strftime('%Y%m%d%H')}"
            
            BOT2_LOGGER.info(f"[{horario_atual}] Enviando vdeo pr-sinal para o canal {chat_id} em {idioma}...")
            
            # Enviar o vdeo promocional como GIF
            try:
                url_base = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendAnimation"
                
                # Parmetros para envio da animao
                params = {
                    'chat_id': chat_id,
                    'disable_notification': False
                }
                
                with open(video_path, 'rb') as animation_file:
                    files = {'animation': animation_file}
                    
                    resposta = requests.post(url_base, data=params, files=files)
                    
                    if resposta.status_code != 200:
                        BOT2_LOGGER.error(f"[{horario_atual}] Erro ao enviar GIF promocional para o canal {chat_id}: {resposta.text}")
                    else:
                        BOT2_LOGGER.info(f"[{horario_atual}] GIF PROMOCIONAL ENVIADO COM SUCESSO para o canal {chat_id}")
                
                # Texto da mensagem promocional
                if idioma == "pt":
                    mensagem = ""
                elif idioma == "en":
                    mensagem = ""
                elif idioma == "es":
                    mensagem = ""
                else:
                    mensagem = ""
                
                # Texto do boto de acordo com o idioma
                if idioma == "pt":
                    texto_botao = "?? Abrir corretora"
                elif idioma == "en":
                    texto_botao = "?? Open broker"
                elif idioma == "es":
                    texto_botao = "?? Abrir corredor"
                else:
                    texto_botao = "?? Abrir corretora"
                
                # Configurar teclado inline com o link da corretora
                teclado_inline = {
                    "inline_keyboard": [
                        [
                            {
                                "text": texto_botao,
                                "url": link_corretora
                            }
                        ]
                    ]
                }
                
                # Enviar a mensagem com o boto para a corretora
                url_msg = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendMessage"
                
                payload = {
                    'chat_id': chat_id,
                    'text': mensagem,
                    'parse_mode': 'HTML',
                    'disable_web_page_preview': True,
                    'reply_markup': json.dumps(teclado_inline)
                }
                
                resposta_msg = requests.post(url_msg, data=payload)
                
                if resposta_msg.status_code != 200:
                    BOT2_LOGGER.error(f"[{horario_atual}] Erro ao enviar mensagem pr-sinal para o canal {chat_id}: {resposta_msg.text}")
                else:
                    BOT2_LOGGER.info(f"[{horario_atual}] MENSAGEM PR-SINAL ENVIADA COM SUCESSO para o canal {chat_id}")
                
            except Exception as e:
                BOT2_LOGGER.error(f"[{horario_atual}] Erro ao enviar vdeo e mensagem pr-sinal: {str(e)}")
        
    except Exception as e:
        horario_atual = bot2_obter_hora_brasilia().strftime("%H:%M:%S")
        BOT2_LOGGER.error(f"[{horario_atual}] Erro ao enviar mensagem pr-sinal: {str(e)}")
        traceback.print_exc()

# Funo para enviar mensagem promocional a cada 3 sinais
def bot2_enviar_promo_especial():
    """
    Envia uma mensagem promocional especial a cada 3 sinais enviados.
    Para todos os canais: envia o vdeo especfico do idioma e depois a mensagem.
    """
    try:
        horario_atual = bot2_obter_hora_brasilia().strftime("%H:%M:%S")
        BOT2_LOGGER.info(f"[{horario_atual}] INICIANDO ENVIO DA MENSAGEM PROMOCIONAL ESPECIAL (A CADA 3 SINAIS) - Contador: {bot2_contador_sinais}...")

        # Loop para enviar aos canais configurados
        for chat_id in BOT2_CHAT_IDS:
            # Pegar configurao do canal
            config_canal = BOT2_CANAIS_CONFIG[chat_id]
            idioma = config_canal["idioma"]
            link_corretora = config_canal["link_corretora"]

            # Preparar textos baseados no idioma com links diretamente no texto
            if idioma == "pt":
                texto_mensagem = (
                    "????PARA PARTICIPAR DESTA SESSO, SIGA O PASSO A PASSO ABAIXO????\n\n\n"
                    "1 ? >  Crie sua conta na corretora no link abaixo e GANHE $10.000 DE GRAA pra comear a operar com a gente sem ter que arriscar seu dinheiro.\n\n"
                    "Voc vai poder testar todos nossas\n"
                    "operaes com risco ZERO!\n\n"
                    "????????????????\n\n"
                    f"<a href=\"{link_corretora}\">CRIE SUA CONTA AQUI E GANHE R$10.000</a>\n\n"
                    "\n\n"
                    "2 ? >  Assista o vdeo abaixo e aprenda como depositar e como entrar com a gente nas nossas operaes!\n\n"
                    "????????????????\n\n"
                    f"<a href=\"{VIDEO_TELEGRAM_URL}\">CLIQUE AQUI E ASSISTA O VDEO</a>"
                )
            elif idioma == "en":
                texto_mensagem = (
                    "????TO PARTICIPATE IN THIS SESSION, FOLLOW THE STEPS BELOW????\n\n\n"
                    "1st ? > Create your broker account in the link below and GET $10,000 FOR FREE to start trading with us without risking your money.\n\n"
                    "You'll be able to test all our\n"
                    "operations with ZERO RISK!\n\n"
                    "????????????????\n\n"
                    f"<a href=\"{link_corretora}\">CREATE YOUR ACCOUNT HERE AND GET $10,000</a>\n\n"
                    "\n\n"
                    "2nd ? > Watch the video below and learn how to deposit and how to join us in our operations!\n\n"
                    "????????????????\n\n"
                    f"<a href=\"{VIDEO_TELEGRAM_EN_URL}\">CLICK HERE AND WATCH THE VIDEO</a>"
                )
            elif idioma == "es":
                texto_mensagem = (
                    "????PARA PARTICIPAR EN ESTA SESIN, SIGA LOS PASOS A CONTINUACIN????\n\n\n"
                    "1 ? > Crea tu cuenta en el corredor en el enlace de abajo y OBTN $10,000 GRATIS para comenzar a operar con nosotros sin arriesgar tu dinero.\n\n"
                    "Podrs probar todas nuestras\n"
                    "operaciones con RIESGO CERO!\n\n"
                    "????????????????\n\n"
                    f"<a href=\"{link_corretora}\">CREA TU CUENTA AQU Y OBTN $10,000</a>\n\n"
                    "\n\n"
                    "2 ? > Mira el video de abajo y aprende cmo depositar y cmo unirte a nosotros en nuestras operaciones!\n\n"
                    "????????????????\n\n"
                    f"<a href=\"{VIDEO_TELEGRAM_ES_URL}\">HAZ CLIC AQU Y MIRA EL VIDEO</a>"
                )
            else:
                texto_mensagem = (
                    "????PARA PARTICIPAR DESTA SESSO, SIGA O PASSO A PASSO ABAIXO????\n\n\n"
                    "1 ? >  Crie sua conta na corretora no link abaixo e GANHE $10.000 DE GRAA pra comear a operar com a gente sem ter que arriscar seu dinheiro.\n\n"
                    "Voc vai poder testar todos nossas\n"
                    "operaes com risco ZERO!\n\n"
                    "????????????????\n\n"
                    f"<a href=\"{link_corretora}\">CRIE SUA CONTA AQUI E GANHE R$10.000</a>\n\n"
                    "\n\n"
                    "2 ? >  Assista o vdeo abaixo e aprenda como depositar e como entrar com a gente nas nossas operaes!\n\n"
                    "????????????????\n\n"
                    f"<a href=\"{VIDEO_TELEGRAM_URL}\">CLIQUE AQUI E ASSISTA O VDEO</a>"
                )

            # Enviar mensagem com links (agora incorporados diretamente no texto)
            BOT2_LOGGER.info(f"[{horario_atual}] ENVIANDO MENSAGEM PROMOCIONAL ESPECIAL (A CADA 3 SINAIS) para o canal {chat_id}...")
            url_base_msg = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendMessage"

            payload_msg = {
                'chat_id': chat_id,
                'text': texto_mensagem,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }

            # Enviar a mensagem
            resposta_msg = requests.post(url_base_msg, data=payload_msg)

            if resposta_msg.status_code != 200:
                BOT2_LOGGER.error(f"[{horario_atual}] Erro ao enviar mensagem promocional especial para o canal {chat_id}: {resposta_msg.text}")
            else:
                BOT2_LOGGER.info(f"[{horario_atual}] MENSAGEM PROMOCIONAL ESPECIAL (A CADA 3 SINAIS) ENVIADA COM SUCESSO para o canal {chat_id}")

    except Exception as e:
        horario_atual = bot2_obter_hora_brasilia().strftime("%H:%M:%S")
        BOT2_LOGGER.error(f"[{horario_atual}] Erro ao enviar mensagem promocional especial: {str(e)}")
        traceback.print_exc()

# Funo auxiliar para enviar o vdeo especial
def bot2_enviar_video_especial(video_path, chat_id, horario_atual):
    """
    Funo auxiliar para enviar o vdeo especial como GIF.
    """
    try:
        url_base_animation = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendAnimation"
        
        with open(video_path, 'rb') as animation_file:
            files = {
                'animation': animation_file
            }
            
            payload_animation = {
                'chat_id': chat_id,
                'parse_mode': 'HTML'
            }
            
            resposta_animation = requests.post(url_base_animation, data=payload_animation, files=files)
            if resposta_animation.status_code != 200:
                BOT2_LOGGER.error(f"[{horario_atual}] Erro ao enviar GIF especial para o canal {chat_id}: {resposta_animation.text}")
                return False
            else:
                BOT2_LOGGER.info(f"[{horario_atual}] GIF ESPECIAL ENVIADO COM SUCESSO para o canal {chat_id}")
                return True
    except Exception as e:
        BOT2_LOGGER.error(f"[{horario_atual}] Erro ao abrir ou enviar arquivo de GIF especial: {str(e)}")
        return False

# Funo para enviar o GIF especial a cada 3 sinais (apenas para o canal portugus)
def bot2_enviar_gif_especial_pt():
    """Envia um GIF especial para o canal em português."""
    agora = bot2_obter_hora_brasilia()
    horario_atual = agora.strftime("%H:%M:%S")
    BOT2_LOGGER.info(f"[{horario_atual}] ENVIANDO GIF ESPECIAL para o canal PT")
    
    # Obter chat_id para o idioma PT
    chat_id_pt = None
    for chat_id, config in BOT2_CANAIS_CONFIG.items():
        if config["idioma"] == "pt":
            chat_id_pt = chat_id
            break
    
    if not chat_id_pt:
        BOT2_LOGGER.error(f"[{horario_atual}] ERRO: Não foi encontrado canal para o idioma PT")
        return
    
    # Diretório para os GIFs especiais em português
    dir_especial_pt = os.path.join(VIDEOS_ESPECIAL_DIR, "pt")
    
    # Verificar se o diretório existe
    if not os.path.exists(dir_especial_pt):
        BOT2_LOGGER.error(f"[{horario_atual}] ERRO: Diretório {dir_especial_pt} não encontrado")
        return
    
    # Listar todos os GIFs disponíveis no diretório
    arquivos_gif = [f for f in os.listdir(dir_especial_pt) if f.lower().endswith('.gif')]
    
    if not arquivos_gif:
        BOT2_LOGGER.error(f"[{horario_atual}] ERRO: Nenhum GIF encontrado no diretório {dir_especial_pt}")
        return
    
    # Escolher um GIF aleatório
    gif_escolhido = random.choice(arquivos_gif)
    caminho_gif = os.path.join(dir_especial_pt, gif_escolhido)
    
    BOT2_LOGGER.info(f"[{horario_atual}] Enviando GIF especial: {caminho_gif}")
    
    # Enviar o GIF como animação para visualização automática
    try:
        with open(caminho_gif, 'rb') as animation_file:
            url_animation = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendAnimation"
            
            # Parâmetros para garantir que a animação seja reproduzida automaticamente
            data = {
                'chat_id': chat_id_pt,
                'disable_notification': False,  # Garantir notificação
                'parse_mode': 'HTML',
                'has_spoiler': False,  # Sem spoiler para visualização imediata
            }
            
            # Preparar o arquivo para upload
            files = {'animation': (os.path.basename(caminho_gif), animation_file, 'image/gif')}
            
            # Enviar a animação
            animation_response = requests.post(url_animation, files=files, data=data)
            
            if animation_response.status_code == 200:
                BOT2_LOGGER.info(f"[{horario_atual}] ✓ GIF ESPECIAL ENVIADO COM SUCESSO!")
                return True
            else:
                BOT2_LOGGER.warning(f"[{horario_atual}] ✗ Não foi possível enviar o GIF especial: {animation_response.text}")
                
                # Método alternativo se o primeiro falhar
                animation_file.seek(0)
                url_alt = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendDocument"
                files = {'document': (os.path.basename(caminho_gif), animation_file, 'image/gif')}
                data = {'chat_id': chat_id_pt, 'disable_content_type_detection': True}
                alt_response = requests.post(url_alt, files=files, data=data)
                
                if alt_response.status_code == 200:
                    BOT2_LOGGER.info(f"[{horario_atual}] ✓ GIF ESPECIAL ENVIADO COM SUCESSO (método alternativo)!")
                    return True
                else:
                    BOT2_LOGGER.error(f"[{horario_atual}] ✗ Falha também no método alternativo: {alt_response.text}")
    except Exception as e:
        BOT2_LOGGER.error(f"[{horario_atual}] Erro ao enviar GIF especial: {str(e)}")
    
    return False

def bot2_enviar_gif_especial_en():
    """Envia um GIF especial para o canal em inglês."""
    agora = bot2_obter_hora_brasilia()
    horario_atual = agora.strftime("%H:%M:%S")
    BOT2_LOGGER.info(f"[{horario_atual}] ENVIANDO GIF ESPECIAL para o canal EN")
    
    # Obter chat_id para o idioma EN
    chat_id_en = None
    for chat_id, config in BOT2_CANAIS_CONFIG.items():
        if config["idioma"] == "en":
            chat_id_en = chat_id
            break
    
    if not chat_id_en:
        BOT2_LOGGER.error(f"[{horario_atual}] ERRO: Não foi encontrado canal para o idioma EN")
        return
    
    # Diretório para os GIFs especiais em inglês
    dir_especial_en = os.path.join(VIDEOS_ESPECIAL_DIR, "en")
    
    # Verificar se o diretório existe
    if not os.path.exists(dir_especial_en):
        BOT2_LOGGER.error(f"[{horario_atual}] ERRO: Diretório {dir_especial_en} não encontrado")
        # Tentar usar o diretório PT como fallback
        dir_especial_en = os.path.join(VIDEOS_ESPECIAL_DIR, "pt")
        if not os.path.exists(dir_especial_en):
            BOT2_LOGGER.error(f"[{horario_atual}] ERRO: Diretório fallback {dir_especial_en} não encontrado")
            return

    # Listar todos os GIFs disponíveis no diretório
    arquivos_gif = [f for f in os.listdir(dir_especial_en) if f.lower().endswith('.gif')]
    
    if not arquivos_gif:
        BOT2_LOGGER.error(f"[{horario_atual}] ERRO: Nenhum GIF encontrado no diretório {dir_especial_en}")
        return
    
    # Escolher um GIF aleatório
    gif_escolhido = random.choice(arquivos_gif)
    caminho_gif = os.path.join(dir_especial_en, gif_escolhido)
    
    BOT2_LOGGER.info(f"[{horario_atual}] Enviando GIF especial: {caminho_gif}")
    
    # Enviar o GIF como animação para visualização automática
    try:
        with open(caminho_gif, 'rb') as animation_file:
            url_animation = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendAnimation"
            
            # Parâmetros para garantir que a animação seja reproduzida automaticamente
            data = {
                'chat_id': chat_id_en,
                'disable_notification': False,  # Garantir notificação
                'parse_mode': 'HTML',
                'has_spoiler': False,  # Sem spoiler para visualização imediata
            }
            
            # Preparar o arquivo para upload
            files = {'animation': (os.path.basename(caminho_gif), animation_file, 'image/gif')}
            
            # Enviar a animação
            animation_response = requests.post(url_animation, files=files, data=data)
            
            if animation_response.status_code == 200:
                BOT2_LOGGER.info(f"[{horario_atual}] ✓ GIF ESPECIAL ENVIADO COM SUCESSO!")
                return True
            else:
                BOT2_LOGGER.warning(f"[{horario_atual}] ✗ Não foi possível enviar o GIF especial: {animation_response.text}")
                
                # Método alternativo se o primeiro falhar
                animation_file.seek(0)
                url_alt = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendDocument"
                files = {'document': (os.path.basename(caminho_gif), animation_file, 'image/gif')}
                data = {'chat_id': chat_id_en, 'disable_content_type_detection': True}
                alt_response = requests.post(url_alt, files=files, data=data)
                
                if alt_response.status_code == 200:
                    BOT2_LOGGER.info(f"[{horario_atual}] ✓ GIF ESPECIAL ENVIADO COM SUCESSO (método alternativo)!")
                    return True
                else:
                    BOT2_LOGGER.error(f"[{horario_atual}] ✗ Falha também no método alternativo: {alt_response.text}")
    except Exception as e:
        BOT2_LOGGER.error(f"[{horario_atual}] Erro ao enviar GIF especial: {str(e)}")
    
    return False

def bot2_enviar_gif_especial_es():
    """Envia um GIF especial para o canal em espanhol."""
    agora = bot2_obter_hora_brasilia()
    horario_atual = agora.strftime("%H:%M:%S")
    BOT2_LOGGER.info(f"[{horario_atual}] ENVIANDO GIF ESPECIAL para o canal ES")
    
    # Obter chat_id para o idioma ES
    chat_id_es = None
    for chat_id, config in BOT2_CANAIS_CONFIG.items():
        if config["idioma"] == "es":
            chat_id_es = chat_id
            break
    
    if not chat_id_es:
        BOT2_LOGGER.error(f"[{horario_atual}] ERRO: Não foi encontrado canal para o idioma ES")
        return
    
    # Diretório para os GIFs especiais em espanhol
    dir_especial_es = os.path.join(VIDEOS_ESPECIAL_DIR, "es")
    
    # Verificar se o diretório existe
    if not os.path.exists(dir_especial_es):
        BOT2_LOGGER.error(f"[{horario_atual}] ERRO: Diretório {dir_especial_es} não encontrado")
        # Tentar usar o diretório PT como fallback
        dir_especial_es = os.path.join(VIDEOS_ESPECIAL_DIR, "pt")
        if not os.path.exists(dir_especial_es):
            BOT2_LOGGER.error(f"[{horario_atual}] ERRO: Diretório fallback {dir_especial_es} não encontrado")
            return
    
    # Listar todos os GIFs disponíveis no diretório
    arquivos_gif = [f for f in os.listdir(dir_especial_es) if f.lower().endswith('.gif')]
    
    if not arquivos_gif:
        BOT2_LOGGER.error(f"[{horario_atual}] ERRO: Nenhum GIF encontrado no diretório {dir_especial_es}")
        return
    
    # Escolher um GIF aleatório
    gif_escolhido = random.choice(arquivos_gif)
    caminho_gif = os.path.join(dir_especial_es, gif_escolhido)
    
    BOT2_LOGGER.info(f"[{horario_atual}] Enviando GIF especial: {caminho_gif}")
    
    # Enviar o GIF como animação para visualização automática
    try:
        with open(caminho_gif, 'rb') as animation_file:
            url_animation = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendAnimation"
            
            # Parâmetros para garantir que a animação seja reproduzida automaticamente
            data = {
                'chat_id': chat_id_es,
                'disable_notification': False,  # Garantir notificação
                'parse_mode': 'HTML',
                'has_spoiler': False,  # Sem spoiler para visualização imediata
            }
            
            # Preparar o arquivo para upload
            files = {'animation': (os.path.basename(caminho_gif), animation_file, 'image/gif')}
            
            # Enviar a animação
            animation_response = requests.post(url_animation, files=files, data=data)
            
            if animation_response.status_code == 200:
                BOT2_LOGGER.info(f"[{horario_atual}] ✓ GIF ESPECIAL ENVIADO COM SUCESSO!")
                return True
            else:
                BOT2_LOGGER.warning(f"[{horario_atual}] ✗ Não foi possível enviar o GIF especial: {animation_response.text}")
                
                # Método alternativo se o primeiro falhar
                animation_file.seek(0)
                url_alt = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendDocument"
                files = {'document': (os.path.basename(caminho_gif), animation_file, 'image/gif')}
                data = {'chat_id': chat_id_es, 'disable_content_type_detection': True}
                alt_response = requests.post(url_alt, files=files, data=data)
                
                if alt_response.status_code == 200:
                    BOT2_LOGGER.info(f"[{horario_atual}] ✓ GIF ESPECIAL ENVIADO COM SUCESSO (método alternativo)!")
                    return True
                else:
                    BOT2_LOGGER.error(f"[{horario_atual}] ✗ Falha também no método alternativo: {alt_response.text}")
    except Exception as e:
        BOT2_LOGGER.error(f"[{horario_atual}] Erro ao enviar GIF especial: {str(e)}")

    return False

# Modificar a funo bot2_send_message para alterar os tempos de agendamento
def bot2_send_message(ignorar_anti_duplicacao=False):
    """Envia uma mensagem com sinal para todos os canais configurados."""
    global bot2_contador_sinais
    
    try:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.info(f"[{horario_atual}] INICIANDO ENVIO DO SINAL...")
        
        # Verificar se j houve envio recente para evitar flood (mnimo 45 segundos entre mensagens)
        if hasattr(bot2_send_message, 'ultimo_envio_timestamp'):
            diferenca = (agora - bot2_send_message.ultimo_envio_timestamp).total_seconds()
            if diferenca < 45 and not ignorar_anti_duplicacao:
                BOT2_LOGGER.warning(f"[{horario_atual}] Anti-duplicao: ltimo envio foi h {diferenca:.1f} segundos.")
                if diferenca < 10:  # Muito recente, ignorar
                    BOT2_LOGGER.warning(f"[{horario_atual}] Limite anti-duplicao atingido. Ignorando este sinal.")
                    return
        
        bot2_send_message.ultimo_envio_timestamp = agora
        
        # Verificar limite de sinais por hora
        hora_atual = agora.replace(minute=0, second=0, microsecond=0)
        
        # Gerar o sinal aleatrio
        sinal = bot2_gerar_sinal_aleatorio()
        if not sinal:
            BOT2_LOGGER.error(f"[{horario_atual}] No foi possvel gerar um sinal vlido. Tentando novamente mais tarde.")
            return
            
        # Em vez de desempacotar diretamente, obtenha os valores do dicionrio
        ativo = sinal['ativo']
        direcao = sinal['direcao']
        tempo_expiracao_minutos = sinal['tempo_expiracao_minutos']
        categoria = sinal['categoria']
        
        # Define a categoria correta para o sinal (Binary, Digital ou Blitz)
        for categoria_nome, lista_ativos in ATIVOS_CATEGORIAS.items():
            if ativo in lista_ativos:
                sinal['categoria'] = categoria_nome
                categoria = categoria_nome
                break
        
        # Calcular os horrios que faltam
        hora_entrada = bot2_obter_hora_brasilia()
        
        # Ajustar o horrio de entrada para ser exatamente 2 minutos aps o envio do sinal
        # E garantir que termine em 0 ou 5
        minuto_atual = hora_entrada.minute
        minuto_entrada = minuto_atual + 2
        
        # Se o minuto no terminar em 0 ou 5, ajustar para o prximo que termine
        ultimo_digito = minuto_entrada % 10
        if ultimo_digito != 0 and ultimo_digito != 5:
            # Calcular quanto falta para o prximo minuto que termine em 0 ou 5
            if ultimo_digito < 5:
                ajuste = 5 - ultimo_digito
            else:
                ajuste = 10 - ultimo_digito
            minuto_entrada += ajuste
        
        # Criar o novo horrio de entrada ajustado
        hora_entrada = hora_entrada.replace(minute=minuto_entrada, second=0, microsecond=0)
        BOT2_LOGGER.info(f"[{horario_atual}] Horrio de entrada ajustado para {hora_entrada.strftime('%H:%M')} (2 minutos aps o sinal + ajuste para terminar em 0 ou 5)")
        
        hora_expiracao = hora_entrada + timedelta(minutes=tempo_expiracao_minutos)
        expiracao_time = hora_expiracao
        
        # Calcular os horrios de reentrada (se aplicveis)
        if tempo_expiracao_minutos >= 15:
            # Reentradas s so relevantes para operaes de no mnimo 15 minutos
            hora_reentrada1 = hora_entrada + timedelta(minutes=3)
            hora_reentrada2 = hora_entrada + timedelta(minutes=7)
            hora_reentrada3 = hora_entrada + timedelta(minutes=12)
            
            BOT2_LOGGER.info(f"[{horario_atual}] Horrios: Entrada={hora_entrada.strftime('%H:%M:%S')}, Reentrada1={hora_reentrada1.strftime('%H:%M:%S')}, Reentrada2={hora_reentrada2.strftime('%H:%M:%S')}, Reentrada3={hora_reentrada3.strftime('%H:%M:%S')}")
        else:
            BOT2_LOGGER.info(f"[{horario_atual}] Horrios: Entrada={hora_entrada.strftime('%H:%M:%S')}, Expirao={hora_expiracao.strftime('%H:%M:%S')}")
        
        BOT2_LOGGER.info(f"[{horario_atual}] SINAL GERADO. Enviando para todos os canais configurados...")
        
        # Formatao da hora para exibio
        hora_formatada = hora_entrada.strftime("%H:%M")
        
        # Enviar para cada canal
        for chat_id in BOT2_CHAT_IDS:
            config_canal = BOT2_CANAIS_CONFIG[chat_id]
            idioma = config_canal["idioma"]
            
            mensagem_formatada = bot2_formatar_mensagem(sinal, hora_formatada, idioma)
            url_base = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendMessage"
            
            # Registrar envio nos logs
            BOT2_LOGGER.info(f"[{horario_atual}] Enviando sinal: Ativo={ativo}, Direo={direcao}, Categoria={categoria}, Tempo={tempo_expiracao_minutos}, Idioma={idioma}")
            
            try:
                resposta = requests.post(url_base, json={
                    "chat_id": chat_id,
                    "text": mensagem_formatada,
                    "parse_mode": "HTML",
                    "disable_web_page_preview": True
                }, timeout=10)
                
                if resposta.status_code == 200:
                    BOT2_LOGGER.info(f"[{horario_atual}] ? SINAL ENVIADO COM SUCESSO para o canal {chat_id}")
                else:
                    BOT2_LOGGER.error(f"[{horario_atual}] ? Erro ao enviar mensagem para o canal {chat_id}: {resposta.text}")
            except Exception as msg_error:
                BOT2_LOGGER.error(f"[{horario_atual}] ? Exceo ao enviar mensagem para o canal {chat_id}: {str(msg_error)}")
        
        # Incrementa o contador global de sinais
        bot2_contador_sinais += 1
        BOT2_LOGGER.info(f"[{horario_atual}] Contador de sinais incrementado: {bot2_contador_sinais}")
        
        # Registrar envio no arquivo de registro
        bot2_registrar_envio(ativo, direcao, categoria)
        
        # Cancelar quaisquer agendamentos anteriores para evitar duplicaes
        schedule.clear('bot2_pos_sinal')
        schedule.clear('bot2_gif_especial')
        schedule.clear('bot2_promo_especial')
        schedule.clear('bot2_video_pre_sinal')
        schedule.clear('bot2_msg_pre_sinal')
        
        # Ajustar o tempo de agendamento do gif ps-sinal com base no tempo de expirao
        tempo_pos_sinal = 12  # tempo padro (caso no seja nenhum dos casos especficos)
        
        if categoria == "Blitz":
            # Para Blitz (com expirao em segundos: 5, 10, 15 ou 30), enviar aps 4 minutos
            tempo_pos_sinal = 4
            BOT2_LOGGER.info(f"[{horario_atual}] Ativo Blitz com expirao em segundos, agendando gif ps-sinal para daqui a 4 minutos")
        elif tempo_expiracao_minutos == 1:
            tempo_pos_sinal = 5  # 5 minutos aps o sinal se expirao for 1 minuto
            BOT2_LOGGER.info(f"[{horario_atual}] Tempo de expirao  1 minuto, agendando gif ps-sinal para daqui a 5 minutos")
        elif tempo_expiracao_minutos == 2:
            tempo_pos_sinal = 6  # 6 minutos aps o sinal se expirao for 2 minutos
            BOT2_LOGGER.info(f"[{horario_atual}] Tempo de expirao  2 minutos, agendando gif ps-sinal para daqui a 6 minutos")
        elif tempo_expiracao_minutos == 5:
            tempo_pos_sinal = 10  # 10 minutos aps o sinal se expirao for 5 minutos
            BOT2_LOGGER.info(f"[{horario_atual}] Tempo de expirao  5 minutos, agendando gif ps-sinal para daqui a 10 minutos")
        else:
            BOT2_LOGGER.info(f"[{horario_atual}] Tempo de expirao  {tempo_expiracao_minutos} minutos, usando tempo padro de 12 minutos para gif ps-sinal")
        
        # SEQUNCIA DE AGENDAMENTOS:
        # 1. Agendar o gif ps-sinal com o tempo ajustado (enviado para todos os sinais)
        BOT2_LOGGER.info(f"[{horario_atual}] Agendando envio NICO de imagem ps-sinal para daqui a {tempo_pos_sinal} minutos...")
        schedule.every(tempo_pos_sinal).minutes.do(bot2_enviar_gif_pos_sinal).tag('bot2_pos_sinal')
        
        # Se for a cada 3 sinais (mltiplo de 3), agendar sequncia completa
        if bot2_contador_sinais % 3 == 0:
            BOT2_LOGGER.info(f"[{horario_atual}] Este  um sinal mltiplo de 3 (contador={bot2_contador_sinais}), agendando sequncia completa...")
            
            # Calcular o tempo at o prximo sinal (usado para todos os agendamentos)
            agora = bot2_obter_hora_brasilia()
            proximo_sinal_hora = agora.hour
            proximo_sinal_minuto = 13
            
            # Se j passou do minuto 13 da hora atual, o prximo sinal  na prxima hora
            if agora.minute >= 13:
                proximo_sinal_hora = (agora.hour + 1) % 24
            
            # Calcular o horrio do prximo sinal
            proximo_sinal = agora.replace(hour=proximo_sinal_hora, minute=13, second=0, microsecond=0)
            if agora.minute >= 13 and agora.hour == proximo_sinal.hour:
                proximo_sinal = proximo_sinal + timedelta(hours=1)
            
            BOT2_LOGGER.info(f"[{horario_atual}] Prximo sinal ser s {proximo_sinal.strftime('%H:%M')}")
            
            # 2. GIF especial PT (apenas para o canal portugus) - 20 minutos antes do prximo sinal
            tempo_gif_especial = proximo_sinal - timedelta(minutes=20)
            minutos_ate_gif = ((tempo_gif_especial - agora).total_seconds() / 60.0)
            
            # Verificar se  necessrio esperar menos de 1 minuto (nesse caso agendar para a prxima hora)
            if minutos_ate_gif < 1:
                tempo_gif_especial = tempo_gif_especial + timedelta(hours=1)
                minutos_ate_gif = ((tempo_gif_especial - agora).total_seconds() / 60.0)
            
            schedule.every(int(minutos_ate_gif)).minutes.do(bot2_enviar_gif_especial_pt).tag('bot2_gif_especial')
            BOT2_LOGGER.info(f"[{horario_atual}] Agendando GIF especial PT para {tempo_gif_especial.strftime('%H:%M')} (20 minutos antes do prximo sinal)")
            
            # 3. Mensagem promocional especial - 19 minutos antes do prximo sinal (1 minuto aps o GIF especial)
            tempo_promo = proximo_sinal - timedelta(minutes=19)
            minutos_ate_promo = ((tempo_promo - agora).total_seconds() / 60.0)
            
            # Verificar se  necessrio esperar menos de 1 minuto (nesse caso agendar para a prxima hora)
            if minutos_ate_promo < 1:
                tempo_promo = tempo_promo + timedelta(hours=1)
                minutos_ate_promo = ((tempo_promo - agora).total_seconds() / 60.0)
            
            schedule.every(int(minutos_ate_promo)).minutes.do(bot2_enviar_promo_especial).tag('bot2_promo_especial')
            BOT2_LOGGER.info(f"[{horario_atual}] Agendando mensagem promocional especial para {tempo_promo.strftime('%H:%M')} (19 minutos antes do prximo sinal)")
            
            # 4. Vdeo promocional: exatos 15 minutos antes do prximo sinal
            tempo_pre_sinal = proximo_sinal - timedelta(minutes=15)
            minutos_ate_video = ((tempo_pre_sinal - agora).total_seconds() / 60.0)
            
            # Verificar se  necessrio esperar menos de 1 minuto (nesse caso agendar para a prxima hora)
            if minutos_ate_video < 1:
                tempo_pre_sinal = tempo_pre_sinal + timedelta(hours=1)
                minutos_ate_video = ((tempo_pre_sinal - agora).total_seconds() / 60.0)
            
            schedule.every(int(minutos_ate_video)).minutes.do(bot2_enviar_promo_pre_sinal).tag('bot2_video_pre_sinal')
            BOT2_LOGGER.info(f"[{horario_atual}] Agendando vdeo promocional para {tempo_pre_sinal.strftime('%H:%M')} (15 minutos antes do prximo sinal)")
            
            # 5. Mensagem pr-sinal: 1 minuto aps o vdeo promocional (14 minutos antes do prximo sinal)
            tempo_pre_mensagem = proximo_sinal - timedelta(minutes=14)
            minutos_ate_mensagem = ((tempo_pre_mensagem - agora).total_seconds() / 60.0)
            
            # Verificar se  necessrio esperar menos de 1 minuto (nesse caso agendar para a prxima hora)
            if minutos_ate_mensagem < 1:
                tempo_pre_mensagem = tempo_pre_mensagem + timedelta(hours=1)
                minutos_ate_mensagem = ((tempo_pre_mensagem - agora).total_seconds() / 60.0)
            
            schedule.every(int(minutos_ate_mensagem)).minutes.do(bot2_enviar_mensagem_pre_sinal).tag('bot2_msg_pre_sinal')
            BOT2_LOGGER.info(f"[{horario_atual}] Agendando mensagem pr-sinal para {tempo_pre_mensagem.strftime('%H:%M')} (14 minutos antes do prximo sinal)")
    
    except Exception as e:
        horario_atual = bot2_obter_hora_brasilia().strftime("%H:%M:%S")
        BOT2_LOGGER.error(f"[{horario_atual}] Erro ao enviar mensagem: {str(e)}")
        traceback.print_exc()

# Inicializaes para a funo bot2_send_message
bot2_send_message.ultimo_envio_timestamp = bot2_obter_hora_brasilia()
bot2_send_message.contagem_por_hora = {bot2_obter_hora_brasilia().replace(minute=0, second=0, microsecond=0): 0}

# Funo para verificar se o bot j est em execuo
def is_bot_already_running():
    """
    Verifica se j existe uma instncia do bot em execuo usando um socket.
    """
    try:
        # Tenta criar um socket em uma porta especfica
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.bind(('localhost', 9876))  # Porta arbitrria para verificao
        return False
    except socket.error:
        # Se a porta estiver em uso, assume que o bot est rodando
        return True

# Funo original do Bot 1 (implementao mnima para compatibilidade)
def schedule_messages():
    """
    Funo de compatibilidade com o Bot 1 original.
    Esta implementao  um placeholder e no realiza agendamentos reais.
    """
    logging.info("Funo schedule_messages() do Bot 1 chamada (sem efeito)")
    pass

# Funo para manter o Bot 2 em execuo
def bot2_keep_bot_running():
    """
    Mantm o Bot 2 em execuo, verificando os agendamentos.
    """
    BOT2_LOGGER.info("Iniciando funo keep_bot_running do Bot 2")
    try:
        while True:
            schedule.run_pending()
            time.sleep(1)
    except Exception as e:
        BOT2_LOGGER.error(f"Erro na funo keep_bot_running do Bot 2: {str(e)}")
        traceback.print_exc()

def bot2_schedule_messages():
    """Agenda as mensagens do Bot 2 para envio nos intervalos especficos."""
    try:
        if hasattr(bot2_schedule_messages, 'scheduled'):
            BOT2_LOGGER.info("Agendamentos j existentes. Pulando...")
            return

        BOT2_LOGGER.info("Iniciando agendamento de mensagens para o Bot 2")
        
        # Definir o minuto para envio dos sinais (sempre 3 minutos antes de um horrio que termina em 0 ou 5)
        # Para terminar em 15, enviar no minuto 13
        minuto_envio = 13
        
        # Agendar 1 sinal por hora, no minuto definido
        for hora in range(0, 24):
            schedule.every().day.at(f"{hora:02d}:{minuto_envio:02d}:02").do(bot2_send_message)
            BOT2_LOGGER.info(f"Sinal agendado: {hora:02d}:{minuto_envio:02d}:02 (horrio de entrada: {hora:02d}:15)")

        bot2_schedule_messages.scheduled = True
        BOT2_LOGGER.info("Agendamento de mensagens do Bot 2 concludo com sucesso")
        
    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao agendar mensagens: {str(e)}")
        traceback.print_exc()

def iniciar_ambos_bots():
    """Inicializa ambos os bots."""
    try:
        # Configurar logs e inicializar variveis
        BOT2_LOGGER.info("Iniciando o Bot 2...")
        
        # Definir o horrio especial dirio para a imagem especial
        definir_horario_especial_diario()
        agendar_redefinicao_horario_especial()
        
        # Remover chamada duplicada que j foi feita no escopo global
        # definir_horario_especial_diario()
        # agendar_redefinicao_horario_especial()
        
        # Inicializar horrios ativos
        inicializar_horarios_ativos()

        # Inicializar o Bot 1 (original)
        try:
            logging.info("Inicializando Bot 1...")
            # Verifica se j existe uma instncia do bot rodando
            if is_bot_already_running():
                logging.error("O bot j est rodando em outra instncia. Encerrando...")
                sys.exit(1)
            schedule_messages()      # Funo original do bot 1
        except Exception as e:
            logging.error(f"Erro ao inicializar Bot 1: {str(e)}")
        
        # Inicializar o Bot 2
        try:
            BOT2_LOGGER.info("Inicializando Bot 2 em modo normal...")
            bot2_schedule_messages()  # Agendar mensagens nos horrios normais
            bot2_keep_bot_running()  # Chamada direta para a funo do Bot 2
        except Exception as e:
            BOT2_LOGGER.error(f"Erro ao inicializar Bot 2: {str(e)}")
        
        logging.info("Ambos os bots esto em execuo!")
        BOT2_LOGGER.info("Ambos os bots esto em execuo em modo normal!")
        
        # Loop principal para verificar os agendamentos
        while True:
            try:
                schedule.run_pending()
                time.sleep(1)
            except Exception as e:
                logging.error(f"Erro no loop principal: {str(e)}")
                BOT2_LOGGER.error(f"Erro no loop principal: {str(e)}")
                time.sleep(5)  # Pausa maior em caso de erro

    except Exception as e:
        BOT2_LOGGER.error(f"Erro ao inicializar ambos os bots: {str(e)}")
        traceback.print_exc()

def bot2_enviar_mensagem_pre_sinal():
    """
    Envia uma mensagem promocional antes do sinal.
    Esta funo  chamada aps o envio do vdeo pr-sinal.
    """
    try:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.info(f"[{horario_atual}] INICIANDO ENVIO DA MENSAGEM PR-SINAL...")

        # Loop para enviar a mensagem para cada canal configurado
        for chat_id in BOT2_CHAT_IDS:
            config_canal = BOT2_CANAIS_CONFIG[chat_id]
            idioma = config_canal["idioma"]
            link_corretora = config_canal["link_corretora"]

            # Mensagem especfica para o idioma com o link embutido no texto
            if idioma == "pt":
                mensagem = f"????Abram a corretora Pessoal\n\n??FIQUEM ATENTOS??\n\n??Cadastre-se na XXBROKER agora mesmo??\n\n?? <a href=\"{link_corretora}\">CLICANDO AQUI</a>"
            elif idioma == "en":
                mensagem = f"????Open the broker now\n\n??STAY ALERT??\n\n??Register on XXBROKER right now??\n\n?? <a href=\"{link_corretora}\">CLICK HERE</a>"
            elif idioma == "es":
                mensagem = f"????Abran el corredor ahora\n\n??MANTNGANSE ATENTOS??\n\n??Regstrese en XXBROKER ahora mismo??\n\n?? <a href=\"{link_corretora}\">CLIC AQU</a>"
            else:
                mensagem = f"????Abram a corretora Pessoal\n\n??FIQUEM ATENTOS??\n\n??Cadastre-se na XXBROKER agora mesmo??\n\n?? <a href=\"{link_corretora}\">CLICANDO AQUI</a>"

            # Enviar a mensagem para o canal especfico
            url_base = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendMessage"
            payload = {
                'chat_id': chat_id,
                'text': mensagem,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }

            resposta = requests.post(url_base, data=payload)

            if resposta.status_code != 200:
                BOT2_LOGGER.error(f"[{horario_atual}] Erro ao enviar mensagem pr-sinal para o canal {chat_id}: {resposta.text}")
            else:
                BOT2_LOGGER.info(f"[{horario_atual}] MENSAGEM PR-SINAL ENVIADA COM SUCESSO para o canal {chat_id}")

    except Exception as e:
        horario_atual = bot2_obter_hora_brasilia().strftime("%H:%M:%S")
        BOT2_LOGGER.error(f"[{horario_atual}] Erro ao enviar mensagem pr-sinal: {str(e)}")
        traceback.print_exc()

# Executar se este arquivo for o script principal
if __name__ == "__main__":
    try:
        print("=== INICIANDO O BOT TELEGRAM ===")
        print(f"Diretrio base: {BASE_DIR}")
        print(f"Diretrio de vdeos: {VIDEOS_DIR}")
        print(f"Diretrio de GIFs especiais: {VIDEOS_ESPECIAL_DIR}")
        print(f"Arquivo GIF especial PT: {VIDEO_GIF_ESPECIAL_PT}")
        
        # Exibir caminhos das imagens ps-sinal
        print(f"Caminho da imagem ps-sinal padro (PT): {os.path.join(VIDEOS_POS_SINAL_DIR, 'pt', 'padrao.jpg')}")
        print(f"Caminho da imagem ps-sinal especial (PT): {os.path.join(VIDEOS_POS_SINAL_DIR, 'pt', 'especial.jpg')}")
        print(f"Caminho da imagem ps-sinal padro (EN): {os.path.join(VIDEOS_POS_SINAL_DIR, 'en', 'padrao.jpg')}")
        print(f"Caminho da imagem ps-sinal especial (EN): {os.path.join(VIDEOS_POS_SINAL_DIR, 'en', 'especial.jpg')}")
        print(f"Caminho da imagem ps-sinal padro (ES): {os.path.join(VIDEOS_POS_SINAL_DIR, 'es', 'padrao.jpg')}")
        print(f"Caminho da imagem ps-sinal especial (ES): {os.path.join(VIDEOS_POS_SINAL_DIR, 'es', 'especial.jpg')}")
        
        # Verificar se os diretrios existem
        print(f"Verificando pastas:")
        print(f"VIDEOS_DIR existe: {os.path.exists(VIDEOS_DIR)}")
        print(f"VIDEOS_POS_SINAL_DIR existe: {os.path.exists(VIDEOS_POS_SINAL_DIR)}")
        print(f"VIDEOS_POS_SINAL_PT_DIR existe: {os.path.exists(VIDEOS_POS_SINAL_PT_DIR)}")
        print(f"VIDEOS_ESPECIAL_DIR existe: {os.path.exists(VIDEOS_ESPECIAL_DIR)}")
        print(f"VIDEOS_ESPECIAL_PT_DIR existe: {os.path.exists(VIDEOS_ESPECIAL_PT_DIR)}")
        
        # Criar pastas se no existirem
        os.makedirs(VIDEOS_DIR, exist_ok=True)
        os.makedirs(VIDEOS_ESPECIAL_DIR, exist_ok=True)
        os.makedirs(VIDEOS_ESPECIAL_PT_DIR, exist_ok=True)
        os.makedirs(VIDEOS_POS_SINAL_DIR, exist_ok=True)
        os.makedirs(VIDEOS_POS_SINAL_PT_DIR, exist_ok=True)
        os.makedirs(VIDEOS_POS_SINAL_EN_DIR, exist_ok=True)
        os.makedirs(VIDEOS_POS_SINAL_ES_DIR, exist_ok=True)
        
        # Iniciar os bots
        iniciar_ambos_bots()
    except Exception as e:
        print(f"Erro ao iniciar bots: {str(e)}")
        traceback.print_exc()

def inicializar_horarios_ativos():
    """
    Adiciona horrios padro para todos os ativos listados em ATIVOS_CATEGORIAS
    que no tm uma configurao especfica em assets.
    """
    global BOT2_ATIVOS_CATEGORIAS
    
    # Inicializa o dicionrio BOT2_ATIVOS_CATEGORIAS para ser usado pelo bot
    BOT2_ATIVOS_CATEGORIAS = {}
    
    # Atualizar ATIVOS_CATEGORIAS para cada ativo na lista Digital
    for ativo in ATIVOS_CATEGORIAS["Digital"]:
        # Adicionar ao dicionrio BOT2_ATIVOS_CATEGORIAS usado pelo bot
        BOT2_ATIVOS_CATEGORIAS[ativo] = "Digital"
        
        # Tambm atualizar ATIVOS_CATEGORIAS para consistncia
        ATIVOS_CATEGORIAS[ativo] = "Digital"
        
        # Configurar horrios especficos para cada ativo
        if ativo == "Gold/Silver (OTC)":
            assets[ativo] = {
                "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
            }
        elif ativo == "Worldcoin (OTC)":
            assets[ativo] = {
                "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
            }
        elif ativo == "USD/THB (OTC)":
            assets[ativo] = {
                "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
            }
        elif ativo == "ETH/USD (OTC)":
            assets[ativo] = {
                "Monday": ["00:00-19:45", "20:15-23:59"],
                "Tuesday": ["00:00-19:45", "20:15-23:59"],
                "Wednesday": ["00:00-19:45", "20:15-23:59"],
                "Thursday": ["00:00-19:45", "20:15-23:59"],
                "Friday": ["00:00-19:45", "20:15-23:59"],
                "Saturday": ["00:00-19:45", "20:15-23:59"],
                "Sunday": ["00:00-19:45", "20:15-23:59"]
            }
        elif ativo == "CHF/JPY (OTC)":
            assets[ativo] = {
                "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
            }
        elif ativo == "Pepe (OTC)":
            assets[ativo] = {
                "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
            }
        elif ativo == "GBP/AUD (OTC)":
            assets[ativo] = {
                "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
            }
        elif ativo == "GBP/CHF":
            assets[ativo] = {
                "Monday": ["00:00-16:00"],
                "Tuesday": ["00:00-16:00"],
                "Wednesday": ["00:00-16:00"],
                "Thursday": ["00:00-16:00"],
                "Friday": ["00:00-14:00"],
                "Saturday": [],
                "Sunday": []
            }
        elif ativo == "GBP/CAD (OTC)":
            assets[ativo] = {
                "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
            }
        elif ativo == "EUR/JPY (OTC)":
            assets[ativo] = {
                "Monday": ["00:00-23:59"],
                "Tuesday": ["00:00-23:59"],
                "Wednesday": ["00:00-01:00", "01:15-23:59"],
                "Thursday": ["00:00-23:59"],
                "Friday": ["00:00-23:59"],
                "Saturday": ["00:00-23:59"],
                "Sunday": ["00:00-23:59"]
            }
        elif ativo == "AUD/CHF":
            assets[ativo] = {
                "Monday": ["00:00-16:00"],
                "Tuesday": ["00:00-16:00"],
                "Wednesday": ["00:00-16:00"],
                "Thursday": ["00:00-16:00"],
                "Friday": ["00:00-14:00"],
                "Saturday": [],
                "Sunday": []
            }
        elif ativo == "GER 30 (OTC)":
            assets[ativo] = {
                "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
            }
        elif ativo == "AUD/CHF (OTC)":
            assets[ativo] = {
                "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
            }
        elif ativo == "EUR/AUD":
            assets[ativo] = {
                "Monday": ["00:00-16:00"],
                "Tuesday": ["00:00-16:00"],
                "Wednesday": ["00:00-16:00"],
                "Thursday": ["00:00-16:00"],
                "Friday": ["00:00-14:00"],
                "Saturday": [],
                "Sunday": []
            }
        elif ativo == "USD/CAD (OTC)":
            assets[ativo] = {
                "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
            }
        elif ativo == "BTC/USD":
            assets[ativo] = {
                "Monday": ["03:00-15:00"],
                "Tuesday": ["03:00-15:00"],
                "Wednesday": ["03:00-15:00"],
                "Thursday": ["03:00-15:00"],
                "Friday": ["03:00-15:00"],
                "Saturday": [],
                "Sunday": []
            }
        elif ativo == "Amazon/Ebay (OTC)":
            assets[ativo] = {
                "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
            }
        elif ativo == "Coca-Cola_Company_OTC":
            assets[ativo] = {
                "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
            }
        elif ativo == "AIG_OTC":
            assets[ativo] = {
                "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
            }
        elif ativo == "Amazon/Alibaba_OTC":
            assets[ativo] = {
                "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
            }
        elif ativo == "Bitcoin_Cash_OTC":
            assets[ativo] = {
                "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
            }
        elif ativo == "USD Currency Index_OTC":
            assets[ativo] = {
                "Monday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
                "Tuesday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
                "Wednesday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
                "Thursday": ["00:00-10:00", "10:30-22:00", "22:30-23:59"],
                "Friday": ["00:00-10:00", "10:30-18:00"],
                "Saturday": [],
                "Sunday": ["19:00-23:59"]
            }
        elif ativo == "AUS_200_OTC":  # J existe, mas atualizando para os novos horrios
            assets[ativo] = {
                "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
            }
        elif ativo == "USD/CAD":
            assets[ativo] = {
                "Monday": ["03:00-15:00"],
                "Tuesday": ["03:00-15:00", "21:00-23:59"],
                "Wednesday": ["00:00-15:00"],
                "Thursday": ["03:00-15:00"],
                "Friday": ["03:00-15:00"],
                "Saturday": [],
                "Sunday": []
            }
        elif ativo == "USD/JPY":
            assets[ativo] = {
                "Monday": ["00:00-14:00", "23:00-23:59"],
                "Tuesday": ["00:00-14:00", "23:00-23:59"],
                "Wednesday": ["00:00-14:00", "23:00-23:59"],
                "Thursday": ["00:00-14:00", "23:00-23:59"],
                "Friday": ["00:00-14:00"],
                "Saturday": [],
                "Sunday": ["23:00-23:59"]
            }
        elif ativo == "MELANIA_Coin_OTC":  # J existe, mantendo a mesma configurao
            assets[ativo] = {
                "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
            }
        elif ativo == "JP_225_OTC":
            assets[ativo] = {
                "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
            }
        elif ativo == "AUD/CAD (OTC)":  # J existe, atualizando a configurao
            assets[ativo] = {
                "Monday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Tuesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Wednesday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Thursday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Friday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Saturday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"],
                "Sunday": ["00:00-03:00", "03:30-22:00", "22:30-23:59"]
            }
        elif ativo == "AUD/JPY (OTC)":
            assets[ativo] = {
                "Monday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Tuesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Wednesday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Thursday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Friday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Saturday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"],
                "Sunday": ["00:00-05:00", "05:30-12:00", "12:30-23:59"]
            }
        elif ativo == "US 500_OTC":  # J existe, atualizando a configurao
            assets[ativo] = {
                "Monday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
                "Tuesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
                "Wednesday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
                "Thursday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"],
                "Friday": ["00:00-23:59"],
                "Saturday": ["00:00-23:59"],
                "Sunday": ["00:00-11:30", "12:00-17:30", "18:00-23:59"]
            }
        else:
            # Para outros ativos sem configurao especfica
            assets[ativo] = {
                "Monday": ["00:00-23:59"],
                "Tuesday": ["00:00-23:59"],
                "Wednesday": ["00:00-23:59"],
                "Thursday": ["00:00-23:59"],
                "Friday": ["00:00-23:59"],
                "Saturday": ["00:00-23:59"],
                "Sunday": ["00:00-23:59"]
            }
