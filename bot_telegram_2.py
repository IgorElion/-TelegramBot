# -*- coding: utf-8 -*-
"""
Sistema de envio de sinais automatizados para a xxbroker.
Desenvolvido por IteamHost 2023
"""

# Importa√ß√µes
import os
import sys
import time
import json
import random
import copy
import uuid
import logging
import traceback
import threading
import requests
from datetime import datetime, timedelta
from functools import lru_cache
import schedule
import re
import urllib.request
import pytz  # Adicionar importa√ß√£o do pytz para manipula√ß√£o de fusos hor√°rios

# Definir constantes globais
BOT_VERSION = "2.0.1"
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
BOT2_CANAIS_CONFIG = {"pt": [], "en": [], "es": []}
ATIVOS_CATEGORIAS = {"Digital": [], "Digital_Disponiveis": []}

# Vari√°veis globais de controle
bot2_contador_sinais = 0
ultimo_sinal_enviado = None
bot2_sinais_agendados = False
thread_sequencia_ativa = None
sequencia_multiplo_tres_lock = threading.Lock()

# Vari√°vel para controlar execu√ß√£o do teste apenas uma vez
TESTE_JA_EXECUTADO = False

# Definir token do Telegram - SUBSTITUA PELO SEU TOKEN
BOT2_TOKEN = "5834194999:AAFEz3NbvMC1-l89x5ue3I0eoO-B_E2CHVI" # Token do Bot 2

# Configurar logging personalizado
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(os.path.join(SCRIPT_DIR, 'bot_sinais.log'), encoding='utf-8')
    ]
)

# Criar o logger espec√≠fico para o Bot 2
BOT2_LOGGER = logging.getLogger("Bot2")

# Configura√ß√µes dos idiomas (fusos hor√°rios)
CONFIGS_IDIOMA = {
    "pt": {"fuso_horario": "America/Sao_Paulo", "nome": "Portugu√™s"},
    "en": {"fuso_horario": "America/New_York", "nome": "English"},
    "es": {"fuso_horario": "Europe/Madrid", "nome": "Espa√±ol"}
}

# Fun√ß√µes de utilidade
def bot2_obter_hora_brasilia():
    """
    Obt√©m a hora atual no fuso hor√°rio de Bras√≠lia (America/Sao_Paulo).
    
    Returns:
        datetime: Objeto datetime com a hora atual no fuso de Bras√≠lia
    """
    fuso_brasilia = pytz.timezone('America/Sao_Paulo')
    return datetime.now(fuso_brasilia)

def verificar_url_gif(url):
    """
    Verifica se a URL do GIF √© v√°lida e acess√≠vel.
    
    Args:
        url: URL do GIF a ser verificada
        
    Returns:
        bool: True se a URL for v√°lida e acess√≠vel, False caso contr√°rio
    """
    try:
        # Configurar um timeout curto para evitar esperas longas
        requisicao = urllib.request.Request(url, method="HEAD")
        resposta = urllib.request.urlopen(requisicao, timeout=5)
        
        # Verificar se o c√≥digo de status √© 200 (OK)
        return resposta.getcode() == 200
    except Exception as e:
        BOT2_LOGGER.warning(f"Erro ao verificar URL do GIF: {str(e)}")
        return False

def bot2_enviar_gif_promo(idioma="pt"):
    """
    Envia o GIF promocional para todos os canais do idioma especificado.
    Este GIF √© enviado 35 minutos ap√≥s o sinal original (T+35) para sinais m√∫ltiplos de 3.
    
    Args:
        idioma: Idioma dos canais para enviar o GIF (pt, en, es)
        
    Returns:
        bool: True se o GIF foi enviado com sucesso, False caso contr√°rio
    """
    global BOT2_LOGGER, BOT2_CANAIS_CONFIG, BOT2_TOKEN
    
    # Adicionando prote√ß√£o contra envios duplicados durante o teste
    # Se esta vari√°vel n√£o existir ainda, criamos ela
    if not hasattr(bot2_enviar_gif_promo, 'gif_enviado_por_idioma'):
        bot2_enviar_gif_promo.gif_enviado_por_idioma = {
            'pt': False,
            'en': False,
            'es': False
        }
    
    # Se o teste inicial estiver sendo executado (TESTE_JA_EXECUTADO = False)
    # e o GIF j√° foi enviado para este idioma, n√£o enviar novamente
    if not TESTE_JA_EXECUTADO and bot2_enviar_gif_promo.gif_enviado_por_idioma.get(idioma, False):
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.warning(f"[GIF-PROMO][{horario_atual}] ‚ö†Ô∏è GIF J√Å ENVIADO para idioma {idioma} durante o teste inicial. Ignorando chamada duplicada.")
        return True  # Retornar sucesso para n√£o interromper o fluxo
    
    try:
        # Obter hora atual em Bras√≠lia para os logs
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        
        BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] üîÑ Iniciando envio de GIF promocional para idioma {idioma}")
        
        # Verificar se h√° canais configurados para o idioma
        if idioma not in BOT2_CANAIS_CONFIG or not BOT2_CANAIS_CONFIG[idioma]:
            BOT2_LOGGER.warning(f"[GIF-PROMO][{horario_atual}] ‚ö†Ô∏è Nenhum canal configurado para idioma {idioma}")
            return False
        
        # Canais para este idioma
        chats = BOT2_CANAIS_CONFIG[idioma]
        BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] üì¢ Total de canais para idioma {idioma}: {len(chats)}")
        
        # Usar a mesma URL do GIF promocional para todos os idiomas
        gif_url = "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExZGhqMmNqOWFpbTQ2cjNxMzF1YncxcnAwdTFvN2o1NWRmc2dvYXZ6bCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/whPiIq21hxXuJn7WVX/giphy.gif"
        
        # Verificar se a URL do GIF √© v√°lida
        if not verificar_url_gif(gif_url):
            BOT2_LOGGER.warning(f"[GIF-PROMO][{horario_atual}] ‚ö†Ô∏è URL do GIF promocional inv√°lida: {gif_url}")
            # Usar URL alternativa se a verifica√ß√£o falhar
            gif_url = "https://i.imgur.com/jphWAEq.gif"
            BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] üîÑ Usando URL alternativa: {gif_url}")
        
        # Lista para armazenar resultados dos envios
        resultados_envio = []
        enviados_com_sucesso = 0
        
        # Enviar para cada canal configurado
        for chat_id in chats:
            try:
                # URL para o m√©todo sendAnimation da API do Telegram (para GIFs)
                url = f"https://api.telegram.org/bot{BOT2_TOKEN}/sendAnimation"
                
                # Montar payload da requisi√ß√£o
                payload = {
                    "chat_id": chat_id,
                    "animation": gif_url,
                    "disable_notification": False
                }
                
                BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] üöÄ Enviando GIF promocional para chat_id: {chat_id}")
                
                # Enviar requisi√ß√£o para API
                inicio_envio = time.time()
                resposta = requests.post(url, json=payload, timeout=15)
                tempo_resposta = (time.time() - inicio_envio) * 1000  # em milissegundos
                
                # Verificar resultado da requisi√ß√£o
                if resposta.status_code == 200:
                    BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] ‚úÖ GIF promocional enviado com sucesso para {chat_id} (tempo: {tempo_resposta:.1f}ms)")
                    resultados_envio.append(True)
                    enviados_com_sucesso += 1
                else:
                    BOT2_LOGGER.error(f"[GIF-PROMO][{horario_atual}] ‚ùå Falha ao enviar GIF promocional para {chat_id}: {resposta.status_code} - {resposta.text}")
                    resultados_envio.append(False)
                    
                    # Tentar novamente uma vez se falhar
                    BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] üîÑ Tentando novamente para {chat_id}...")
                    try:
                        resposta_retry = requests.post(url, json=payload, timeout=15)
                        if resposta_retry.status_code == 200:
                            BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] ‚úÖ GIF promocional enviado com sucesso na segunda tentativa para {chat_id}")
                            resultados_envio.append(True)
                            enviados_com_sucesso += 1
                        else:
                            BOT2_LOGGER.error(f"[GIF-PROMO][{horario_atual}] ‚ùå Falha na segunda tentativa: {resposta_retry.status_code}")
                    except Exception as e:
                        BOT2_LOGGER.error(f"[GIF-PROMO][{horario_atual}] ‚ùå Erro na segunda tentativa: {str(e)}")
                        
            except Exception as e:
                BOT2_LOGGER.error(f"[GIF-PROMO][{horario_atual}] ‚ùå Exce√ß√£o ao enviar GIF promocional para {chat_id}: {str(e)}")
                BOT2_LOGGER.error(f"[GIF-PROMO][{horario_atual}] üîç Detalhes: {traceback.format_exc()}")
                resultados_envio.append(False)
        
        # Calcular estat√≠sticas finais
        if chats:
            taxa_sucesso = (enviados_com_sucesso / len(chats)) * 100
            BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] üìä RESUMO: {enviados_com_sucesso}/{len(chats)} GIFs promocionais enviados com sucesso ({taxa_sucesso:.1f}%)")
        
        # Retornar True se pelo menos um GIF foi enviado com sucesso
        envio_bem_sucedido = any(resultados_envio)
        
        if envio_bem_sucedido:
            BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] ‚úÖ Envio de GIF promocional para idioma {idioma} conclu√≠do com sucesso")
            
            # Se ainda estamos no teste inicial, marcar este idioma como j√° enviado
            if not TESTE_JA_EXECUTADO:
                bot2_enviar_gif_promo.gif_enviado_por_idioma[idioma] = True
                BOT2_LOGGER.info(f"[GIF-PROMO][{horario_atual}] üîí Marcando GIF para idioma {idioma} como j√° enviado durante o teste")
        else:
            BOT2_LOGGER.error(f"[GIF-PROMO][{horario_atual}] ‚ùå Falha em todos os envios de GIF promocional para idioma {idioma}")
        
        return envio_bem_sucedido
    
    except Exception as e:
        agora = bot2_obter_hora_brasilia()
        horario_atual = agora.strftime("%H:%M:%S")
        BOT2_LOGGER.error(f"[GIF-PROMO][{horario_atual}] ‚ùå Erro cr√≠tico ao enviar GIF promocional: {str(e)}")
        BOT2_LOGGER.error(f"[GIF-PROMO][{horario_atual}] üîç Detalhes: {traceback.format_exc()}")
        return False
